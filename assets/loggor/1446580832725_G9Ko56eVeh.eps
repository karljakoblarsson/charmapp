%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1446580832725_G9Ko56eVeh.pdf
%%Creator: Adobe Acrobat 10.1.5
%%For: kivi
%%CreationDate: 2016-01-02, 12:59:55
%%BoundingBox: 0 0 596 842
%%HiResBoundingBox: 0 0 595.2760 841.8901
%%CropBox: 0 0 595.2760 841.8901
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 26908 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:CreatorTool="Adobe Illustrator CS3"
   xmp:CreateDate="2015-09-14T16:45:26+02:00"
   xmp:ModifyDate="2015-09-14T16:45:26+02:00"
   xmp:MetadataDate="2015-09-14T16:45:26+02:00"
   xmpMM:DocumentID="uuid:4C95163BEF5AE511B8999664C2F19B81"
   xmpMM:InstanceID="uuid:8c509766-03b5-440b-8d10-6c4aaf773d64"
   illustrator:StartupProfile="Print"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   pdf:Producer="Adobe PDF library 8.00">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Damco- vectoricerad</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="72"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgASAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Akv8AytTz7/1dP+SFv/1T&#xA;zmP5Rz/zvsH6nnfz2bv+wNP+aPntxQ6oQOvwwwL+qMYD2hm/nfYF/PZu/wCwLP8AlZnnn/q6v/yL&#xA;i/5owfn8385fz2X+d9yvbfmv55hYFr9ZlH7EkMRH3qqt+OSj2jmHX7AmOvyjrbI9H/PG7Vwmsaek&#xA;kfeW1JRgP9Rywb/ghmXi7WP8Y+TlY+0z/EPk9K0DzPomvW5n0y5WbjT1Yj8MiV/mQ7j59M22HUQy&#xA;C4l2WLNHILiUbqF9b2FhcX1y3C3tYnmmbwRFLH8BlspULZzkIgk8g+c7n87vzAleQxXkcCOxKKsE&#xA;TFATUAFlNadN81f5nJ3vKz7YznlQ+CHX85vzHVgTqwYDqpt7ah+6MHB+Zyd7WO1dR/O+wfqZt+Vv&#xA;5r6/rPmddJ1yeOWK6jcWrLGkZEyDnSqgfaUN9NMv0+okZVIuz7O7SnlycE635PZcz3esH/ODzVqn&#xA;lvyvFdaVP9Xvp7pIUk4JJReDu3wyBl/Yp0zP7O08cuSpCxTr+09TLFiuJok08Y/5XN+ZP/V4/wCn&#xA;a1/6pZvP5NwfzftP63n/AOVdR/O+wfqVIPzp/MaOeOSTUxNGjAvC1vbBXAO6krGrCvscB7MwEfT9&#xA;p/WmPa2cHeV/AfqfSOlalbanplrqNsa293Ek0Z78XUGh9xnMZIGMjE8w9bCYlESHIorIMnYq8p/O&#xA;D8zdW8u6lZ6XocyR3Xpma9ZkWSisaRr8QNDsSfozb9naGOWJlPl0dP2n2hLCRGHPq84b85/zIZiR&#xA;qwUHootrag++InNp/JmD+b9p/W6c9q6j+d9g/UnXk/8AOHztd+ZNJsdRvkmtLm6ignrBEpKyuF6o&#xA;qUpyzH1PZuIQkYjcDvcrSdqZZZIxkbBNcnt/mTzPoXlvTH1LWrtLS0TYM27O3ZUUVZmPgBmgxYpZ&#xA;DURZeknMRFl8/ec/+cn9ZunktvKloun224W+uQstw3use8afTyzd4OyYjeZvydbl155RDyjVvPHn&#xA;HWHLalrV5cg/sPO/AfJAQg+gZsoafHHlEOHLPM8yUlZmZizEszGpJ3JJy5qJTPTvNXmfTJBJp2rX&#xA;lo4NawzyJX5hWFfpyuWGEuYBbBmmORLJr788/wA1rnSP0amvPAaEG7jihWdlNKKZAnIUp9paN7nM&#xA;HJ2XjO8dj9jlY9fMc93lmv6t5mvrlpda1G6v5X6z3E0k3Km32nJzX5MBxmiHYY8wmLBSnIM0+0Hz&#xA;/wCdvL8gfRtcvbIAhjHHO/pMRuOURJjb/ZLkTEFNl7b+X/8Azl3rFtKlp53s1v7Y0H6Ts0WK4Xxa&#xA;SEUik/2HCnvlMsHckSfTPl3zLoPmTS49V0K+i1Cwl2WeE1owAJV1NGRhXdWAIzGII5skywK+UM4t&#xA;5J2KuxV2KuxVE6dqV9pt5HeWMzW9zEapIhofkfEHuD1yUJmJsGizhMxNg7sw86/mtLrHkQ6aYvR1&#xA;K5lSK9ZNkMS/HyTuObKAR883Mdf4sOE/V1crW9ocWCv4jsXkuVvPOxVFaVqNxpmp2mo25pPaSpNH&#xA;4Eowah9jShwg0bbMWQwmJDoX17pmo22padbahatyt7uJJoj/AJLqGFffffN1GVi3u4TEoiQ5F5H/&#xA;AM5G3lLXQ7MH7bzzMP8AUCKv/Ezm97GjvI+50fbk/TGPmfx9rxDN8867FX0B+QPmVr3QLnRJ35Ta&#xA;Y/K3r19CYk0/2L8vvGc72vg4ZiY/i+96jsbPxYzA84/c9UzUO4WTTRQQyTSsEiiUvI56BVFSfuwg&#xA;WaQTT5F82a/N5g8x3+ryVH1qUmJT1WJfhjX6EAGdlp8IxwEe54fVZ/FyGXelGXNCIsLprS+trtPt&#xA;W8qSrTrVGDD9WRnHiBHezxz4ZCXcUp8/+eNf836/Nf6s/ERs0dtZISYoEB+wg8f5m6nKNNp44o1F&#xA;3ubNLIbLGsvaXYq7FXYq7FVOeGOaIxyCqn9fiMhkxiYos4TMTYY5fWUlrLxbdG3R/EZo8+E45UXd&#xA;YcwnG0NlLa7FWY/lj+Z/mH8v9eTUdMkMlnKVXUtOY0iuIga0Ox4uN+LgVHyJBhOAkEgvu/yj5q0f&#xA;zX5dstf0iUyWN6nNOQo6MDxeNx2ZGBU/htmDKNGmb5nzinknYq93/L/yx5cuvJ2nXF1pdrPPNGxl&#xA;llhR3J5sPtMCemdHotPjliBMQT7nf6XBA4wTEfJGar+Vvk3UI2C2f1OU/ZltiUI/2O6f8Lk8nZ2K&#xA;XSvczyaLFLpXueR+dPIWp+WJldz9Y06VuMF2opv14uP2Wp9+aTVaOWE98e91Gp0ksXnFjGYjiLXR&#xA;XQowqrChGGMiDYQRYopJPC0MzRt1U7HxHUH6Rm1jKxbrpx4TSnQ/fhYuxV9B/kL5gF95Xm0mR6z6&#xA;XKQik7+jNV1+5+Y+7Nlo53Gu56rsfPxYuHrH7mGf85C3fqea7C1HSCyDn/Wkleo6eCDOu7Hj+7J8&#xA;3A7bneSI7h9/9jyvNs6V2Ksr/LHzP/h3zhZXcjcbSc/Vbzeg9KUgcj7IwVvozE12DxMRHUbhzuzt&#xA;R4WYHodi+qc5F7J5/wDnZ5mOj+T3s4W43erMbZKdRFSsx/4H4f8AZZsezMHHls8o7/qdb2rqPDwk&#xA;DnLb9b5rzqHkXYq7FWK6mrrqFxz+0zlv+CPL+ORdxjNxB8lTRNE1TW9Ut9K0u3a5vrpuEMKdz1JJ&#xA;OwUDck7AZDJkjCPFLkG2EDI0H0l5K/5xq8saZbpdeapTqt6Bykt1ZorSM9eqlXeniSB/k5odR2rO&#xA;RqHpH2u2xaGMfq3L5X/MDzJZ6v5v1K70WBNO0f1TFp1rbL6SCCP4UYherOByYnufDBHNkreR+bcc&#xA;MO4fJJ7fWLuNhzPqp3Ddfvy/FrJx5mw05NLCXSizXyT5Z1jzpqkWm6FD608lWldvhSFB9p5W/ZUf&#xA;j0G+bE6zGIcZOzrxpZ8fC+n/ACb/AM47eR9EgSTVojrmo0q8lxVYFPcJCDSn+vy+jNJn7TyTPp9I&#xA;dli0cI89yyu+/Kv8tb23NvceV9LMZ7paQxsNqbPGquPoOYUs+Q85E/FyI44x5AB5H+Yv/OJXl+8t&#xA;Zr3yTM+m6ggLLplw5ltZafspI9ZImPizMvy65KGc9WVPlfVNL1DStQuNO1G3e1vrVzFcW8o4ujr1&#xA;BGZQNsELhV77/wA4l/mBPpnmqbyfdSn9HayrzWaE7JexJU0qdvUiQg+JVcx88drZRKLzgXlHYq+i&#xA;vy2/5QfSf+Mbf8nGzqNB/cx/HV6TSf3UfcyXMxyUFrWkWmr6Xc6ddryhuEKk9Sp6qw91O4yvLiE4&#xA;mJ6sMmMTiYnq+Y720ls7ye0mFJreR4pAP5kYqfxGchKJiSD0eXlHhJB6KOBil+pW7PNB6Y5SSn01&#xA;RRuSCKffypmdpZemnFzwsiuZejfm35FXRvK/l67gUcrGFbC+Ze7sDKH+Xqep94zaajDwxBdp2po+&#xA;DFAj+HY/j3/e8ozEdCzT8ovMR0XzrZ8242uof6HPU0A9Ujg3htIF+iuX6efDMOy7Kz+HmA6S2/U1&#xA;+c179a/MPUgDVLcQwL/sYlLf8Mxz0DsyNYB5p7Wnec+VMIzPda7FXYq+qvyx8xfp7yXp927crmBf&#xA;qt34+rCAtT7svFvpzkddh8PKR05h7TQZ/FxCXXkfe8T/ADp8xnV/Ok9tG/K00ofVYgOnqDeY/Pn8&#xA;P+xzfdmYeDED1lv+p57tbPx5aHKO362A5sHWOxV2Ksb11WGouzdHVSvyChf+Nci7TTm4B9E/84w+&#xA;Tbe18v3Pmq4iBvdRke3s5CPs20Ro5X/XlBB/1RnP9rZyZCA5D73e6DFUeLqXon5r6q2lflp5mvkY&#xA;pLHptwkTg8SsksZjQg+IZxmqgLIc9+eebBrdir7j/wCcbvJFp5b/AC00+99MDUtfRdQvJu5SQE26&#xA;A9eKxEGn8xbxzCyyssw9UypLsVdir5l/5zA8i26x6Z51tUCTPINO1IKB8dVZ4JDTuAjISf8AJHbM&#xA;nBLoiT5izJYJt5S1qXQ/NOkaxF9vT7yC5APQiKQMQdxsQKHIyFhI5vcs87eVdir6K/Lb/lB9J/4x&#xA;t/ycbOo0H9zH8dXpNJ/dR9zJczHJdir5v8/hB5z1fh0+sNXvuacvxzlNZ/ey97zes/vZJBmM4zIf&#xA;y80Aaz510xHTnb2Za7n2DDjFQqGB7M/EZn9nQ4p036TDx5o90d3tv5g6Ida8napYKKytF6kO1fjh&#xA;IkWlPErTN/qI3Au91mHxMUo+T5QIINDsR1Gah4dwJBBBoRuCMVV9UvrvUL+a+u5DLc3LGSWQinJj&#xA;1z0XsnMMmniR0FH3j8W2ZchnIyPMoTNiwej+efKHofl/5V1+COlLVILziNqTEzROfpdgT7jNZpdR&#xA;eacD37fc7jW6b9xjyD+aL+LzjNm6dnn5afmIfKdrrMElWW5tzJZJQkC7T4Ur4Bg1Wr/Lmv12j8Yx&#xA;Pcd/c7Ps/XeCJA9Rt72CySPJI0kjFnclnY7kk7knNgBTrCSTZRWkaXdarqlrptovK4u5VijB6Asa&#xA;VPsOpyGTIIRMjyDZhxHJMRHMsq/NzQbLQvNUWn2SenbJZW/pjx4goWPuxSp98xOzspyY+I87Lndq&#xA;4hjyCMeXCGE5nOtSLzEj/WIXP2SnFf8AYsSf+JYC7HSH0fF9afkVcQz/AJVaCYqAIk0bqK7OlxIG&#xA;rXx65ynaAIzSeo0xvGGvz6R3/KDzOEUsRaA0ArssqEn6AK5i4/qDe+Bsz2t2Kv0U/LaWOX8u/K8k&#xA;bBkbSbEgj/mGTNfPmWxkeRV2KuxV47/zlbcwQ/lJPHL9u5vrWKDp9sM0h/4SNsuwfUg8nxVmYwbA&#xA;JIAFSdgBgV9D5508s7FX0V+W3/KD6T/xjb/k42dRoP7mP46vSaT+6j7mS5mOSoX17bWNlPeXL8Le&#xA;3RpJW8FUVORnMRBJ5BjKQiLL5g1S+k1DU7u+k2e6meZh1pzYtT6K5x+SfFIy73l8k+KRPehsiwZn&#xA;+Xfnnyv5TN5Lqkdw97dBViaFFcLEtSRUsv2m6/IZtezskcYJINlzNLrMWG+K7LNP+V+eR/8AfV7/&#xA;AMiU/wCqmbP87HuP2frcz+WMHn8nguuy6dNrN7NpvMWEszvbCQAOEY1AYDuK0zXbdOTzOolE5CY/&#xA;SSgcWlphVa9x+o51Hs3qalLEeu4/T+PJKzOuV9YT+WLfVPIEXl+cUR7CGBDSnCSONfTbv9l1BzkB&#xA;nMM3GP5z28tOJ4fDPKqfKdxbzW9xLbzoY5oXaOVD1VlNGB+RGddEgiw8TKJiSDzCnhQ7FXrv/OPv&#xA;lkXGqXnmCZax2S/V7Un/AH9IKuw/1Y9v9lmm7Xz1EQHXd3vYmnsnIemwUf8AnIi34+ZtNuP9+WXp&#xA;/wDIuVz/AMzMl2NL92R5se3I+uJ8vx97yjNu6RKfMSOYIZP2EZlPzcA/8aYC52jPN7N/zjB54t0W&#xA;78n3kgWWR2vNMLftHiBNEPcBQ4H+tmj7W052yD3F6HQZduAvaPPOivrnkvXdHjUNNf2Fzbwg/wC/&#xA;JImWM/Q9DmliaLsX5ykEGh2I6jM9rawq+yP+cVfP9vrPkgeWbl+Op6CWWIMd5bR3LIy1NT6bPwNB&#xA;QDj45i5sZHq6MhIcur2/Mdk7FXYq+Sv+ct/zBttV16y8o2Eokg0YtPqLqaqbuRaLH84o6192I6jM&#xA;rBGhbGT59zIYsi/LzQH8w+etB0YKzJe3sCTcBUiEOGmb/YxhmyMzQSOb2bPO3lXYq+g/y6vrGPyR&#xA;pYkuIkKowYM6ih9RjQ1OdNoZxGGNl6PSSHhRR2qeevKWmozXGpwsy/7qhYTSV8OMfI/fluTWYoc5&#xA;D72c9TjjzIeR+fPzJu/MQNjaI1rpIIJRqepKRuDJTYAdlH+1o9Zrjl2G0XT6rWnJsNosKzAcFpmV&#xA;VLMaKBUn2wxBJoIJpI7iYzTNIduR2HgBsM2kI8Ip105cRtTyTF2KuxVsUrQ9DscydHqDhyxmOh+z&#xA;r9iQ3a27T3cNsKhpZFjHjVmAz0szHDxDlTKEeKQHeX2cqqqhVACgUAGwAGcQ98+cvzz8s/ovzZ+k&#xA;oUpa6uvrVA2E6UWUfT8LfTnTdlZ+PHwnnH7nle2NPwZOIcpfe84zZupbAJIAFSdgBir6x/L/AMtj&#xA;y75TsNNZQtyE9W8I7zSfE/8AwP2fozj9Xn8TIZdOj2+jweFiEevX3vN/+cjrf/jg3I/5eY2/5JFf&#xA;45tOxZfUPd+l1PbsdoH3/oeK5vHnkBrkTPpzsDtEyuw+nh/xvgLlaT6j7kgtLu6s7qK6tZXguYHE&#xA;kM0ZKujqahlI3BByMogijydlGRBsPoHyP/zk/AIIrPzhaP6ygKdTtFBDe8kNRQ+JQn/VGaTUdkm7&#xA;xn4F2eLXjlJ4F+amkaK/nnU7zyrcLfaJfyG9t2VWi9MzkvJCUkCMOD1pt9mmVw0uWt4uQdTj72M2&#xA;2hzsQZyETuo3b+mZOLQzJ9WwaMmtiB6dyyjy/q2o+XtQttQ0edrO8tG5Qyp1HiCDswbowPXvmyOC&#xA;BhwV6XXeNLi4r3fR/kr/AJyb8vXlvHb+a4W0y9UAPeQI0ts5/m4rylT5Ub55pM/ZMwbhuPtdni10&#xA;SPVsWVap/wA5AflHptus0+vo/MExxww3EjtTtRY/hP8ArUzAnpckeYpy45Iy5F43+ZH/ADlvcXtr&#xA;Lp3kezksVlUo+r3gX11B6+hEpdUPg7E/6oO+GGDvZGT5ylllmleWV2klkYvJI5LMzMakkncknMhg&#xA;swq+kP8AnET8vpptSvPPF7FS2tVey0osPtTOAJpV9kT4K/5R8Mxs8ujOIQ+cE8m7FXYq7FXYq1+o&#xA;bk4gKyL8ufKdv5w1ue1uWkXSrOL1Ll4iFZ3Y8Y0DEGgrVvozbaHSWd27RYBqJkH6I8/0PSP+VC+R&#xA;v5rz/kcv/NGbP8nDvLs/5Hwdx+bv+VC+Rv5rz/kcv/NGP5OHeV/kfB3H5ofUPyD8pNZTiylu47zg&#xA;xt2aVGX1KHjyBT7NeuA6ONbEsZ9jYSNrB975/kjkikaORSkiEq6MKEEGhBGa55Ugg0VuKE28pW31&#xA;nzbokNKia+tlbYnb1V5bfLc52/Zer49GQecAR9m36nJ0gvLD+sPvfXWaV7hhf5u+Wl1zyXd8E5Xm&#xA;nj65akdaxj94v+yj5beNMzuzs/h5R3HZwO0tP4uEjqNw+X86t45m35Q+Wv0550tTKnKz0/8A0y48&#xA;D6ZHpr9MlNvCuYPaOfw8R75bOx7L0/iZgTyjv+p9PZyj17yn/nIi35eWNNuP993vp/8AIyJz/wAa&#xA;Zt+xz+8I8v0um7bH7oH+l+gvAc6J5hD6hEJbGdSaAIzV90HIfqwFu059YYpgdo7FXYq7FXYqpXFx&#xA;FBGZJTRR27k+AyvLlEBZbMeMzNBjV3dSXMxkf5KvgPDNFlymcrLusWMQjQUcrbHYq9A/KP8AJ/Xv&#xA;zC1lY4Va10K3cfpLVCPhQdTHHXZpWHQdupyueQRCQH3ToWh6XoOj2mj6VAttp9jGIbeFeyr3J7sT&#xA;uxPU75hE2zfPknkHzlHTlpFya/ypy/4jXOSOjyj+EvNnR5f5q3/A3nD/AKs91/yKbH8pl/mn5I/K&#xA;Zf5pd/gbzh/1Z7r/AJFNj+Uy/wA0/JfymX+aWm8kecFFTo93QeETH9QwflMv80/JfyuX+aVKTyf5&#xA;vT7Oh30hpUcYHAr4EkfwyyOiyHmCPgxlpso/hJQc/kf8wLgEfoO7SP8AkETCvzr1zKhpjH+E/IuP&#xA;PSaiX8Jp7Z+T/lKfy95WrexGHUr+QzXMbijIq/DGh+QHL/ZZttLj4Y2eZd92Zpjixb/UdyznMl2L&#xA;sVdir5+/M/8ALXzCfN17e6Npst1Y3pW45Qry4ySf3ikDf7YLdO+azPhlxGhs8z2j2dkOUyhGwd/i&#xA;xL/lXfnn/qxXn/Ipsp8Kfcfk4P8AJ2f+aWR/l75A82W/nDSru+0m4t7S2uFlkmlQqF4gkfjmx7Oy&#xA;zxcUSDwzjX6v0/NzNBocsc0ZSjQD6LzIeocQCKHcHqMVfMvm78rfNFl5jv4NL0q4utN9UvaTQxll&#xA;9N/iVajuleJ+WdVp9fjlAGUgJdXktV2blGQ8Ebj0es/kv5PuPL/luS4v4Ht9T1GQtPFIOLpHESsa&#xA;kfe305pu09SMk6BuId32XpTix+oVKT0HNc7JhH5xaJf6x5KltrC3e6uo54ZY4YgWc0JU0A8A1cz+&#xA;zcsYZbkaFOB2lilkwkRFnZ4FL5A88RrybQb8gmnw28jn7lBOdENZiP8AFH5vMS0OYfwFE6L+Xvmm&#xA;41K0W+0C/OnmeNbxWgkjJhLj1BVgv7Nd8hl1mMRNSjdd7bp9Fl44kxNWGR+cv+cXLhZHufKV+rxm&#xA;p/R98eLD2SZRRvYMo/1s12Dtccpj4h3+XQfzS8x1P8nvzN01ys/l67lp+1aqLoH5egZM2ENdhlyk&#xA;PucSWkyDok7eSvOKsVbQdRDA0INpOCCP9hlvj4/5w+bX4M/5p+SP0/8AK38xr9lW38uX45UKtNA8&#xA;CEHvzmCL+OQlrMUecgyjpsh6MmvP+cb/AM1I9I+u21tZz3pNP0Z9ZUTAeJZgsH/JXMLJ2tAbRcrH&#xA;2ef4i8t138ufzLsJJH1Xy5qcaxbNN9VlaEU32kRWj7djmvnn4zZNufDEIigEmg8s+ZLiVYbfSrya&#xA;Vvsxx28rMfkApORsM6LK9D/Ij829Zk42/lq7tl/akvlFmAPH/SDGx/2IOROWI6rwvZPIn/OH8EMs&#xA;d3511MXAWjfozTyyoT1pJcOFYjsQij2bKZZ+5kA+itJ0jS9H06DTdLtYrKwtl4QW0KhEUddgO5O5&#xA;Pc5QTaUXgV//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="uuid:1A6453CFCD5AE511B8999664C2F19B81"
    stRef:documentID="uuid:196453CFCD5AE511B8999664C2F19B81"/>
   <xmpTPg:MaxPageSize
    stDim:w="209.999994"
    stDim:h="297.000002"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Standardfärgrutegrupp"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="Vit"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="Svart"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="100.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Röd"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Gul"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Grön"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Cyan"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Blå"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="CMYK Magenta"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 Y=90 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="14.999998"
         xmpG:magenta="100.000000"
         xmpG:yellow="90.000004"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="90.000004"
         xmpG:yellow="84.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="80.000001"
         xmpG:yellow="94.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 Y=85 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="35.000002"
         xmpG:yellow="84.999996"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="90.000004"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="19.999999"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=100 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="100.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 Y=100 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="84.999996"
         xmpG:magenta="10.000002"
         xmpG:yellow="100.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 Y=95 K=30"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="90.000004"
         xmpG:magenta="30.000001"
         xmpG:yellow="94.999999"
         xmpG:black="30.000001"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="0.000000"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 Y=45 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000001"
         xmpG:magenta="10.000002"
         xmpG:yellow="44.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="69.999999"
         xmpG:magenta="14.999998"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="84.999996"
         xmpG:magenta="50.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="94.999999"
         xmpG:yellow="5.000001"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 Y=25 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="100.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="25.000000"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="75.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 Y=0 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="100.000000"
         xmpG:yellow="0.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 Y=35 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="35.000002"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 Y=50 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="10.000002"
         xmpG:magenta="100.000000"
         xmpG:yellow="50.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 Y=20 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="94.999999"
         xmpG:yellow="19.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 Y=40 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="25.000000"
         xmpG:yellow="39.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 Y=50 K=5"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="44.999999"
         xmpG:yellow="50.000000"
         xmpG:black="5.000001"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 Y=60 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="50.000000"
         xmpG:yellow="60.000002"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 Y=65 K=40"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="55.000001"
         xmpG:magenta="60.000002"
         xmpG:yellow="64.999998"
         xmpG:black="39.999998"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 Y=65 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="25.000000"
         xmpG:magenta="39.999998"
         xmpG:yellow="64.999998"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 Y=75 K=10"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000001"
         xmpG:magenta="50.000000"
         xmpG:yellow="75.000000"
         xmpG:black="10.000002"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 Y=80 K=25"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="35.000002"
         xmpG:magenta="60.000002"
         xmpG:yellow="80.000001"
         xmpG:black="25.000000"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 Y=90 K=35"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="64.999998"
         xmpG:yellow="90.000004"
         xmpG:black="35.000002"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 Y=100 K=50"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="39.999998"
         xmpG:magenta="69.999999"
         xmpG:yellow="100.000000"
         xmpG:black="50.000000"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 Y=80 K=70"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="50.000000"
         xmpG:magenta="69.999999"
         xmpG:yellow="80.000001"
         xmpG:black="69.999999"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Färggrupp för utskrift"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=30 Y=70 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="0.000000"
         xmpG:magenta="30.000001"
         xmpG:yellow="69.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=70 Y=90 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="69.999999"
         xmpG:yellow="90.000004"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=5 M=90 Y=75 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="5.000001"
         xmpG:magenta="90.000004"
         xmpG:yellow="75.000000"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=0 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="94.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=5 Y=95 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000002"
         xmpG:magenta="5.000001"
         xmpG:yellow="94.999999"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=30 M=0 Y=10 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="30.000001"
         xmpG:magenta="0.000000"
         xmpG:yellow="10.000002"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=60 M=10 Y=5 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="60.000002"
         xmpG:magenta="10.000002"
         xmpG:yellow="5.000001"
         xmpG:black="0.000000"/>
        <rdf:li
         xmpG:swatchName="C=80 M=5 Y=10 K=0"
         xmpG:mode="CMYK"
         xmpG:type="PROCESS"
         xmpG:cyan="80.000001"
         xmpG:magenta="5.000001"
         xmpG:yellow="10.000002"
         xmpG:black="0.000000"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Gråskala"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="K=100"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="255"/>
        <rdf:li
         xmpG:swatchName="K=90"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="229"/>
        <rdf:li
         xmpG:swatchName="K=80"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="203"/>
        <rdf:li
         xmpG:swatchName="K=70"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="178"/>
        <rdf:li
         xmpG:swatchName="K=60"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="152"/>
        <rdf:li
         xmpG:swatchName="K=50"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="127"/>
        <rdf:li
         xmpG:swatchName="K=40"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="101"/>
        <rdf:li
         xmpG:swatchName="K=30"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="76"/>
        <rdf:li
         xmpG:swatchName="K=20"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="50"/>
        <rdf:li
         xmpG:swatchName="K=10"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="25"/>
        <rdf:li
         xmpG:swatchName="K=5"
         xmpG:mode="GRAY"
         xmpG:type="PROCESS"
         xmpG:gray="12"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -841.89 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 841.89 li
595.276 841.89 li
595.276 0 li
cp
clp
gsave
0 0 mo
595.276 0 li
595.276 841.89 li
0 841.89 li
cp
clp
546.843 416.499 mo
546.843 418.659 li
546.304 418.839 546.753 420.009 546.603 420.579 cv
546.603 422.738 li
546.282 422.818 546.404 423.339 546.363 423.699 cv
546.363 425.139 li
546.132 425.148 546.183 425.439 546.122 425.619 cv
546.122 426.818 li
545.894 426.829 545.943 427.119 545.882 427.299 cv
545.882 428.259 li
545.654 428.27 545.702 428.559 545.644 428.738 cv
545.644 429.699 li
545.443 429.659 545.423 429.799 545.404 429.939 cv
545.404 430.659 li
545.173 430.669 545.224 430.959 545.163 431.139 cv
545.163 431.859 li
544.962 431.818 544.943 431.959 544.923 432.1 cv
544.923 432.818 li
544.724 432.779 544.702 432.919 544.683 433.059 cv
544.683 433.779 li
544.484 433.738 544.462 433.879 544.443 434.02 cv
544.443 434.499 li
544.212 434.509 544.263 434.799 544.202 434.978 cv
544.202 435.459 li
544.003 435.419 543.984 435.559 543.962 435.699 cv
543.962 436.18 li
543.763 436.139 543.743 436.279 543.724 436.419 cv
543.724 436.898 li
543.523 436.859 543.503 436.999 543.484 437.139 cv
543.484 437.619 li
543.282 437.579 543.263 437.719 543.243 437.859 cv
543.243 438.339 li
543.042 438.299 543.023 438.439 543.003 438.579 cv
543.003 439.059 li
542.804 439.02 542.782 439.159 542.763 439.299 cv
542.763 439.539 li
542.564 439.499 542.542 439.639 542.523 439.779 cv
542.523 440.259 li
542.323 440.219 542.304 440.359 542.282 440.499 cv
542.282 440.738 li
542.083 440.699 542.064 440.839 542.042 440.978 cv
542.042 441.459 li
541.843 441.419 541.823 441.559 541.804 441.699 cv
541.804 441.939 li
541.603 441.898 541.583 442.039 541.564 442.18 cv
541.564 442.419 li
541.363 442.379 541.343 442.52 541.323 442.659 cv
541.323 443.139 li
541.093 443.148 541.144 443.439 541.083 443.619 cv
540.882 443.579 540.863 443.719 540.843 443.859 cv
540.843 444.1 li
540.644 444.059 540.622 444.199 540.603 444.339 cv
540.603 444.579 li
540.404 444.539 540.382 444.68 540.363 444.818 cv
540.363 445.059 li
540.163 445.02 540.144 445.159 540.122 445.299 cv
540.122 445.539 li
539.923 445.499 539.904 445.639 539.882 445.779 cv
539.763 445.969 539.632 446.169 539.644 446.499 cv
539.443 446.459 539.423 446.6 539.404 446.738 cv
539.202 446.699 539.183 446.839 539.163 446.978 cv
539.163 447.219 li
538.962 447.18 538.943 447.318 538.923 447.459 cv
538.923 447.699 li
538.724 447.659 538.702 447.799 538.683 447.939 cv
538.683 448.18 li
538.484 448.139 538.462 448.279 538.443 448.419 cv
538.243 448.379 538.224 448.52 538.202 448.659 cv
538.202 448.898 li
538.003 448.859 537.984 448.999 537.962 449.139 cv
537.962 449.379 li
537.763 449.339 537.743 449.478 537.724 449.619 cv
537.523 449.579 537.503 449.719 537.484 449.859 cv
537.443 450.059 537.243 450.1 537.243 450.339 cv
537.042 450.299 537.023 450.439 537.003 450.579 cv
536.962 450.779 536.763 450.818 536.763 451.059 cv
536.564 451.02 536.542 451.159 536.523 451.299 cv
536.484 451.499 536.282 451.539 536.282 451.779 cv
536.083 451.738 536.064 451.879 536.042 452.02 cv
536.042 452.259 li
535.843 452.219 535.823 452.359 535.804 452.499 cv
535.603 452.459 535.583 452.6 535.564 452.738 cv
535.363 452.699 535.343 452.839 535.323 452.978 cv
535.282 453.18 535.083 453.219 535.083 453.459 cv
534.882 453.419 534.863 453.559 534.843 453.699 cv
534.644 453.659 534.622 453.799 534.603 453.939 cv
534.603 454.18 li
534.394 454.289 534.173 454.389 534.122 454.659 cv
533.923 454.619 533.904 454.759 533.882 454.898 cv
533.683 454.859 533.663 454.999 533.644 455.139 cv
533.644 455.379 li
533.433 455.488 533.212 455.589 533.163 455.859 cv
532.962 455.818 532.943 455.959 532.923 456.1 cv
532.724 456.059 532.702 456.199 532.683 456.339 cv
532.484 456.299 532.462 456.439 532.443 456.579 cv
532.443 456.818 li
532.243 456.779 532.224 456.919 532.202 457.059 cv
531.782 457.279 531.462 457.6 531.243 458.02 cv
531.042 457.978 531.023 458.119 531.003 458.259 cv
530.804 458.219 530.782 458.359 530.763 458.499 cv
530.564 458.459 530.542 458.6 530.523 458.738 cv
530.323 458.699 530.304 458.839 530.282 458.978 cv
530.083 458.939 530.064 459.079 530.042 459.219 cv
529.843 459.18 529.823 459.318 529.804 459.459 cv
529.603 459.419 529.583 459.559 529.564 459.699 cv
529.363 459.659 529.343 459.799 529.323 459.939 cv
529.122 459.898 529.103 460.039 529.083 460.18 cv
528.882 460.139 528.863 460.279 528.843 460.419 cv
528.644 460.379 528.622 460.52 528.603 460.659 cv
528.183 460.879 527.863 461.199 527.644 461.619 cv
527.443 461.579 527.423 461.719 527.404 461.859 cv
527.163 461.859 li
526.962 461.818 526.943 461.959 526.923 462.1 cv
526.724 462.059 526.702 462.199 526.683 462.339 cv
526.484 462.299 526.462 462.439 526.443 462.579 cv
526.234 462.689 526.013 462.789 525.962 463.059 cv
525.724 463.059 li
525.523 463.02 525.503 463.159 525.484 463.299 cv
525.282 463.259 525.263 463.398 525.243 463.539 cv
525.042 463.499 525.023 463.639 525.003 463.779 cv
524.804 463.738 524.782 463.879 524.763 464.02 cv
524.523 464.02 li
524.323 463.978 524.304 464.119 524.282 464.259 cv
524.083 464.219 524.064 464.359 524.042 464.499 cv
523.833 464.609 523.613 464.709 523.564 464.978 cv
523.323 464.978 li
523.122 464.939 523.103 465.079 523.083 465.219 cv
522.894 465.27 522.843 465.459 522.603 465.459 cv
522.404 465.419 522.382 465.559 522.363 465.699 cv
522.173 465.749 522.122 465.939 521.882 465.939 cv
521.683 465.898 521.663 466.039 521.644 466.18 cv
521.443 466.139 521.423 466.279 521.404 466.419 cv
521.202 466.379 521.183 466.52 521.163 466.659 cv
520.923 466.659 li
520.724 466.619 520.702 466.759 520.683 466.898 cv
520.484 466.859 520.462 466.999 520.443 467.139 cv
520.202 467.139 li
520.003 467.1 519.984 467.238 519.962 467.379 cv
519.724 467.379 li
519.523 467.339 519.503 467.478 519.484 467.619 cv
519.282 467.579 519.263 467.719 519.243 467.859 cv
519.003 467.859 li
518.804 467.818 518.782 467.959 518.763 468.1 cv
518.523 468.1 li
518.323 468.059 518.304 468.199 518.282 468.339 cv
518.042 468.339 li
517.843 468.299 517.823 468.439 517.804 468.579 cv
517.603 468.539 517.583 468.68 517.564 468.818 cv
517.183 468.749 517.154 469.049 516.843 469.059 cv
516.644 469.02 516.622 469.159 516.603 469.299 cv
516.363 469.299 li
516.163 469.259 516.144 469.398 516.122 469.539 cv
515.882 469.539 li
515.683 469.499 515.663 469.639 515.644 469.779 cv
515.404 469.779 li
515.202 469.738 515.183 469.879 515.163 470.02 cv
514.923 470.02 li
514.724 469.978 514.702 470.119 514.683 470.259 cv
514.404 470.219 514.263 470.309 514.202 470.499 cv
513.724 470.499 li
513.523 470.459 513.503 470.599 513.484 470.739 cv
513.243 470.739 li
513.042 470.699 513.023 470.839 513.003 470.978 cv
512.763 470.978 li
512.564 470.939 512.542 471.079 512.523 471.219 cv
512.042 471.219 li
511.843 471.179 511.823 471.319 511.804 471.459 cv
511.564 471.459 li
511.363 471.419 511.343 471.559 511.323 471.699 cv
510.843 471.699 li
510.644 471.659 510.622 471.789 510.603 471.939 cv
510.363 471.939 li
510.163 471.899 510.144 472.039 510.122 472.179 cv
509.644 472.179 li
509.443 472.139 509.423 472.279 509.404 472.419 cv
508.923 472.419 li
508.724 472.379 508.702 472.519 508.683 472.659 cv
508.202 472.659 li
508.003 472.619 507.984 472.749 507.962 472.899 cv
507.484 472.899 li
507.282 472.859 507.263 472.999 507.243 473.139 cv
506.763 473.139 li
506.564 473.099 506.542 473.239 506.523 473.379 cv
506.042 473.379 li
505.843 473.339 505.823 473.478 505.804 473.619 cv
505.083 473.619 li
504.882 473.579 504.863 473.709 504.843 473.859 cv
504.363 473.859 li
504.163 473.819 504.144 473.959 504.122 474.099 cv
503.404 474.099 li
503.202 474.059 503.183 474.199 503.163 474.339 cv
502.443 474.339 li
502.243 474.299 502.224 474.439 502.202 474.579 cv
501.484 474.579 li
501.282 474.539 501.263 474.669 501.243 474.819 cv
500.523 474.819 li
500.243 474.779 500.103 474.879 500.042 475.059 cv
499.323 475.059 li
499.042 475.019 498.904 475.109 498.843 475.299 cv
498.122 475.299 li
497.843 475.259 497.702 475.349 497.644 475.539 cv
496.683 475.539 li
496.404 475.499 496.263 475.589 496.202 475.779 cv
495.243 475.779 li
494.962 475.739 494.823 475.839 494.763 476.019 cv
493.323 476.019 li
492.984 475.999 492.644 475.978 492.603 476.259 cv
491.163 476.259 li
490.782 476.279 490.253 476.149 490.202 476.499 cv
487.804 476.499 li
482.763 476.499 li
479.644 476.499 li
479.573 476.179 479.042 476.299 478.683 476.259 cv
477.003 476.259 li
476.962 475.978 476.573 476.059 476.282 476.019 cv
475.083 476.019 li
475.083 475.789 474.792 475.839 474.603 475.779 cv
473.644 475.779 li
473.644 475.549 473.353 475.599 473.163 475.539 cv
472.202 475.539 li
472.202 475.309 471.913 475.359 471.724 475.299 cv
471.003 475.299 li
471.054 475.099 470.913 475.079 470.763 475.059 cv
470.042 475.059 li
470.042 474.829 469.753 474.879 469.564 474.819 cv
468.843 474.819 li
468.894 474.619 468.753 474.599 468.603 474.579 cv
468.122 474.579 li
468.122 474.349 467.833 474.399 467.644 474.339 cv
467.163 474.339 li
467.212 474.139 467.073 474.119 466.923 474.099 cv
466.443 474.099 li
466.493 473.899 466.353 473.879 466.202 473.859 cv
465.724 473.859 li
465.773 473.659 465.632 473.639 465.484 473.619 cv
465.003 473.619 li
465.054 473.419 464.913 473.399 464.763 473.379 cv
464.282 473.379 li
464.333 473.179 464.193 473.159 464.042 473.139 cv
463.564 473.139 li
463.613 472.939 463.474 472.919 463.323 472.899 cv
462.843 472.899 li
462.894 472.699 462.753 472.669 462.603 472.659 cv
462.363 472.659 li
462.413 472.459 462.273 472.439 462.122 472.419 cv
461.644 472.419 li
461.644 472.189 461.353 472.239 461.163 472.179 cv
461.814 470.739 463.564 470.419 464.763 469.779 cv
468.753 467.669 472.753 465.119 476.042 462.339 cv
480.683 458.43 483.773 453.619 487.564 448.898 cv
487.904 448.919 488.243 448.939 488.282 448.659 cv
489.243 448.659 li
489.583 448.68 489.923 448.699 489.962 448.419 cv
490.683 448.419 li
490.962 448.459 491.113 448.369 491.163 448.18 cv
491.882 448.18 li
492.163 448.219 492.314 448.129 492.363 447.939 cv
493.083 447.939 li
493.292 447.988 493.314 447.85 493.323 447.699 cv
493.804 447.699 li
494.083 447.738 494.234 447.648 494.282 447.459 cv
494.763 447.459 li
494.974 447.509 494.993 447.369 495.003 447.219 cv
495.484 447.219 li
495.693 447.27 495.712 447.129 495.724 446.978 cv
496.202 446.978 li
496.413 447.029 496.433 446.889 496.443 446.738 cv
496.923 446.738 li
497.132 446.789 497.154 446.648 497.163 446.499 cv
497.644 446.499 li
497.853 446.549 497.872 446.409 497.882 446.259 cv
498.122 446.259 li
498.333 446.309 498.353 446.169 498.363 446.02 cv
498.843 446.02 li
499.054 446.068 499.073 445.93 499.083 445.779 cv
499.323 445.779 li
499.532 445.829 499.554 445.689 499.564 445.539 cv
499.804 445.539 li
500.013 445.589 500.032 445.449 500.042 445.299 cv
500.282 445.299 li
500.493 445.35 500.513 445.209 500.523 445.059 cv
500.763 445.059 li
500.974 445.109 500.993 444.969 501.003 444.818 cv
501.243 444.818 li
501.452 444.869 501.474 444.728 501.484 444.579 cv
501.693 444.629 501.712 444.488 501.724 444.339 cv
502.113 444.409 502.144 444.109 502.443 444.1 cv
502.654 444.148 502.673 444.009 502.683 443.859 cv
502.894 443.909 502.913 443.77 502.923 443.619 cv
503.163 443.619 li
503.372 443.669 503.394 443.529 503.404 443.379 cv
503.613 443.43 503.632 443.289 503.644 443.139 cv
503.882 443.139 li
504.093 443.189 504.113 443.049 504.122 442.898 cv
504.333 442.949 504.353 442.809 504.363 442.659 cv
504.603 442.659 li
504.814 442.709 504.833 442.568 504.843 442.419 cv
505.054 442.469 505.073 442.329 505.083 442.18 cv
505.292 442.228 505.314 442.089 505.323 441.939 cv
505.564 441.939 li
505.773 441.988 505.792 441.85 505.804 441.699 cv
506.013 441.749 506.032 441.609 506.042 441.459 cv
506.253 441.509 506.273 441.369 506.282 441.219 cv
507.263 440.439 508.144 439.559 508.923 438.579 cv
509.132 438.629 509.154 438.488 509.163 438.339 cv
509.372 438.389 509.394 438.249 509.404 438.1 cv
509.613 438.148 509.632 438.009 509.644 437.859 cv
509.693 437.669 509.882 437.619 509.882 437.379 cv
510.093 437.43 510.113 437.289 510.122 437.139 cv
510.333 437.189 510.353 437.049 510.363 436.898 cv
510.363 436.659 li
510.573 436.709 510.593 436.568 510.603 436.419 cv
510.814 436.469 510.833 436.329 510.843 436.18 cv
511.054 436.228 511.073 436.089 511.083 435.939 cv
511.083 435.699 li
511.292 435.749 511.314 435.609 511.323 435.459 cv
511.323 435.219 li
511.532 435.27 511.554 435.129 511.564 434.978 cv
511.773 435.029 511.792 434.889 511.804 434.738 cv
511.853 434.549 512.042 434.499 512.042 434.259 cv
512.253 434.309 512.273 434.169 512.282 434.02 cv
512.282 433.779 li
512.493 433.829 512.513 433.689 512.523 433.539 cv
512.523 433.299 li
512.734 433.35 512.753 433.209 512.763 433.059 cv
512.763 432.818 li
512.974 432.869 512.993 432.728 513.003 432.579 cv
513.003 432.339 li
513.212 432.389 513.234 432.249 513.243 432.1 cv
513.243 431.859 li
513.452 431.909 513.474 431.77 513.484 431.619 cv
513.484 431.379 li
513.693 431.43 513.712 431.289 513.724 431.139 cv
513.724 430.898 li
513.933 430.949 513.952 430.809 513.962 430.659 cv
513.962 430.18 li
514.173 430.228 514.193 430.089 514.202 429.939 cv
514.202 429.699 li
514.413 429.749 514.433 429.609 514.443 429.459 cv
514.443 428.978 li
514.654 429.029 514.673 428.889 514.683 428.738 cv
514.683 428.259 li
514.894 428.309 514.913 428.169 514.923 428.02 cv
514.923 427.539 li
515.132 427.589 515.154 427.449 515.163 427.299 cv
515.163 426.818 li
515.372 426.869 515.394 426.728 515.404 426.579 cv
515.404 426.1 li
515.644 426.1 515.593 425.809 515.644 425.619 cv
515.644 425.139 li
515.853 425.189 515.872 425.049 515.882 424.898 cv
515.882 424.18 li
516.122 424.18 516.073 423.889 516.122 423.699 cv
516.122 422.978 li
516.333 423.029 516.353 422.889 516.363 422.738 cv
516.363 421.779 li
516.603 421.779 516.554 421.488 516.603 421.299 cv
516.603 420.339 li
516.843 420.339 516.792 420.049 516.843 419.859 cv
516.843 418.659 li
517.122 418.619 517.054 418.219 517.083 417.939 cv
517.083 416.499 li
517.474 416.669 517.474 415.369 517.083 415.539 cv
517.083 414.1 li
517.103 413.759 517.122 413.419 516.843 413.379 cv
516.843 412.419 li
516.894 412.219 516.753 412.199 516.603 412.18 cv
516.603 411.219 li
516.654 411.02 516.513 410.999 516.363 410.978 cv
516.363 410.259 li
516.413 410.059 516.273 410.039 516.122 410.02 cv
516.122 409.299 li
516.173 409.1 516.032 409.079 515.882 409.059 cv
515.882 408.579 li
515.923 408.299 515.833 408.148 515.644 408.1 cv
515.644 407.619 li
515.693 407.419 515.554 407.398 515.404 407.379 cv
515.404 406.898 li
515.452 406.699 515.314 406.68 515.163 406.659 cv
515.163 406.18 li
515.212 405.978 515.073 405.959 514.923 405.939 cv
514.923 405.699 li
514.974 405.499 514.833 405.478 514.683 405.459 cv
514.683 404.978 li
514.734 404.779 514.593 404.759 514.443 404.738 cv
514.443 404.499 li
514.493 404.299 514.353 404.279 514.202 404.259 cv
514.202 404.02 li
514.253 403.818 514.113 403.799 513.962 403.779 cv
514.003 403.499 513.913 403.359 513.724 403.299 cv
513.763 403.02 513.673 402.879 513.484 402.818 cv
513.554 402.43 513.263 402.409 513.243 402.1 cv
513.292 401.898 513.154 401.879 513.003 401.859 cv
513.003 401.619 li
513.054 401.419 512.913 401.398 512.763 401.379 cv
512.763 401.139 li
512.814 400.939 512.673 400.919 512.523 400.898 cv
512.484 400.709 512.282 400.659 512.282 400.419 cv
512.333 400.219 512.193 400.199 512.042 400.18 cv
512.093 399.978 511.952 399.959 511.804 399.939 cv
511.804 399.699 li
511.853 399.499 511.712 399.478 511.564 399.459 cv
511.523 399.27 511.323 399.219 511.323 398.978 cv
511.372 398.779 511.234 398.759 511.083 398.738 cv
511.132 398.539 510.993 398.52 510.843 398.499 cv
510.894 398.299 510.753 398.279 510.603 398.259 cv
510.603 398.02 li
510.654 397.818 510.513 397.799 510.363 397.779 cv
510.413 397.579 510.273 397.559 510.122 397.539 cv
509.993 397.199 509.753 396.959 509.404 396.818 cv
509.452 396.619 509.314 396.6 509.163 396.579 cv
509.212 396.379 509.073 396.359 508.923 396.339 cv
508.974 396.139 508.833 396.119 508.683 396.1 cv
508.734 395.898 508.593 395.879 508.443 395.859 cv
508.493 395.659 508.353 395.639 508.202 395.619 cv
508.253 395.419 508.113 395.398 507.962 395.379 cv
508.013 395.18 507.872 395.159 507.724 395.139 cv
507.773 394.939 507.632 394.919 507.484 394.898 cv
507.353 394.559 507.113 394.318 506.763 394.18 cv
506.814 393.978 506.673 393.959 506.523 393.939 cv
506.573 393.738 506.433 393.719 506.282 393.699 cv
506.042 393.699 li
505.943 393.488 505.833 393.27 505.564 393.219 cv
505.613 393.02 505.474 392.999 505.323 392.978 cv
505.372 392.779 505.234 392.759 505.083 392.738 cv
504.894 392.699 504.843 392.499 504.603 392.499 cv
504.654 392.299 504.513 392.279 504.363 392.259 cv
504.173 392.219 504.122 392.02 503.882 392.02 cv
503.933 391.818 503.792 391.799 503.644 391.779 cv
503.404 391.779 li
503.452 391.579 503.314 391.559 503.163 391.539 cv
502.923 391.539 li
502.974 391.339 502.833 391.318 502.683 391.299 cv
502.734 391.1 502.593 391.079 502.443 391.059 cv
502.202 391.059 li
502.253 390.859 502.113 390.839 501.962 390.818 cv
501.724 390.818 li
501.773 390.619 501.632 390.6 501.484 390.579 cv
501.243 390.579 li
501.292 390.379 501.154 390.359 501.003 390.339 cv
500.763 390.339 li
500.814 390.139 500.673 390.119 500.523 390.1 cv
500.282 390.1 li
500.333 389.898 500.193 389.879 500.042 389.859 cv
499.804 389.859 li
499.853 389.659 499.712 389.639 499.564 389.619 cv
499.323 389.619 li
499.372 389.419 499.234 389.398 499.083 389.379 cv
498.603 389.379 li
498.654 389.18 498.513 389.159 498.363 389.139 cv
498.122 389.139 li
498.173 388.939 498.032 388.919 497.882 388.898 cv
497.404 388.898 li
497.452 388.699 497.314 388.68 497.163 388.659 cv
496.683 388.659 li
496.734 388.459 496.593 388.439 496.443 388.419 cv
495.962 388.419 li
496.013 388.219 495.872 388.199 495.724 388.18 cv
495.243 388.18 li
495.292 387.978 495.154 387.959 495.003 387.939 cv
494.523 387.939 li
494.523 387.709 494.234 387.759 494.042 387.699 cv
493.564 387.699 li
493.613 387.499 493.474 387.478 493.323 387.459 cv
492.603 387.459 li
492.603 387.228 492.314 387.279 492.122 387.219 cv
491.404 387.219 li
491.452 387.02 491.314 386.999 491.163 386.978 cv
490.202 386.978 li
490.202 386.749 489.913 386.799 489.724 386.738 cv
488.763 386.738 li
488.724 386.459 488.323 386.539 488.042 386.499 cv
487.804 386.499 li
481.833 378.109 474.103 370.689 465.003 365.859 cv
463.773 365.209 461.882 364.999 461.163 363.459 cv
461.443 363.499 461.593 363.409 461.644 363.219 cv
462.122 363.219 li
462.333 363.27 462.353 363.129 462.363 362.978 cv
462.603 362.978 li
462.814 363.029 462.833 362.889 462.843 362.738 cv
463.323 362.738 li
463.532 362.789 463.554 362.648 463.564 362.499 cv
464.042 362.499 li
464.253 362.549 464.273 362.409 464.282 362.259 cv
464.763 362.259 li
464.974 362.309 464.993 362.169 465.003 362.02 cv
465.484 362.02 li
465.693 362.068 465.712 361.93 465.724 361.779 cv
466.202 361.779 li
466.413 361.829 466.433 361.689 466.443 361.539 cv
466.923 361.539 li
467.132 361.589 467.154 361.449 467.163 361.299 cv
467.882 361.299 li
468.093 361.35 468.113 361.209 468.122 361.059 cv
468.843 361.059 li
469.054 361.109 469.073 360.969 469.083 360.818 cv
469.804 360.818 li
470.013 360.869 470.032 360.728 470.042 360.579 cv
470.763 360.579 li
470.974 360.629 470.993 360.488 471.003 360.339 cv
471.962 360.339 li
472.173 360.389 472.193 360.249 472.202 360.1 cv
473.163 360.1 li
473.443 360.139 473.593 360.049 473.644 359.859 cv
474.603 359.859 li
474.882 359.898 475.032 359.809 475.083 359.619 cv
476.042 359.619 li
476.382 359.639 476.724 359.659 476.763 359.379 cv
478.202 359.379 li
478.542 359.398 478.882 359.419 478.923 359.139 cv
480.843 359.139 li
481.263 358.999 482.253 359.43 482.282 358.898 cv
489.484 358.898 li
489.513 359.43 490.503 358.999 490.923 359.139 cv
492.843 359.139 li
492.882 359.419 493.282 359.339 493.564 359.379 cv
495.003 359.379 li
495.013 359.619 495.304 359.568 495.484 359.619 cv
496.443 359.619 li
496.484 359.898 496.882 359.818 497.163 359.859 cv
497.882 359.859 li
497.894 360.1 498.183 360.049 498.363 360.1 cv
499.083 360.1 li
499.093 360.339 499.382 360.289 499.564 360.339 cv
500.282 360.339 li
500.292 360.579 500.583 360.529 500.763 360.579 cv
501.484 360.579 li
501.443 360.789 501.583 360.809 501.724 360.818 cv
502.443 360.818 li
502.404 361.029 502.542 361.049 502.683 361.059 cv
503.163 361.059 li
503.173 361.299 503.462 361.249 503.644 361.299 cv
504.122 361.299 li
504.083 361.509 504.224 361.529 504.363 361.539 cv
504.843 361.539 li
504.804 361.749 504.943 361.77 505.083 361.779 cv
505.564 361.779 li
505.573 362.02 505.863 361.969 506.042 362.02 cv
506.282 362.02 li
506.292 362.259 506.583 362.209 506.763 362.259 cv
507.003 362.259 li
506.962 362.469 507.103 362.488 507.243 362.499 cv
507.724 362.499 li
507.683 362.709 507.823 362.728 507.962 362.738 cv
508.443 362.738 li
508.404 362.949 508.542 362.969 508.683 362.978 cv
509.163 362.978 li
509.173 363.219 509.462 363.169 509.644 363.219 cv
509.603 363.43 509.743 363.449 509.882 363.459 cv
510.363 363.459 li
510.372 363.699 510.663 363.648 510.843 363.699 cv
510.804 363.909 510.943 363.93 511.083 363.939 cv
511.323 363.939 li
511.282 364.148 511.423 364.169 511.564 364.18 cv
512.042 364.18 li
512.054 364.419 512.343 364.369 512.523 364.419 cv
512.484 364.629 512.622 364.648 512.763 364.659 cv
513.003 364.659 li
512.962 364.869 513.103 364.889 513.243 364.898 cv
513.484 364.898 li
513.443 365.109 513.583 365.129 513.724 365.139 cv
513.962 365.139 li
513.923 365.35 514.064 365.369 514.202 365.379 cv
514.443 365.379 li
514.404 365.589 514.542 365.609 514.683 365.619 cv
514.923 365.619 li
514.882 365.829 515.023 365.85 515.163 365.859 cv
515.404 365.859 li
515.363 366.068 515.503 366.089 515.644 366.1 cv
515.882 366.1 li
515.843 366.309 515.984 366.329 516.122 366.339 cv
516.323 366.469 516.513 366.589 516.843 366.579 cv
516.804 366.789 516.943 366.809 517.083 366.818 cv
517.042 367.029 517.183 367.049 517.323 367.059 cv
517.564 367.059 li
517.523 367.27 517.663 367.289 517.804 367.299 cv
518.042 367.299 li
518.003 367.509 518.144 367.529 518.282 367.539 cv
518.523 367.539 li
518.484 367.749 518.622 367.77 518.763 367.779 cv
518.724 367.988 518.863 368.009 519.003 368.02 cv
519.243 368.02 li
519.202 368.228 519.343 368.249 519.484 368.259 cv
519.724 368.259 li
519.683 368.469 519.823 368.488 519.962 368.499 cv
519.923 368.709 520.064 368.728 520.202 368.738 cv
520.404 368.789 520.443 368.978 520.683 368.978 cv
520.644 369.189 520.782 369.209 520.923 369.219 cv
521.163 369.219 li
521.122 369.43 521.263 369.449 521.404 369.459 cv
521.363 369.669 521.503 369.689 521.644 369.699 cv
521.882 369.699 li
521.843 369.909 521.984 369.93 522.122 369.939 cv
522.083 370.148 522.224 370.169 522.363 370.18 cv
522.564 370.228 522.603 370.419 522.843 370.419 cv
522.804 370.629 522.943 370.648 523.083 370.659 cv
523.282 370.709 523.323 370.898 523.564 370.898 cv
523.523 371.109 523.663 371.129 523.804 371.139 cv
524.042 371.139 li
524.154 371.359 524.253 371.568 524.523 371.619 cv
524.484 371.829 524.622 371.85 524.763 371.859 cv
525.003 371.859 li
525.113 372.079 525.212 372.289 525.484 372.339 cv
525.443 372.549 525.583 372.568 525.724 372.579 cv
525.683 372.789 525.823 372.809 525.962 372.818 cv
526.202 372.818 li
526.314 373.039 526.413 373.249 526.683 373.299 cv
526.644 373.509 526.782 373.529 526.923 373.539 cv
526.882 373.749 527.023 373.77 527.163 373.779 cv
527.122 373.988 527.263 374.009 527.404 374.02 cv
527.644 374.02 li
527.782 374.369 528.023 374.609 528.363 374.738 cv
528.323 374.949 528.462 374.969 528.603 374.978 cv
528.564 375.189 528.702 375.209 528.843 375.219 cv
528.804 375.43 528.943 375.449 529.083 375.459 cv
529.042 375.669 529.183 375.689 529.323 375.699 cv
529.282 375.909 529.423 375.93 529.564 375.939 cv
529.523 376.148 529.663 376.169 529.804 376.18 cv
530.042 376.18 li
530.003 376.389 530.144 376.409 530.282 376.419 cv
530.243 376.629 530.382 376.648 530.523 376.659 cv
530.484 376.869 530.622 376.889 530.763 376.898 cv
530.724 377.109 530.863 377.129 531.003 377.139 cv
530.962 377.35 531.103 377.369 531.243 377.379 cv
531.202 377.589 531.343 377.609 531.484 377.619 cv
531.484 377.859 li
531.443 378.068 531.583 378.089 531.724 378.1 cv
531.683 378.309 531.823 378.329 531.962 378.339 cv
531.923 378.549 532.064 378.568 532.202 378.579 cv
532.163 378.789 532.304 378.809 532.443 378.818 cv
532.404 379.029 532.542 379.049 532.683 379.059 cv
532.904 379.478 533.224 379.809 533.644 380.02 cv
533.644 380.259 li
533.603 380.469 533.743 380.488 533.882 380.499 cv
533.843 380.709 533.984 380.728 534.122 380.738 cv
534.083 380.949 534.224 380.969 534.363 380.978 cv
534.474 381.199 534.573 381.409 534.843 381.459 cv
534.843 381.699 li
534.804 381.909 534.943 381.93 535.083 381.939 cv
535.042 382.148 535.183 382.169 535.323 382.18 cv
535.282 382.389 535.423 382.409 535.564 382.419 cv
535.564 382.659 li
535.523 382.869 535.663 382.889 535.804 382.898 cv
535.763 383.109 535.904 383.129 536.042 383.139 cv
536.003 383.35 536.144 383.369 536.282 383.379 cv
536.282 383.619 li
536.243 383.829 536.382 383.85 536.523 383.859 cv
536.573 384.059 536.763 384.1 536.763 384.339 cv
536.724 384.549 536.863 384.568 537.003 384.579 cv
536.962 384.789 537.103 384.809 537.243 384.818 cv
537.202 385.029 537.343 385.049 537.484 385.059 cv
537.484 385.299 li
537.443 385.509 537.583 385.529 537.724 385.539 cv
537.683 385.749 537.823 385.77 537.962 385.779 cv
537.962 386.02 li
537.923 386.228 538.064 386.249 538.202 386.259 cv
538.202 386.499 li
538.163 386.709 538.304 386.728 538.443 386.738 cv
538.493 386.939 538.683 386.978 538.683 387.219 cv
538.644 387.43 538.782 387.449 538.923 387.459 cv
538.923 387.699 li
538.882 387.909 539.023 387.93 539.163 387.939 cv
539.212 388.139 539.404 388.18 539.404 388.419 cv
539.363 388.629 539.503 388.648 539.644 388.659 cv
539.644 388.898 li
539.603 389.109 539.743 389.129 539.882 389.139 cv
539.882 389.379 li
539.843 389.589 539.984 389.609 540.122 389.619 cv
540.083 389.829 540.224 389.85 540.363 389.859 cv
540.323 390.139 540.423 390.289 540.603 390.339 cv
540.564 390.619 540.663 390.77 540.843 390.818 cv
540.804 391.1 540.904 391.249 541.083 391.299 cv
541.042 391.579 541.144 391.728 541.323 391.779 cv
541.282 392.059 541.382 392.209 541.564 392.259 cv
541.564 392.738 li
541.523 392.949 541.663 392.969 541.804 392.978 cv
541.804 393.219 li
541.763 393.43 541.904 393.449 542.042 393.459 cv
542.042 393.699 li
542.003 393.909 542.144 393.93 542.282 393.939 cv
542.243 394.219 542.343 394.369 542.523 394.419 cv
542.523 394.898 li
542.484 395.109 542.622 395.129 542.763 395.139 cv
542.763 395.379 li
542.724 395.589 542.863 395.609 543.003 395.619 cv
543.003 396.1 li
542.962 396.309 543.103 396.329 543.243 396.339 cv
543.243 396.818 li
543.202 397.029 543.343 397.049 543.484 397.059 cv
543.484 397.539 li
543.443 397.749 543.583 397.77 543.724 397.779 cv
543.724 398.02 li
543.683 398.299 543.782 398.449 543.962 398.499 cv
543.962 398.978 li
543.923 399.189 544.064 399.209 544.202 399.219 cv
544.202 399.699 li
544.163 399.909 544.304 399.93 544.443 399.939 cv
544.443 400.419 li
544.404 400.629 544.542 400.648 544.683 400.659 cv
544.683 401.379 li
544.644 401.589 544.782 401.609 544.923 401.619 cv
544.923 402.339 li
544.882 402.549 545.023 402.568 545.163 402.579 cv
545.163 403.299 li
545.122 403.509 545.263 403.529 545.404 403.539 cv
545.404 404.259 li
545.363 404.539 545.462 404.689 545.644 404.738 cv
545.644 405.459 li
545.603 405.738 545.702 405.889 545.882 405.939 cv
545.882 406.898 li
545.843 407.18 545.943 407.329 546.122 407.379 cv
546.122 408.579 li
546.083 408.859 546.183 409.009 546.363 409.059 cv
546.363 410.499 li
546.382 410.879 546.253 411.419 546.603 411.459 cv
546.603 414.1 li
546.753 414.829 546.304 416.169 546.843 416.499 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.965 .992 .412 .624 cmyk
f
475.102 446.808 mo
478.483 448.468 482.872 449.119 488.063 448.968 cv
484.272 453.689 481.182 458.499 476.541 462.409 cv
473.252 465.189 469.252 467.739 465.262 469.849 cv
464.063 470.489 462.313 470.809 461.663 472.248 cv
461.422 472.248 li
461.143 471.269 459.852 472.088 459.502 472.489 cv
458.913 472.458 458.512 472.619 458.303 472.969 cv
446.192 477.599 425.942 477.179 413.422 473.208 cv
412.862 472.809 412.131 472.579 411.262 472.489 cv
410.243 471.838 409.041 471.359 407.663 471.048 cv
406.682 470.359 405.563 469.798 404.303 469.369 cv
404.303 469.138 404.012 469.189 403.823 469.128 cv
403.663 468.659 403.182 468.489 402.622 468.409 cv
402.522 468.119 402.323 467.919 401.903 467.929 cv
401.803 467.638 401.602 467.439 401.182 467.449 cv
400.973 467.099 400.823 466.689 400.223 466.729 cv
395.672 438.409 391.961 407.949 388.461 379.369 cv
389.563 378.149 390.772 377.038 391.823 375.769 cv
392.032 375.819 392.053 375.679 392.063 375.529 cv
392.272 375.579 392.291 375.439 392.303 375.288 cv
392.512 375.339 392.532 375.199 392.541 375.048 cv
392.752 375.099 392.772 374.958 392.782 374.808 cv
393.672 374.649 393.983 373.929 394.461 373.369 cv
395.172 373.359 395.352 372.819 395.663 372.409 cv
395.872 372.458 395.893 372.319 395.903 372.169 cv
396.502 372.208 396.653 371.798 396.862 371.449 cv
397.612 371.239 398.192 370.859 398.541 370.249 cv
398.952 370.259 399.163 370.069 399.262 369.769 cv
399.672 369.779 399.881 369.589 399.983 369.288 cv
400.842 369.109 401.442 368.669 401.903 368.089 cv
402.602 367.909 403.282 367.708 403.582 367.128 cv
403.862 367.169 404.012 367.079 404.063 366.888 cv
405.483 366.388 406.762 365.749 407.903 364.968 cv
408.182 365.009 408.332 364.919 408.381 364.729 cv
409.192 364.739 409.653 364.399 410.063 364.009 cv
410.663 364.048 411.063 363.888 411.262 363.529 cv
412.073 363.458 412.782 363.279 413.182 362.808 cv
425.803 357.739 446.602 357.979 459.022 363.048 cv
459.233 363.409 459.631 363.569 460.223 363.529 cv
460.493 364.058 461.153 364.058 461.422 363.529 cv
461.663 363.529 li
462.381 365.069 464.272 365.279 465.502 365.929 cv
474.602 370.759 482.332 378.179 488.303 386.569 cv
482.961 386.429 478.332 386.999 474.862 388.729 cv
474.063 388.729 473.592 389.058 473.182 389.449 cv
472.282 389.509 471.643 389.829 471.262 390.409 cv
470.983 390.369 470.842 390.468 470.782 390.649 cv
470.223 390.729 469.752 390.899 469.582 391.369 cv
469.172 391.359 468.961 391.548 468.862 391.849 cv
468.452 391.839 468.243 392.029 468.143 392.329 cv
467.541 392.288 467.393 392.699 467.182 393.048 cv
466.582 393.009 466.432 393.419 466.223 393.769 cv
466.022 393.729 466.002 393.869 465.983 394.009 cv
465.102 394.169 464.791 394.899 464.303 395.449 cv
464.102 395.409 464.082 395.548 464.063 395.689 cv
463.862 395.649 463.842 395.788 463.823 395.929 cv
463.622 395.888 463.602 396.029 463.582 396.169 cv
463.063 396.128 462.823 396.369 462.862 396.888 cv
462.663 396.849 462.643 396.989 462.622 397.128 cv
462.422 397.089 462.403 397.229 462.381 397.369 cv
462.182 397.329 462.163 397.468 462.143 397.609 cv
461.942 397.569 461.922 397.708 461.903 397.849 cv
461.422 398.249 460.791 398.499 460.702 399.288 cv
460.461 399.288 li
454.961 391.989 446.053 385.548 433.102 387.288 cv
433.022 387.269 432.932 387.249 432.852 387.229 cv
432.772 386.989 432.002 386.929 431.631 387.079 cv
427.922 386.939 422.663 389.138 419.903 390.649 cv
419.211 390.839 418.522 391.029 418.223 391.609 cv
417.663 391.689 417.192 391.859 417.022 392.329 cv
416.612 392.319 416.403 392.509 416.303 392.808 cv
415.702 392.769 415.553 393.179 415.342 393.529 cv
414.643 393.548 414.452 394.079 414.143 394.489 cv
413.942 394.449 413.922 394.589 413.903 394.729 cv
413.702 394.689 413.682 394.829 413.663 394.968 cv
412.813 395.239 412.252 395.788 411.983 396.649 cv
411.782 396.609 411.762 396.749 411.743 396.888 cv
411.541 396.849 411.522 396.989 411.502 397.128 cv
411.092 397.439 410.563 397.628 410.541 398.329 cv
410.192 398.538 409.782 398.689 409.823 399.288 cv
409.532 399.399 409.332 399.599 409.342 400.009 cv
409.053 400.119 408.852 400.319 408.862 400.729 cv
407.702 402.288 406.743 404.048 406.223 406.249 cv
405.012 408.718 404.372 411.759 404.063 415.128 cv
403.672 415.239 403.672 416.949 404.063 417.048 cv
404.672 424.038 406.282 430.029 409.342 434.569 cv
409.592 435.529 410.073 436.249 410.782 436.729 cv
410.743 437.329 411.153 437.479 411.502 437.689 cv
411.522 438.399 412.053 438.579 412.461 438.888 cv
412.422 439.099 412.563 439.119 412.702 439.128 cv
412.663 439.339 412.803 439.359 412.942 439.369 cv
412.903 439.579 413.041 439.599 413.182 439.609 cv
413.143 440.138 413.381 440.378 413.903 440.329 cv
413.862 440.538 414.002 440.558 414.143 440.569 cv
414.102 440.779 414.243 440.798 414.381 440.808 cv
414.342 441.019 414.483 441.038 414.622 441.048 cv
414.932 441.458 415.122 441.999 415.823 442.009 cv
415.782 442.218 415.922 442.239 416.063 442.249 cv
416.791 443.128 417.752 443.769 418.942 444.169 cv
419.961 445.079 421.243 445.718 422.782 446.089 cv
423.192 446.558 423.903 446.739 424.702 446.808 cv
424.743 447.089 425.143 447.009 425.422 447.048 cv
426.913 447.729 430.153 448.638 432.143 448.729 cv
432.582 448.749 433.702 449.239 433.582 448.249 cv
446.452 449.749 455.403 443.199 460.461 435.288 cv
460.893 435.509 460.862 436.179 461.422 436.249 cv
461.512 437.048 462.143 437.288 462.622 437.689 cv
462.582 437.899 462.723 437.919 462.862 437.929 cv
463.762 439.429 464.961 440.628 466.461 441.529 cv
466.422 441.739 466.563 441.759 466.702 441.769 cv
467.012 442.179 467.202 442.718 467.903 442.729 cv
468.112 443.079 468.262 443.489 468.862 443.449 cv
468.973 443.749 469.172 443.939 469.582 443.929 cv
469.692 444.229 469.893 444.419 470.303 444.409 cv
470.473 444.888 470.942 445.048 471.502 445.128 cv
471.512 445.359 471.803 445.319 471.983 445.369 cv
472.202 445.869 472.692 446.099 473.422 446.089 cv
473.432 446.319 473.723 446.279 473.903 446.329 cv
474.112 446.689 474.512 446.849 475.102 446.808 cv
.973 .831 .024 0 cmyk
f
460.529 435.017 mo
460.529 435.257 li
455.47 443.167 446.519 449.718 433.65 448.218 cv
433.699 448.017 433.56 447.997 433.41 447.978 cv
433.41 447.738 li
433.461 447.538 433.32 447.517 433.17 447.497 cv
433.22 447.297 433.08 447.277 432.929 447.257 cv
432.929 447.017 li
432.98 446.818 432.84 446.797 432.689 446.777 cv
432.689 446.538 li
432.74 446.337 432.599 446.318 432.449 446.297 cv
432.5 446.097 432.359 446.078 432.211 446.058 cv
432.211 445.818 li
432.259 445.618 432.121 445.597 431.97 445.578 cv
431.97 445.337 li
432.019 445.138 431.881 445.118 431.73 445.097 cv
431.73 444.857 li
431.779 444.658 431.64 444.638 431.49 444.618 cv
431.49 444.377 li
431.541 444.177 431.4 444.158 431.25 444.138 cv
431.25 443.898 li
431.3 443.698 431.16 443.677 431.009 443.658 cv
431.009 443.417 li
431.06 443.218 430.92 443.198 430.769 443.177 cv
430.769 442.937 li
430.82 442.738 430.679 442.718 430.529 442.698 cv
430.57 442.417 430.48 442.267 430.291 442.218 cv
430.291 441.738 li
430.34 441.538 430.199 441.517 430.05 441.497 cv
430.05 441.257 li
430.099 441.058 429.961 441.038 429.81 441.017 cv
429.81 440.538 li
429.859 440.337 429.72 440.318 429.57 440.297 cv
429.57 440.058 li
429.621 439.857 429.48 439.837 429.33 439.818 cv
429.33 439.337 li
429.381 439.138 429.24 439.118 429.09 439.097 cv
429.09 438.618 li
429.14 438.417 429 438.398 428.849 438.377 cv
428.849 437.898 li
428.9 437.698 428.759 437.677 428.609 437.658 cv
428.609 437.177 li
428.66 436.978 428.519 436.957 428.371 436.937 cv
428.371 436.218 li
428.42 436.017 428.279 435.997 428.131 435.978 cv
428.131 435.497 li
428.179 435.297 428.041 435.277 427.89 435.257 cv
427.89 434.538 li
427.939 434.337 427.8 434.318 427.65 434.297 cv
427.65 433.578 li
427.699 433.377 427.56 433.357 427.41 433.337 cv
427.41 432.618 li
427.449 432.337 427.359 432.187 427.17 432.138 cv
427.17 431.417 li
427.22 431.218 427.08 431.198 426.929 431.177 cv
426.929 430.218 li
426.97 429.937 426.881 429.788 426.689 429.738 cv
426.689 429.017 li
426.73 428.738 426.64 428.587 426.449 428.538 cv
426.449 427.337 li
426.49 427.058 426.4 426.917 426.211 426.857 cv
426.211 425.658 li
426.23 425.318 426.25 424.978 425.97 424.937 cv
425.97 423.257 li
425.949 422.877 426.09 422.347 425.73 422.297 cv
425.73 419.898 li
425.73 412.698 li
425.73 410.297 li
426.06 410.228 425.929 409.698 425.97 409.337 cv
425.97 407.898 li
426.25 407.857 426.179 407.457 426.211 407.177 cv
426.211 405.978 li
426.449 405.978 426.4 405.687 426.449 405.497 cv
426.449 404.538 li
426.689 404.538 426.64 404.247 426.689 404.058 cv
426.689 403.097 li
426.9 403.148 426.92 403.007 426.929 402.857 cv
426.929 401.898 li
427.14 401.948 427.16 401.808 427.17 401.658 cv
427.17 400.937 li
427.381 400.988 427.4 400.847 427.41 400.698 cv
427.41 399.978 li
427.621 400.027 427.64 399.888 427.65 399.738 cv
427.65 399.017 li
427.859 399.068 427.881 398.927 427.89 398.777 cv
427.89 398.297 li
428.131 398.297 428.08 398.007 428.131 397.818 cv
428.131 397.337 li
428.34 397.388 428.359 397.247 428.371 397.097 cv
428.371 396.618 li
428.58 396.667 428.599 396.527 428.609 396.377 cv
428.609 395.898 li
428.82 395.948 428.84 395.808 428.849 395.658 cv
428.849 395.417 li
429.06 395.468 429.08 395.328 429.09 395.177 cv
429.09 394.698 li
429.3 394.747 429.32 394.607 429.33 394.457 cv
429.33 394.218 li
429.541 394.267 429.56 394.127 429.57 393.978 cv
429.57 393.497 li
429.779 393.547 429.8 393.408 429.81 393.257 cv
429.81 393.017 li
430.019 393.068 430.041 392.927 430.05 392.777 cv
430.05 392.538 li
430.259 392.587 430.279 392.448 430.291 392.297 cv
430.291 392.058 li
430.5 392.107 430.519 391.968 430.529 391.818 cv
430.529 391.578 li
430.74 391.627 430.759 391.488 430.769 391.337 cv
430.769 391.097 li
430.98 391.148 431 391.007 431.009 390.857 cv
431.009 390.618 li
431.22 390.667 431.24 390.527 431.25 390.377 cv
431.25 390.138 li
431.461 390.187 431.48 390.047 431.49 389.898 cv
431.49 389.658 li
431.699 389.707 431.72 389.568 431.73 389.417 cv
431.939 389.468 431.961 389.328 431.97 389.177 cv
431.97 388.937 li
432.179 388.988 432.199 388.847 432.211 388.698 cv
432.42 388.747 432.439 388.607 432.449 388.457 cv
432.449 388.218 li
432.66 388.267 432.679 388.127 432.689 387.978 cv
432.9 388.027 432.92 387.888 432.929 387.738 cv
432.929 387.497 433.131 387.457 433.17 387.257 cv
446.121 385.517 455.029 391.957 460.529 399.257 cv
460.529 399.497 li
460.33 399.457 460.31 399.597 460.291 399.738 cv
460.09 399.698 460.07 399.837 460.05 399.978 cv
459.849 399.937 459.83 400.078 459.81 400.218 cv
459.769 400.417 459.57 400.457 459.57 400.698 cv
459.371 400.658 459.349 400.797 459.33 400.937 cv
459.33 401.177 li
459.131 401.138 459.109 401.277 459.09 401.417 cv
458.89 401.377 458.871 401.517 458.849 401.658 cv
458.73 401.847 458.599 402.047 458.609 402.377 cv
458.41 402.337 458.39 402.478 458.371 402.618 cv
458.17 402.578 458.15 402.718 458.131 402.857 cv
458.131 403.097 li
457.929 403.058 457.91 403.198 457.89 403.337 cv
457.89 403.578 li
457.689 403.538 457.67 403.677 457.65 403.818 cv
457.65 404.297 li
457.42 404.308 457.47 404.597 457.41 404.777 cv
457.211 404.738 457.189 404.877 457.17 405.017 cv
457.17 405.497 li
456.97 405.457 456.949 405.597 456.929 405.738 cv
456.929 405.978 li
456.699 405.988 456.75 406.277 456.689 406.457 cv
456.689 406.937 li
456.49 406.898 456.47 407.038 456.449 407.177 cv
456.449 407.658 li
456.22 407.667 456.269 407.957 456.211 408.138 cv
456.211 408.618 li
455.98 408.627 456.029 408.917 455.97 409.097 cv
455.97 409.818 li
455.74 409.828 455.791 410.118 455.73 410.297 cv
455.73 411.497 li
455.5 411.507 455.55 411.797 455.49 411.978 cv
455.49 413.658 li
454.949 413.837 455.4 415.007 455.25 415.578 cv
455.25 417.497 li
455.4 418.078 454.949 419.238 455.49 419.417 cv
455.49 421.097 li
455.47 421.437 455.449 421.777 455.73 421.818 cv
455.73 422.777 li
455.689 423.058 455.791 423.207 455.97 423.257 cv
455.97 424.218 li
455.929 424.427 456.07 424.448 456.211 424.457 cv
456.211 425.177 li
456.17 425.457 456.269 425.607 456.449 425.658 cv
456.449 426.138 li
456.41 426.417 456.509 426.568 456.689 426.618 cv
456.689 427.097 li
456.65 427.308 456.791 427.328 456.929 427.337 cv
456.929 427.818 li
456.89 428.097 456.99 428.247 457.17 428.297 cv
457.17 428.538 li
457.131 428.747 457.269 428.767 457.41 428.777 cv
457.41 429.257 li
457.371 429.468 457.509 429.488 457.65 429.497 cv
457.65 429.978 li
457.609 430.187 457.75 430.207 457.89 430.218 cv
457.89 430.457 li
457.849 430.667 457.99 430.687 458.131 430.698 cv
458.131 430.937 li
458.09 431.148 458.23 431.167 458.371 431.177 cv
458.33 431.457 458.429 431.607 458.609 431.658 cv
458.57 431.937 458.67 432.087 458.849 432.138 cv
458.791 432.527 459.08 432.558 459.09 432.857 cv
459.05 433.068 459.189 433.087 459.33 433.097 cv
459.33 433.337 li
459.291 433.547 459.429 433.568 459.57 433.578 cv
459.529 433.788 459.67 433.808 459.81 433.818 cv
459.81 434.058 li
459.769 434.267 459.91 434.288 460.05 434.297 cv
460.099 434.497 460.291 434.538 460.291 434.777 cv
460.25 434.988 460.39 435.007 460.529 435.017 cv
.965 .992 .412 .624 cmyk
f
400.429 468.209 mo
399.109 470.129 400.818 473.08 400.667 475.41 cv
391.548 475.969 381.388 475.49 371.868 475.648 cv
369.568 454.35 367.759 432.57 365.628 411.089 cv
364.288 411.429 364.138 412.959 363.708 414.209 cv
362.868 415.449 362.208 416.869 361.788 418.529 cv
358.648 424.99 355.779 431.719 353.149 438.689 cv
352.549 439.449 352.158 440.42 351.95 441.57 cv
351.35 442.33 350.959 443.299 350.748 444.449 cv
350.399 444.66 350.239 445.059 350.27 445.65 cv
349.668 446.41 349.28 447.379 349.069 448.529 cv
348.289 449.67 347.78 451.08 347.389 452.609 cv
347.039 452.82 346.879 453.219 346.908 453.809 cv
346.129 454.949 345.619 456.359 345.229 457.889 cv
344.879 458.1 344.719 458.5 344.748 459.09 cv
343.969 460.23 343.459 461.639 343.069 463.17 cv
342.719 463.379 342.559 463.779 342.588 464.369 cv
341.809 465.51 341.299 466.92 340.908 468.449 cv
339.959 469.98 339.299 471.799 338.748 473.729 cv
338.399 473.939 338.239 474.34 338.27 474.93 cv
338.039 474.939 338.088 475.229 338.03 475.41 cv
326.748 475.41 li
326.408 474.799 326.349 473.889 325.788 473.49 cv
325.578 472.34 325.199 471.359 324.588 470.609 cv
324.208 469.08 323.699 467.67 322.908 466.529 cv
322.699 465.379 322.319 464.41 321.708 463.65 cv
321.328 462.119 320.819 460.709 320.029 459.57 cv
319.439 457.439 318.639 455.52 317.628 453.809 cv
317.248 452.279 316.739 450.869 315.949 449.73 cv
315.739 448.58 315.359 447.609 314.748 446.85 cv
314.538 445.699 314.158 444.73 313.549 443.969 cv
313.349 442.82 312.959 441.84 312.348 441.09 cv
312.149 439.939 311.758 438.969 311.149 438.209 cv
311.158 437.41 310.819 436.939 310.428 436.529 cv
310.229 435.379 309.838 434.41 309.229 433.65 cv
308.639 431.52 307.838 429.6 306.828 427.889 cv
306.838 427.09 306.498 426.619 306.109 426.209 cv
305.519 424.08 304.719 422.16 303.709 420.449 cv
303.279 418.719 302.618 417.219 301.789 415.889 cv
301.289 413.99 300.569 412.32 299.629 410.849 cv
298.269 412.699 298.479 415.619 298.189 418.289 cv
296.229 436.27 294.399 456.24 292.908 474.93 cv
292.668 474.93 li
285.418 455.939 278.019 437.109 271.309 417.57 cv
271.309 417.33 li
274.399 399.609 276.109 380.529 278.989 362.609 cv
292.908 362.609 li
294.828 362.609 296.838 362.48 298.809 362.369 cv
305.158 362.369 li
305.739 362.419 306.299 362.5 306.828 362.609 cv
307.519 362.759 307.629 362.73 308.029 363.33 cv
307.998 363.929 308.158 364.33 308.508 364.529 cv
308.899 366.07 309.408 367.469 310.189 368.609 cv
310.158 369.209 310.319 369.609 310.668 369.809 cv
311.389 372.139 312.199 374.359 313.309 376.289 cv
313.279 376.889 313.439 377.289 313.788 377.49 cv
313.759 378.089 313.918 378.49 314.269 378.689 cv
314.239 379.289 314.399 379.689 314.748 379.889 cv
316.588 385.009 318.509 390.049 320.748 394.769 cv
320.719 395.369 320.878 395.769 321.229 395.969 cv
321.199 396.57 321.359 396.969 321.708 397.169 cv
321.679 397.769 321.838 398.169 322.189 398.369 cv
322.158 398.969 322.319 399.369 322.668 399.57 cv
322.639 400.169 322.799 400.57 323.149 400.769 cv
325.779 408.299 328.819 415.419 331.788 422.609 cv
332.469 422.57 332.819 422.189 332.748 421.41 cv
334.168 418.83 335.368 416.029 336.349 413.009 cv
337.36 411.299 338.158 409.379 338.748 407.25 cv
339.11 407.049 339.27 406.65 339.229 406.049 cv
340.02 404.91 340.53 403.509 340.908 401.969 cv
341.27 401.769 341.43 401.369 341.389 400.769 cv
341.748 400.57 341.908 400.169 341.869 399.57 cv
342.229 399.369 342.389 398.969 342.35 398.369 cv
342.709 398.169 342.869 397.769 342.828 397.169 cv
343.19 396.969 343.35 396.57 343.309 395.969 cv
343.668 395.769 343.828 395.369 343.789 394.769 cv
344.149 394.57 344.309 394.169 344.27 393.57 cv
344.629 393.369 344.789 392.969 344.748 392.369 cv
345.11 392.169 345.27 391.769 345.229 391.169 cv
345.588 390.969 345.748 390.57 345.709 389.969 cv
346.76 387.9 347.709 385.73 348.35 383.25 cv
348.709 383.049 348.869 382.65 348.828 382.049 cv
349.19 381.849 349.35 381.449 349.309 380.849 cv
349.668 380.65 349.828 380.25 349.789 379.65 cv
351.158 376.779 352.43 373.809 353.389 370.529 cv
353.748 370.33 353.908 369.929 353.869 369.33 cv
354.988 367.41 355.798 365.179 356.509 362.849 cv
365.718 362.449 376.587 362.449 385.788 362.849 cv
386.488 368.869 387.189 374.9 388.189 380.609 cv
388.429 380.609 388.478 380.809 388.667 380.849 cv
392.167 409.429 395.878 439.889 400.429 468.209 cv
.839 .463 0 0 cmyk
f
292.738 474.652 mo
292.738 475.132 li
282.658 475.482 271.869 475.463 261.779 475.132 cv
259.988 470.612 258.578 465.703 256.498 461.453 cv
256.069 459.402 255.288 457.713 254.578 455.932 cv
241.339 455.422 227.178 455.822 213.538 455.692 cv
211.718 458.591 210.668 462.252 209.458 465.772 cv
208.808 466.802 208.328 468.002 208.018 469.373 cv
207.359 470.312 206.868 471.422 206.578 472.732 cv
205.779 473.292 205.968 474.842 204.898 475.132 cv
194.828 474.923 183.678 476.122 174.178 474.892 cv
200.038 471.062 214.158 455.511 222.178 433.852 cv
230.109 433.703 238.658 434.172 246.178 433.612 cv
244.688 426.703 242.368 420.623 240.178 414.412 cv
239.279 411.242 238.368 408.062 237.058 405.293 cv
236.718 403.793 236.359 402.312 235.618 401.213 cv
235.319 399.761 234.958 398.352 234.178 397.373 cv
232.288 398.992 232.118 401.873 231.299 404.332 cv
230.509 406.713 229.359 409.112 228.898 411.532 cv
226.638 416.552 225.398 422.591 223.138 427.612 cv
225.248 410.902 221.259 398.832 215.218 389.213 cv
213.918 387.142 210.998 384.302 210.898 382.492 cv
210.868 381.982 210.958 381.482 211.109 380.982 cv
211.158 380.841 211.198 380.713 211.259 380.572 cv
211.359 380.552 211.368 380.453 211.379 380.332 cv
211.379 380.261 li
212.158 378.412 213.618 376.612 213.538 374.812 cv
214.279 373.552 214.888 372.162 215.218 370.492 cv
216.228 368.623 217.029 366.543 217.618 364.252 cv
217.978 364.052 218.138 363.652 218.098 363.052 cv
228.168 362.332 240.188 362.352 250.259 363.052 cv
250.448 363.672 250.498 364.412 250.978 364.732 cv
251.168 365.982 251.589 367.002 252.178 367.852 cv
254.498 374.662 256.968 381.312 259.619 387.772 cv
261.089 392.472 262.768 396.953 264.658 401.213 cv
264.998 402.882 265.609 404.272 266.339 405.532 cv
267.078 408.162 268.039 410.562 269.218 412.732 cv
269.699 414.341 270.109 416.011 271.138 417.052 cv
271.098 417.261 271.238 417.282 271.379 417.293 cv
278.089 436.832 285.488 455.662 292.738 474.652 cv
.839 .11 .969 .008 cmyk
f
192.52 426.412 mo
192.989 422.963 193.089 419.142 192.999 415.133 cv
193.049 414.933 192.91 414.912 192.759 414.892 cv
192.759 413.213 li
192.809 413.012 192.669 412.992 192.52 412.973 cv
192.52 411.772 li
192.569 411.572 192.429 411.553 192.279 411.532 cv
191.469 406.433 189.459 402.522 186.999 399.053 cv
187.049 398.852 186.91 398.832 186.759 398.812 cv
186.689 398.322 186.109 398.342 186.039 397.852 cv
186.089 397.652 185.949 397.633 185.799 397.612 cv
184.859 396.473 183.819 395.433 182.679 394.492 cv
182.729 394.293 182.589 394.272 182.439 394.252 cv
181.949 394.183 181.969 393.602 181.479 393.532 cv
181.529 393.332 181.389 393.312 181.239 393.293 cv
179.349 392.062 177.559 390.732 175.239 389.933 cv
175.289 389.732 175.149 389.713 174.999 389.692 cv
174.569 389.723 174.499 389.402 174.039 389.453 cv
174.089 389.252 173.949 389.232 173.799 389.213 cv
172.819 389.082 172.249 388.522 171.16 388.492 cv
171.209 388.293 171.069 388.272 170.919 388.252 cv
169.479 388.102 168.459 387.512 166.839 387.532 cv
166.889 387.332 166.749 387.312 166.599 387.293 cv
165.16 387.293 li
165.209 387.092 165.069 387.072 164.919 387.053 cv
162.52 387.053 li
162.569 386.852 162.429 386.832 162.279 386.812 cv
156.999 386.812 li
156.799 386.772 156.779 386.912 156.759 387.053 cv
155.66 387.062 154.419 386.953 153.639 387.293 cv
153.639 450.652 li
156.979 451.223 161.249 450.772 164.679 450.652 cv
164.889 450.703 164.91 450.562 164.919 450.412 cv
166.559 450.532 167.529 449.982 168.999 449.933 cv
169.209 449.982 169.229 449.842 169.239 449.692 cv
170.359 449.772 170.839 449.213 171.88 449.213 cv
172.089 449.262 172.109 449.123 172.119 448.973 cv
172.989 449.043 173.279 448.532 174.039 448.492 cv
174.249 448.543 174.27 448.402 174.279 448.252 cv
175.369 448.142 175.919 447.482 176.919 447.293 cv
177.129 447.342 177.149 447.203 177.16 447.053 cv
179.27 446.203 180.969 444.942 182.679 443.692 cv
182.889 443.742 182.91 443.602 182.919 443.453 cv
184.499 442.072 186.029 440.633 187.239 438.892 cv
187.449 438.942 187.469 438.803 187.479 438.652 cv
189.749 435.322 191.609 431.582 192.279 426.652 cv
192.489 426.703 192.509 426.562 192.52 426.412 cv
245.799 433.373 mo
245.819 433.032 245.839 432.692 245.559 432.652 cv
245.559 432.172 li
245.6 431.892 245.509 431.742 245.319 431.692 cv
245.319 431.213 li
245.369 431.012 245.229 430.992 245.079 430.973 cv
245.079 430.492 li
245.13 430.293 244.99 430.272 244.839 430.252 cv
244.839 429.772 li
244.88 429.492 244.789 429.342 244.6 429.293 cv
244.6 429.053 li
244.639 428.772 244.549 428.633 244.359 428.572 cv
244.359 428.092 li
244.41 427.892 244.27 427.873 244.119 427.852 cv
244.119 427.373 li
244.169 427.172 244.029 427.152 243.88 427.133 cv
243.88 426.652 li
243.929 426.453 243.789 426.433 243.639 426.412 cv
243.639 425.933 li
243.689 425.732 243.549 425.713 243.399 425.692 cv
243.399 425.213 li
243.439 424.933 243.35 424.782 243.16 424.732 cv
243.16 424.252 li
243.209 424.053 243.069 424.032 242.919 424.012 cv
242.919 423.532 li
242.969 423.332 242.829 423.312 242.679 423.293 cv
242.679 422.812 li
242.729 422.612 242.589 422.592 242.439 422.572 cv
242.439 422.092 li
242.49 421.892 242.35 421.873 242.199 421.852 cv
242.199 421.373 li
242.249 421.172 242.109 421.152 241.959 421.133 cv
241.959 420.652 li
242.009 420.453 241.869 420.433 241.719 420.412 cv
241.719 419.933 li
241.77 419.732 241.63 419.713 241.479 419.692 cv
241.479 419.213 li
241.529 419.012 241.389 418.992 241.24 418.973 cv
241.24 418.492 li
241.289 418.293 241.149 418.272 240.999 418.252 cv
240.999 417.772 li
241.049 417.572 240.91 417.553 240.759 417.532 cv
240.759 417.053 li
240.809 416.852 240.669 416.832 240.52 416.812 cv
240.52 416.332 li
240.569 416.133 240.429 416.112 240.279 416.092 cv
240.279 415.612 li
240.319 415.332 240.229 415.183 240.039 415.133 cv
240.039 414.892 li
240.039 414.412 li
242.229 420.623 244.549 426.703 246.039 433.612 cv
238.52 434.172 229.969 433.703 222.039 433.852 cv
214.02 455.512 199.899 471.062 174.039 474.892 cv
183.539 476.122 194.689 474.923 204.759 475.133 cv
205.829 474.843 205.639 473.292 206.439 472.732 cv
206.439 472.973 li
206.439 473.452 li
206.239 473.412 206.219 473.553 206.199 473.692 cv
206.199 473.933 li
205.999 473.892 205.979 474.022 205.959 474.173 cv
205.959 474.412 li
205.759 474.372 205.739 474.513 205.719 474.652 cv
205.719 474.892 li
205.52 474.852 205.499 474.982 205.479 475.133 cv
205.469 475.282 205.449 475.423 205.239 475.372 cv
204.509 475.522 203.179 475.062 202.839 475.612 cv
186.759 475.612 li
181.719 475.612 li
162.52 475.542 143.27 475.513 124.359 475.133 cv
124.359 362.572 li
131.799 362.732 138.699 362.352 145.959 362.332 cv
146.169 362.383 146.189 362.242 146.199 362.092 cv
150.939 362.183 155.41 362.022 159.88 361.852 cv
159.839 362.062 159.979 362.082 160.119 362.092 cv
163.609 361.973 166.709 362.223 169.959 362.332 cv
169.919 362.543 170.059 362.562 170.199 362.572 cv
172.279 362.422 173.539 363.072 175.479 363.053 cv
175.439 363.262 175.579 363.282 175.719 363.293 cv
177.089 363.213 177.779 363.793 179.079 363.772 cv
179.039 363.982 179.179 364.002 179.319 364.012 cv
180.16 363.822 180.249 364.373 180.999 364.252 cv
180.959 364.463 181.099 364.482 181.239 364.492 cv
181.979 364.322 181.949 364.912 182.679 364.732 cv
182.639 364.942 182.779 364.963 182.919 364.973 cv
185.719 365.532 187.889 366.723 190.359 367.612 cv
190.319 367.822 190.459 367.842 190.599 367.852 cv
191.809 368.172 192.649 368.842 193.719 369.293 cv
193.679 369.502 193.819 369.522 193.959 369.532 cv
194.449 369.762 194.91 370.022 195.399 370.252 cv
195.359 370.463 195.499 370.482 195.639 370.492 cv
195.999 370.623 196.249 370.852 196.599 370.973 cv
196.559 371.183 196.699 371.203 196.839 371.213 cv
198.189 371.873 199.219 372.842 200.439 373.612 cv
200.399 373.822 200.539 373.842 200.679 373.852 cv
201.029 373.912 201.089 374.252 201.399 374.332 cv
201.359 374.543 201.499 374.562 201.639 374.572 cv
203.289 375.732 204.709 377.112 206.199 378.412 cv
206.16 378.623 206.299 378.642 206.439 378.652 cv
206.399 378.862 206.539 378.883 206.679 378.892 cv
206.639 379.102 206.779 379.123 206.919 379.133 cv
207.819 379.832 208.619 380.633 209.319 381.532 cv
209.279 381.742 209.419 381.762 209.559 381.772 cv
209.52 381.982 209.66 382.002 209.799 382.012 cv
210.039 382.012 210.089 382.213 210.279 382.252 cv
210.489 382.303 210.509 382.162 210.52 382.012 cv
210.52 381.772 li
210.729 381.822 210.749 381.683 210.759 381.532 cv
210.759 381.053 li
210.88 381.082 210.939 381.053 210.969 380.982 cv
210.819 381.482 210.729 381.982 210.759 382.492 cv
210.859 384.303 213.779 387.142 215.079 389.213 cv
221.119 398.832 225.109 410.902 222.999 427.612 cv
225.259 422.592 226.499 416.553 228.759 411.532 cv
228.759 412.012 li
228.759 412.252 li
228.559 412.213 228.539 412.352 228.52 412.492 cv
228.52 412.973 li
228.319 412.933 228.299 413.072 228.279 413.213 cv
228.279 413.692 li
228.079 413.652 228.059 413.793 228.039 413.933 cv
228.039 414.412 li
227.839 414.373 227.819 414.512 227.799 414.652 cv
227.799 415.133 li
227.6 415.092 227.579 415.232 227.559 415.373 cv
227.559 415.852 li
227.359 415.812 227.339 415.953 227.319 416.092 cv
227.319 416.572 li
227.119 416.532 227.1 416.672 227.079 416.812 cv
227.079 417.293 li
226.88 417.252 226.859 417.392 226.839 417.532 cv
226.839 418.012 li
226.639 417.973 226.619 418.112 226.6 418.252 cv
226.6 418.732 li
226.399 418.692 226.38 418.832 226.359 418.973 cv
226.359 419.453 li
226.16 419.412 226.139 419.553 226.119 419.692 cv
226.119 420.172 li
225.919 420.133 225.899 420.272 225.88 420.412 cv
225.88 420.892 li
225.679 420.852 225.66 420.992 225.639 421.133 cv
225.639 421.612 li
225.439 421.572 225.419 421.713 225.399 421.852 cv
225.399 422.332 li
225.199 422.293 225.179 422.433 225.16 422.572 cv
225.16 423.053 li
224.959 423.012 224.939 423.152 224.919 423.293 cv
224.919 423.772 li
224.719 423.732 224.699 423.873 224.679 424.012 cv
224.679 424.492 li
224.479 424.453 224.459 424.592 224.439 424.732 cv
224.439 425.213 li
224.239 425.172 224.219 425.312 224.199 425.453 cv
224.199 425.933 li
223.999 425.892 223.979 426.032 223.959 426.172 cv
223.959 426.652 li
223.759 426.612 223.739 426.752 223.719 426.892 cv
223.719 427.373 li
223.52 427.332 223.499 427.473 223.479 427.612 cv
223.479 427.852 li
223.279 427.812 223.259 427.953 223.239 428.092 cv
223.239 428.572 li
223.039 428.532 223.02 428.672 222.999 428.812 cv
222.999 429.293 li
222.799 429.252 222.779 429.392 222.759 429.532 cv
222.759 430.012 li
222.559 429.973 222.539 430.112 222.52 430.252 cv
222.579 431.512 221.689 431.812 221.799 433.133 cv
229.24 433.692 237.719 433.213 245.559 433.373 cv
cp
.741 0 .996 0 cmyk
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
