%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1447066887824_oIOX1nYwel.pdf
%%Creator: Adobe Acrobat 10.1.5
%%For: kivi
%%CreationDate: 2016-01-02, 13:29:28
%%BoundingBox: 0 0 2924 1674
%%HiResBoundingBox: 0 0 2924 1674
%%CropBox: 0 0 2924 1674
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 551 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2009-08-03T09:23:17Z"
   xmp:ModifyDate="2009-08-03T09:23:17Z"
   pdf:Producer="Mac OS X 10.5.6 Quartz PDFContext"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -1674 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1674 li
2924 1674 li
2924 0 li
cp
clp
gsave
0 1674 mo
2924 1674 li
2924 0 li
0 0 li
cp
clp
2911.1 707.196 mo
2912.21 703.397 2922.04 705.529 2923.55 707.196 cv
2923.5 708.925 2921.37 708.576 2919.99 708.974 cv
2920.29 705.118 2913.68 708.168 2911.1 707.196 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.22 .169 .18 0 cmyk
ef
2887.98 708.974 mo
2888.2 705.046 2895.53 708.219 2898.65 707.196 cv
2898.43 711.123 2891.11 707.951 2887.98 708.974 cv
ef
2898.65 707.196 mo
2902.8 707.196 2906.95 707.196 2911.1 707.196 cv
2913.68 708.168 2920.29 705.118 2919.99 708.974 cv
2853.67 722.216 2787.4 736.091 2719.04 748.097 cv
2651.73 759.92 2582.7 770.168 2512.76 780.106 cv
2509.94 780.255 2505.97 779.251 2505.64 781.885 cv
2503.87 781.885 2502.09 781.885 2500.31 781.885 cv
2497.49 782.033 2493.53 781.03 2493.2 783.663 cv
2484.77 782.351 2480.97 785.663 2473.63 785.441 cv
2470.82 785.59 2466.85 784.586 2466.52 787.22 cv
2453.84 786.99 2444.38 789.976 2432.73 790.776 cv
2429.92 790.925 2425.95 789.921 2425.62 792.555 cv
2423.25 792.555 2420.88 792.555 2418.51 792.555 cv
2415.69 792.703 2411.72 791.7 2411.39 794.333 cv
2409.02 794.333 2406.65 794.333 2404.28 794.333 cv
2401.46 794.481 2397.5 793.478 2397.17 796.111 cv
2394.8 796.111 2392.42 796.111 2390.05 796.111 cv
2387.24 796.259 2383.27 795.256 2382.94 797.89 cv
2379.98 797.89 2377.01 797.89 2374.05 797.89 cv
2371.23 798.038 2367.27 797.035 2366.94 799.668 cv
2364.56 799.668 2362.19 799.668 2359.82 799.668 cv
2357.01 799.816 2353.04 798.813 2352.71 801.446 cv
2349.75 801.446 2346.78 801.446 2343.82 801.446 cv
2341 801.594 2337.03 800.591 2336.7 803.225 cv
2333.74 803.225 2330.78 803.225 2327.81 803.225 cv
2325 803.372 2321.03 802.37 2320.7 805.003 cv
2317.74 805.003 2314.77 805.003 2311.81 805.003 cv
2308.99 805.151 2305.02 804.148 2304.69 806.781 cv
2301.73 806.781 2298.77 806.781 2295.8 806.781 cv
2292.99 806.929 2289.02 805.926 2288.69 808.559 cv
2285.73 808.559 2282.76 808.559 2279.8 808.559 cv
2277.21 809.532 2270.61 806.481 2270.91 810.338 cv
2267.94 810.338 2264.98 810.338 2262.01 810.338 cv
2259.43 811.31 2252.82 808.26 2253.12 812.116 cv
2250.16 812.116 2247.2 812.116 2244.23 812.116 cv
2241.65 813.089 2235.04 810.038 2235.34 813.894 cv
2232.38 813.894 2229.41 813.894 2226.45 813.894 cv
2223.87 814.867 2217.26 811.816 2217.56 815.673 cv
2214.59 815.673 2211.63 815.673 2208.67 815.673 cv
2206.08 816.645 2199.47 813.595 2199.77 817.451 cv
2196.22 817.451 2192.66 817.451 2189.1 817.451 cv
2186.52 818.424 2179.91 815.373 2180.21 819.229 cv
2176.66 819.229 2173.1 819.229 2169.54 819.229 cv
2166.96 820.202 2160.35 817.151 2160.65 821.008 cv
2157.09 821.008 2153.54 821.008 2149.98 821.008 cv
2146.85 822.031 2139.53 818.858 2139.31 822.786 cv
2135.75 822.786 2132.2 822.786 2128.64 822.786 cv
2126.06 823.759 2119.45 820.708 2119.75 824.564 cv
2115.6 824.564 2111.45 824.564 2107.3 824.564 cv
2104.18 825.588 2096.85 822.415 2096.63 826.343 cv
2093.08 826.343 2089.52 826.343 2085.96 826.343 cv
2082.84 827.366 2075.51 824.193 2075.29 828.121 cv
2071.14 828.121 2066.99 828.121 2062.84 828.121 cv
2059.16 829.179 2051.16 825.923 2050.4 829.899 cv
2046.25 829.899 2042.1 829.899 2037.95 829.899 cv
2034.82 830.923 2027.5 827.75 2027.28 831.678 cv
2022.54 831.678 2017.79 831.678 2013.05 831.678 cv
2009.37 832.736 2001.37 829.48 2000.6 833.456 cv
1996.45 833.456 1992.3 833.456 1988.15 833.456 cv
1983.9 834.539 1975.25 831.224 1973.93 835.234 cv
1969.19 835.234 1964.44 835.234 1959.7 835.234 cv
1955.45 836.317 1946.8 833.002 1945.47 837.013 cv
1940.14 837.013 1934.8 837.013 1929.47 837.013 cv
1925.22 838.096 1916.57 834.78 1915.24 838.791 cv
1909.91 838.791 1904.57 838.791 1899.24 838.791 cv
1894.41 839.893 1885.13 836.533 1883.23 840.569 cv
1877.31 840.569 1871.38 840.569 1865.45 840.569 cv
1860.05 841.684 1850.13 838.293 1847.67 842.348 cv
1840.55 842.348 1833.44 842.348 1826.33 842.348 cv
1820.34 843.474 1809.81 840.057 1806.77 844.126 cv
1799.65 844.126 1792.54 844.126 1785.43 844.126 cv
1778.27 845.268 1766.52 841.814 1762.31 845.904 cv
1753.42 845.904 1744.53 845.904 1735.63 845.904 cv
1731.71 845.974 1725.82 845.816 1721.41 845.904 cv
1716.47 846.003 1710.92 844.328 1708.96 847.683 cv
1697.7 847.683 1686.43 847.683 1675.17 847.683 cv
1665.78 848.12 1655.29 847.113 1644.94 847.683 cv
1642.13 847.838 1638.16 846.822 1637.83 849.461 cv
1620.64 849.461 1603.45 849.461 1586.26 849.461 cv
1509.55 850.797 1428.85 847.687 1349.74 849.461 cv
1345.28 849.561 1341.03 847.824 1337.29 851.239 cv
1306.47 851.239 1275.64 851.239 1244.82 851.239 cv
1226.06 852.513 1204.46 849.555 1184.36 851.239 cv
1181.86 851.448 1179.3 850.668 1179.02 853.018 cv
1161.24 853.018 1143.46 853.018 1125.67 853.018 cv
1114.71 853.406 1101.3 852.512 1088.33 853.018 cv
1085.99 853.108 1080.62 851.346 1079.44 854.796 cv
1065.8 854.796 1052.17 854.796 1038.54 854.796 cv
1029.15 855.233 1018.65 854.226 1008.3 854.796 cv
1005.49 854.951 1001.52 853.935 1001.19 856.574 cv
989.335 856.574 977.479 856.574 965.625 856.574 cv
960.513 856.654 954.263 856.471 947.841 856.574 cv
942.648 856.658 936.567 855.016 933.615 858.352 cv
923.538 858.352 913.46 858.352 903.383 858.352 cv
898.672 858.443 893.245 858.235 887.378 858.352 cv
883.28 858.434 876.736 856.79 874.93 860.131 cv
865.446 860.131 855.962 860.131 846.478 860.131 cv
842.555 860.2 836.66 860.042 832.251 860.131 cv
827.309 860.229 821.764 858.555 819.803 861.909 cv
811.504 861.909 803.205 861.909 794.906 861.909 cv
790.817 862.017 786.006 861.772 780.68 861.909 cv
776.945 862.005 771.417 860.305 770.01 863.687 cv
762.304 863.687 754.598 863.687 746.892 863.687 cv
739.734 864.829 727.982 861.375 723.773 865.466 cv
716.067 865.466 708.362 865.466 700.656 865.466 cv
694.084 866.601 682.941 863.163 679.316 867.244 cv
672.203 867.244 665.089 867.244 657.976 867.244 cv
651.989 868.37 641.458 864.953 638.415 869.022 cv
631.894 869.022 625.374 869.022 618.853 869.022 cv
612.866 870.148 602.335 866.731 599.292 870.801 cv
592.771 870.801 586.251 870.801 579.73 870.801 cv
574.325 871.916 564.413 868.524 561.947 872.579 cv
555.427 872.579 548.906 872.579 542.386 872.579 cv
537.56 873.681 528.272 870.321 526.381 874.357 cv
519.86 874.357 513.34 874.357 506.819 874.357 cv
501.993 875.459 492.707 872.1 490.814 876.136 cv
484.887 876.136 478.959 876.136 473.031 876.136 cv
468.205 877.237 458.918 873.878 457.026 877.914 cv
451.691 877.914 446.357 877.914 441.022 877.914 cv
436.195 879.016 426.909 875.656 425.017 879.692 cv
419.682 879.692 414.347 879.692 409.012 879.692 cv
404.186 880.794 394.899 877.434 393.007 881.471 cv
388.265 881.471 383.523 881.471 378.781 881.471 cv
373.955 882.572 364.668 879.213 362.776 883.249 cv
358.034 883.249 353.292 883.249 348.549 883.249 cv
344.297 884.332 335.647 881.017 334.323 885.027 cv
328.988 885.027 323.653 885.027 318.318 885.027 cv
314.634 886.085 306.636 882.829 305.87 886.806 cv
300.535 886.806 295.2 886.806 289.865 886.806 cv
286.181 887.863 278.183 884.607 277.417 888.584 cv
272.675 888.584 267.933 888.584 263.19 888.584 cv
258.938 889.667 250.288 886.351 248.964 890.362 cv
244.814 890.362 240.665 890.362 236.516 890.362 cv
232.264 891.445 223.613 888.13 222.289 892.141 cv
218.14 892.141 213.99 892.141 209.841 892.141 cv
206.157 893.198 198.159 889.942 197.393 893.919 cv
192.651 893.919 187.909 893.919 183.167 893.919 cv
179.482 894.976 171.484 891.721 170.718 895.697 cv
166.569 895.697 162.419 895.697 158.27 895.697 cv
154.586 896.755 146.587 893.499 145.822 897.476 cv
141.672 897.476 137.523 897.476 133.374 897.476 cv
130.247 898.499 122.925 895.326 122.704 899.254 cv
117.961 899.254 113.219 899.254 108.477 899.254 cv
105.351 900.276 98.029 897.104 97.807 901.032 cv
93.658 901.032 89.508 901.032 85.359 901.032 cv
82.233 902.055 74.911 898.883 74.689 902.81 cv
70.54 902.81 66.39 902.81 62.241 902.81 cv
59.115 903.833 51.793 900.661 51.571 904.589 cv
47.422 904.589 43.272 904.589 39.123 904.589 cv
35.997 905.611 28.675 902.439 28.453 906.367 cv
21.932 906.367 15.412 906.367 8.892 906.367 cv
10.688 904.214 17.096 903.735 21.34 902.81 cv
25.137 901.982 26.663 902.369 32.01 901.032 cv
33.261 900.72 33.56 899.303 33.788 899.254 cv
41.841 897.528 48.195 897.875 56.906 895.697 cv
58.142 895.388 58.477 893.962 58.685 893.919 cv
63.401 892.935 67.918 893.151 72.911 892.141 cv
81.053 890.491 94.089 887.459 104.92 885.027 cv
106.045 884.774 107.359 885.307 108.477 885.027 cv
110.9 884.421 118.103 882.527 124.482 881.471 cv
128.846 880.748 134.279 880.543 138.708 879.692 cv
138.948 879.646 139.026 877.991 140.487 877.914 cv
148.481 877.493 161.608 874.552 170.718 872.579 cv
171.845 872.335 173.157 872.858 174.275 872.579 cv
175.513 872.269 184.815 869.695 188.501 869.022 cv
200.013 866.92 210.751 865.627 222.289 863.687 cv
223.423 863.497 224.733 863.966 225.846 863.687 cv
232.993 861.901 251.205 857.922 261.412 856.574 cv
263.734 856.268 266.215 856.951 268.525 856.574 cv
268.67 856.551 268.916 854.869 270.304 854.796 cv
272.003 854.706 273.97 855.111 275.639 854.796 cv
322.686 845.895 378.13 839.262 428.574 831.678 cv
431.389 831.53 435.356 832.533 435.687 829.899 cv
444.113 831.212 447.913 827.899 455.248 828.121 cv
458.064 827.973 462.031 828.976 462.361 826.343 cv
470.788 827.656 474.588 824.343 481.923 824.564 cv
484.739 824.416 488.706 825.42 489.036 822.786 cv
491.407 822.786 493.778 822.786 496.149 822.786 cv
498.965 822.638 502.932 823.642 503.263 821.008 cv
505.634 821.008 508.005 821.008 510.376 821.008 cv
513.192 820.86 517.159 821.863 517.489 819.229 cv
519.86 819.229 522.231 819.229 524.603 819.229 cv
527.418 819.081 531.385 820.085 531.716 817.451 cv
534.087 817.451 536.458 817.451 538.829 817.451 cv
541.645 817.303 545.612 818.307 545.942 815.673 cv
548.313 815.673 550.685 815.673 553.056 815.673 cv
555.871 815.525 559.838 816.528 560.169 813.894 cv
563.133 813.894 566.097 813.894 569.061 813.894 cv
571.876 813.747 575.843 814.75 576.174 812.116 cv
579.137 812.116 582.102 812.116 585.065 812.116 cv
587.881 811.968 591.848 812.972 592.179 810.338 cv
594.55 810.338 596.92 810.338 599.292 810.338 cv
601.876 809.365 608.483 812.416 608.183 808.559 cv
610.554 808.559 612.925 808.559 615.296 808.559 cv
617.88 807.587 624.488 810.638 624.188 806.781 cv
627.152 806.781 630.116 806.781 633.08 806.781 cv
635.896 806.633 639.862 807.637 640.193 805.003 cv
643.157 805.003 646.121 805.003 649.084 805.003 cv
651.9 804.855 655.867 805.858 656.198 803.225 cv
659.754 803.225 663.311 803.225 666.868 803.225 cv
669.684 803.077 673.65 804.08 673.981 801.446 cv
676.945 801.446 679.909 801.446 682.873 801.446 cv
685.457 800.474 692.063 803.524 691.764 799.668 cv
694.728 799.668 697.692 799.668 700.656 799.668 cv
703.24 798.695 709.847 801.746 709.547 797.89 cv
713.104 797.89 716.66 797.89 720.217 797.89 cv
722.801 796.917 729.408 799.968 729.108 796.111 cv
732.072 796.111 735.036 796.111 738 796.111 cv
740.584 795.139 747.191 798.189 746.892 794.333 cv
750.448 794.333 754.005 794.333 757.562 794.333 cv
760.146 793.36 766.753 796.411 766.453 792.555 cv
770.01 792.555 773.566 792.555 777.123 792.555 cv
780.25 791.532 787.571 794.704 787.793 790.776 cv
791.35 790.776 794.906 790.776 798.463 790.776 cv
801.589 789.753 808.911 792.926 809.133 788.998 cv
812.689 788.998 816.246 788.998 819.803 788.998 cv
822.929 787.975 830.251 791.147 830.473 787.22 cv
834.029 787.22 837.586 787.22 841.143 787.22 cv
844.269 786.197 851.59 789.369 851.813 785.441 cv
855.962 785.441 860.111 785.441 864.26 785.441 cv
867.387 784.418 874.708 787.591 874.93 783.663 cv
879.08 783.663 883.229 783.663 887.378 783.663 cv
891.063 782.605 899.061 785.861 899.827 781.885 cv
903.976 781.885 908.125 781.885 912.275 781.885 cv
915.959 780.827 923.957 784.083 924.723 780.106 cv
929.465 780.106 934.208 780.106 938.95 780.106 cv
942.634 779.049 950.632 782.305 951.398 778.328 cv
956.14 778.328 960.882 778.328 965.625 778.328 cv
969.876 777.245 978.526 780.56 979.851 776.55 cv
985.186 776.55 990.521 776.55 995.855 776.55 cv
1000.11 775.467 1008.76 778.782 1010.08 774.771 cv
1015.42 774.771 1020.75 774.771 1026.09 774.771 cv
1030.91 773.67 1040.2 777.029 1042.09 772.993 cv
1048.02 772.993 1053.95 772.993 1059.88 772.993 cv
1065.28 771.878 1075.19 775.27 1077.66 771.215 cv
1084.18 771.215 1090.7 771.215 1097.22 771.215 cv
1103.21 770.089 1113.74 773.506 1116.78 769.436 cv
1123.89 769.436 1131.01 769.436 1138.12 769.436 cv
1145.28 768.295 1157.03 771.749 1161.24 767.658 cv
1169.54 767.658 1177.84 767.658 1186.14 767.658 cv
1190.06 767.589 1195.95 767.747 1200.36 767.658 cv
1205.3 767.559 1210.85 769.234 1212.81 765.88 cv
1222.89 765.88 1232.96 765.88 1243.04 765.88 cv
1249.13 765.807 1255.41 765.975 1262.6 765.88 cv
1268.21 765.807 1275.23 767.41 1278.61 764.102 cv
1294.02 764.102 1309.43 764.102 1324.84 764.102 cv
1346.49 763.094 1371.98 765.423 1395.98 764.102 cv
1398.79 763.947 1402.76 764.962 1403.09 762.324 cv
1424.43 762.324 1445.77 762.324 1467.11 762.324 cv
1470.42 765.694 1477.7 764.023 1484.89 764.102 cv
1500.26 764.271 1517.49 765.049 1534.68 764.102 cv
1537.5 763.947 1541.47 764.962 1541.8 762.324 cv
1581.51 762.324 1621.23 762.324 1660.95 762.324 cv
1680.28 761.534 1703.26 763.357 1724.96 762.324 cv
1727.78 762.189 1731.75 763.168 1732.08 760.545 cv
1751.05 760.545 1770.01 760.545 1788.98 760.545 cv
1799.95 760.157 1813.35 761.051 1826.33 760.545 cv
1828.67 760.454 1834.03 762.217 1835.22 758.767 cv
1850.04 758.767 1864.86 758.767 1879.68 758.767 cv
1889.07 758.33 1899.56 759.337 1909.91 758.767 cv
1912.72 758.612 1916.69 759.627 1917.02 756.989 cv
1928.88 756.989 1940.73 756.989 1952.59 756.989 cv
1957.92 756.93 1964.62 757.064 1970.37 756.989 cv
1976.85 756.903 1982.82 758.528 1986.38 755.21 cv
1997.05 755.21 2007.72 755.21 2018.39 755.21 cv
2023.1 755.12 2028.52 755.328 2034.39 755.21 cv
2038.49 755.128 2045.03 756.772 2046.84 753.432 cv
2056.32 753.432 2065.81 753.432 2075.29 753.432 cv
2079.21 753.363 2085.11 753.52 2089.52 753.432 cv
2094.46 753.333 2100.01 755.008 2101.97 751.654 cv
2110.86 751.654 2119.75 751.654 2128.64 751.654 cv
2135.8 750.512 2147.55 753.966 2151.76 749.875 cv
2160.06 749.875 2168.36 749.875 2176.66 749.875 cv
2183.81 748.734 2195.57 752.187 2199.77 748.097 cv
2207.48 748.097 2215.19 748.097 2222.89 748.097 cv
2229.46 746.962 2240.61 750.4 2244.23 746.319 cv
2251.34 746.319 2258.46 746.319 2265.57 746.319 cv
2271.56 745.192 2282.09 748.61 2285.13 744.54 cv
2292.25 744.54 2299.36 744.54 2306.47 744.54 cv
2311.88 743.425 2321.79 746.817 2324.26 742.762 cv
2330.78 742.762 2337.3 742.762 2343.82 742.762 cv
2349.8 741.636 2360.33 745.053 2363.38 740.984 cv
2369.31 740.984 2375.23 740.984 2381.16 740.984 cv
2386.57 739.868 2396.48 743.26 2398.95 739.205 cv
2404.87 739.205 2410.8 739.205 2416.73 739.205 cv
2422.13 738.09 2432.05 741.482 2434.51 737.427 cv
2440.44 737.427 2446.37 737.427 2452.29 737.427 cv
2457.12 736.326 2466.41 739.684 2468.3 735.649 cv
2473.63 735.649 2478.97 735.649 2484.3 735.649 cv
2489.13 734.547 2498.42 737.906 2500.31 733.871 cv
2505.64 733.871 2510.98 733.871 2516.31 733.871 cv
2521.14 732.769 2530.43 736.128 2532.32 732.092 cv
2537.65 732.092 2542.99 732.092 2548.32 732.092 cv
2552.58 731.009 2561.23 734.325 2562.55 730.314 cv
2567.88 730.314 2573.22 730.314 2578.55 730.314 cv
2582.81 729.231 2591.46 732.546 2592.78 728.536 cv
2597.52 728.536 2602.27 728.536 2607.01 728.536 cv
2611.26 727.453 2619.91 730.768 2621.23 726.757 cv
2625.98 726.757 2630.72 726.757 2635.46 726.757 cv
2639.71 725.674 2648.36 728.99 2649.69 724.979 cv
2654.43 724.979 2659.17 724.979 2663.91 724.979 cv
2667.6 723.921 2675.6 727.177 2676.36 723.201 cv
2681.1 723.201 2685.85 723.201 2690.59 723.201 cv
2694.27 722.143 2702.27 725.398 2703.04 721.422 cv
2707.78 721.422 2712.52 721.422 2717.26 721.422 cv
2720.95 720.364 2728.95 723.62 2729.71 719.644 cv
2733.86 719.644 2738.01 719.644 2742.16 719.644 cv
2745.84 718.586 2753.84 721.842 2754.61 717.866 cv
2759.35 717.866 2764.09 717.866 2768.83 717.866 cv
2771.96 716.843 2779.28 720.015 2779.5 716.087 cv
2784.25 716.087 2788.99 716.087 2793.73 716.087 cv
2796.86 715.064 2804.18 718.237 2804.4 714.309 cv
2808.55 714.309 2812.7 714.309 2816.85 714.309 cv
2820.53 713.251 2828.53 716.507 2829.3 712.531 cv
2833.45 712.531 2837.6 712.531 2841.75 712.531 cv
2844.87 711.508 2852.19 714.68 2852.42 710.752 cv
2856.56 710.752 2860.71 710.752 2864.86 710.752 cv
2867.99 709.729 2875.31 712.902 2875.53 708.974 cv
2879.68 708.974 2883.83 708.974 2887.98 708.974 cv
2891.11 707.951 2898.43 711.123 2898.65 707.196 cv
.016 .475 .98 0 cmyk
ef
2864.86 710.752 mo
2865.08 706.825 2872.41 709.997 2875.53 708.974 cv
2875.31 712.902 2867.99 709.729 2864.86 710.752 cv
.22 .169 .18 0 cmyk
ef
2841.75 712.531 mo
2841.97 708.603 2849.29 711.775 2852.42 710.752 cv
2852.19 714.68 2844.87 711.508 2841.75 712.531 cv
ef
2816.85 714.309 mo
2817.62 710.333 2825.61 713.589 2829.3 712.531 cv
2828.53 716.507 2820.53 713.251 2816.85 714.309 cv
ef
2793.73 716.087 mo
2793.95 712.16 2801.27 715.332 2804.4 714.309 cv
2804.18 718.237 2796.86 715.064 2793.73 716.087 cv
ef
2768.83 717.866 mo
2769.06 713.938 2776.38 717.11 2779.5 716.087 cv
2779.28 720.015 2771.96 716.843 2768.83 717.866 cv
ef
2742.16 719.644 mo
2742.93 715.668 2750.92 718.924 2754.61 717.866 cv
2753.84 721.842 2745.84 718.586 2742.16 719.644 cv
ef
2717.26 721.422 mo
2718.03 717.446 2726.03 720.702 2729.71 719.644 cv
2728.95 723.62 2720.95 720.364 2717.26 721.422 cv
ef
2690.59 723.201 mo
2691.35 719.225 2699.35 722.48 2703.04 721.422 cv
2702.27 725.398 2694.27 722.143 2690.59 723.201 cv
ef
2663.91 724.979 mo
2664.68 721.003 2672.68 724.259 2676.36 723.201 cv
2675.6 727.177 2667.6 723.921 2663.91 724.979 cv
ef
2635.46 726.757 mo
2636.79 722.747 2645.44 726.062 2649.69 724.979 cv
2648.36 728.99 2639.71 725.674 2635.46 726.757 cv
ef
2607.01 728.536 mo
2608.33 724.525 2616.98 727.84 2621.23 726.757 cv
2619.91 730.768 2611.26 727.453 2607.01 728.536 cv
ef
2578.55 730.314 mo
2579.88 726.303 2588.53 729.619 2592.78 728.536 cv
2591.46 732.546 2582.81 729.231 2578.55 730.314 cv
ef
2548.32 732.092 mo
2549.65 728.081 2558.3 731.397 2562.55 730.314 cv
2561.23 734.325 2552.58 731.009 2548.32 732.092 cv
ef
2516.31 733.871 mo
2518.21 729.834 2527.49 733.194 2532.32 732.092 cv
2530.43 736.128 2521.14 732.769 2516.31 733.871 cv
ef
2484.3 735.649 mo
2486.2 731.613 2495.48 734.972 2500.31 733.871 cv
2498.42 737.906 2489.13 734.547 2484.3 735.649 cv
ef
2452.29 737.427 mo
2454.19 733.391 2463.47 736.75 2468.3 735.649 cv
2466.41 739.684 2457.12 736.326 2452.29 737.427 cv
ef
2416.73 739.205 mo
2419.19 735.15 2429.11 738.542 2434.51 737.427 cv
2432.05 741.482 2422.13 738.09 2416.73 739.205 cv
ef
2381.16 740.984 mo
2383.63 736.929 2393.54 740.321 2398.95 739.205 cv
2396.48 743.26 2386.57 739.868 2381.16 740.984 cv
ef
2343.82 742.762 mo
2346.86 738.692 2357.39 742.11 2363.38 740.984 cv
2360.33 745.053 2349.8 741.636 2343.82 742.762 cv
ef
2306.47 744.54 mo
2308.94 740.485 2318.85 743.877 2324.26 742.762 cv
2321.79 746.817 2311.88 743.425 2306.47 744.54 cv
ef
2265.57 746.319 mo
2268.62 742.249 2279.15 745.666 2285.13 744.54 cv
2282.09 748.61 2271.56 745.192 2265.57 746.319 cv
ef
2222.89 748.097 mo
2226.52 744.016 2237.66 747.453 2244.23 746.319 cv
2240.61 750.4 2229.46 746.962 2222.89 748.097 cv
ef
2176.66 749.875 mo
2180.86 745.785 2192.62 749.238 2199.77 748.097 cv
2195.57 752.187 2183.81 748.734 2176.66 749.875 cv
ef
2128.64 751.654 mo
2132.85 747.563 2144.6 751.017 2151.76 749.875 cv
2147.55 753.966 2135.8 750.512 2128.64 751.654 cv
ef
2075.29 753.432 mo
2076.06 749.455 2084.06 752.712 2087.74 751.654 cv
2092.48 751.654 2097.22 751.654 2101.97 751.654 cv
2100.01 755.008 2094.46 753.333 2089.52 753.432 cv
2085.11 753.52 2079.21 753.363 2075.29 753.432 cv
ef
2018.39 755.21 mo
2019.71 751.2 2028.36 754.515 2032.61 753.432 cv
2037.35 753.432 2042.1 753.432 2046.84 753.432 cv
2045.03 756.772 2038.49 755.128 2034.39 755.21 cv
2028.52 755.328 2023.1 755.12 2018.39 755.21 cv
ef
1952.59 756.989 mo
1956.14 753.671 1962.11 755.295 1968.59 755.21 cv
1974.34 755.135 1981.04 755.269 1986.38 755.21 cv
1982.82 758.528 1976.85 756.903 1970.37 756.989 cv
1964.62 757.064 1957.92 756.93 1952.59 756.989 cv
ef
1879.68 758.767 mo
1882.92 755.435 1890.46 757.065 1897.46 756.989 cv
1903.74 756.919 1911.1 757.042 1917.02 756.989 cv
1916.69 759.627 1912.72 758.612 1909.91 758.767 cv
1899.56 759.337 1889.07 758.33 1879.68 758.767 cv
ef
1788.98 760.545 mo
1789.21 756.618 1796.53 759.79 1799.65 758.767 cv
1811.51 758.767 1823.36 758.767 1835.22 758.767 cv
1834.03 762.217 1828.67 760.454 1826.33 760.545 cv
1813.35 761.051 1799.95 760.157 1788.98 760.545 cv
ef
1660.95 762.324 mo
1663.41 758.268 1673.32 761.661 1678.73 760.545 cv
1684.66 760.545 1690.58 760.545 1696.51 760.545 cv
1708.37 760.545 1720.22 760.545 1732.08 760.545 cv
1731.75 763.168 1727.78 762.189 1724.96 762.324 cv
1703.26 763.357 1680.28 761.534 1660.95 762.324 cv
ef
1324.84 764.102 mo
1327.89 760.032 1338.42 763.45 1344.41 762.324 cv
1350.93 762.324 1357.45 762.324 1363.97 762.324 cv
1377.01 762.324 1390.05 762.324 1403.09 762.324 cv
1402.76 764.962 1398.79 763.947 1395.98 764.102 cv
1371.98 765.423 1346.49 763.094 1324.84 764.102 cv
ef
1467.11 762.324 mo
1492 762.324 1516.9 762.324 1541.8 762.324 cv
1541.47 764.962 1537.5 763.947 1534.68 764.102 cv
1517.49 765.049 1500.26 764.271 1484.89 764.102 cv
1477.7 764.023 1470.42 765.694 1467.11 762.324 cv
ef
1243.04 765.88 mo
1246.28 762.607 1253.84 764.102 1260.82 764.102 cv
1266.57 764.101 1273.27 764.102 1278.61 764.102 cv
1275.23 767.41 1268.21 765.807 1262.6 765.88 cv
1255.41 765.975 1249.13 765.807 1243.04 765.88 cv
ef
1186.14 767.658 mo
1186.9 763.682 1194.9 766.938 1198.58 765.88 cv
1203.33 765.88 1208.07 765.88 1212.81 765.88 cv
1210.85 769.234 1205.3 767.559 1200.36 767.658 cv
1195.95 767.747 1190.06 767.589 1186.14 767.658 cv
ef
1138.12 769.436 mo
1142.33 765.347 1154.08 768.8 1161.24 767.658 cv
1157.03 771.749 1145.28 768.295 1138.12 769.436 cv
ef
1097.22 771.215 mo
1100.26 767.145 1110.79 770.563 1116.78 769.436 cv
1113.74 773.506 1103.21 770.089 1097.22 771.215 cv
ef
1059.88 772.993 mo
1062.34 768.938 1072.25 772.33 1077.66 771.215 cv
1075.19 775.27 1065.28 771.878 1059.88 772.993 cv
ef
1026.09 774.771 mo
1027.98 770.736 1037.27 774.095 1042.09 772.993 cv
1040.2 777.029 1030.91 773.67 1026.09 774.771 cv
ef
995.855 776.55 mo
997.18 772.539 1005.83 775.854 1010.08 774.771 cv
1008.76 778.782 1000.11 775.467 995.855 776.55 cv
ef
965.625 778.328 mo
966.948 774.317 975.599 777.633 979.851 776.55 cv
978.526 780.56 969.876 777.245 965.625 778.328 cv
ef
938.95 780.106 mo
939.716 776.13 947.714 779.386 951.398 778.328 cv
950.632 782.305 942.634 779.049 938.95 780.106 cv
ef
912.275 781.885 mo
913.041 777.909 921.039 781.164 924.723 780.106 cv
923.957 784.083 915.959 780.827 912.275 781.885 cv
ef
2505.64 781.885 mo
2505.97 779.251 2509.94 780.255 2512.76 780.106 cv
2512.21 782.52 2508.3 781.582 2505.64 781.885 cv
ef
887.378 783.663 mo
888.145 779.687 896.143 782.943 899.827 781.885 cv
899.061 785.861 891.063 782.605 887.378 783.663 cv
ef
2493.2 783.663 mo
2493.53 781.03 2497.49 782.033 2500.31 781.885 cv
2499.76 784.298 2495.86 783.36 2493.2 783.663 cv
ef
864.26 785.441 mo
864.482 781.514 871.804 784.686 874.93 783.663 cv
874.708 787.591 867.387 784.418 864.26 785.441 cv
ef
841.143 787.22 mo
841.364 783.292 848.686 786.465 851.813 785.441 cv
851.59 789.369 844.269 786.197 841.143 787.22 cv
ef
2466.52 787.22 mo
2466.85 784.586 2470.82 785.59 2473.63 785.441 cv
2473.08 787.855 2469.18 786.917 2466.52 787.22 cv
ef
819.803 788.998 mo
820.024 785.071 827.346 788.243 830.473 787.22 cv
830.251 791.147 822.929 787.975 819.803 788.998 cv
ef
798.463 790.776 mo
798.685 786.849 806.006 790.021 809.133 788.998 cv
808.911 792.926 801.589 789.753 798.463 790.776 cv
ef
777.123 792.555 mo
777.345 788.627 784.667 791.8 787.793 790.776 cv
787.571 794.704 780.25 791.532 777.123 792.555 cv
ef
2425.62 792.555 mo
2425.95 789.921 2429.92 790.925 2432.73 790.776 cv
2432.18 793.19 2428.28 792.252 2425.62 792.555 cv
ef
757.562 794.333 mo
757.262 790.477 763.869 793.527 766.453 792.555 cv
766.753 796.411 760.146 793.36 757.562 794.333 cv
ef
2411.39 794.333 mo
2411.72 791.7 2415.69 792.703 2418.51 792.555 cv
2417.96 794.968 2414.05 794.03 2411.39 794.333 cv
ef
738 796.111 mo
737.701 792.255 744.308 795.306 746.892 794.333 cv
747.191 798.189 740.584 795.139 738 796.111 cv
ef
2397.17 796.111 mo
2397.5 793.478 2401.46 794.481 2404.28 794.333 cv
2403.73 796.747 2399.83 795.809 2397.17 796.111 cv
ef
720.217 797.89 mo
719.917 794.034 726.524 797.084 729.108 796.111 cv
729.408 799.968 722.801 796.917 720.217 797.89 cv
ef
2382.94 797.89 mo
2383.27 795.256 2387.24 796.259 2390.05 796.111 cv
2389.5 798.525 2385.6 797.587 2382.94 797.89 cv
ef
700.656 799.668 mo
700.356 795.812 706.963 798.862 709.547 797.89 cv
709.847 801.746 703.24 798.695 700.656 799.668 cv
ef
2366.94 799.668 mo
2367.27 797.035 2371.23 798.038 2374.05 797.89 cv
2373.5 800.303 2369.6 799.365 2366.94 799.668 cv
ef
682.873 801.446 mo
682.573 797.59 689.18 800.641 691.764 799.668 cv
692.063 803.524 685.457 800.474 682.873 801.446 cv
ef
2352.71 801.446 mo
2353.04 798.813 2357.01 799.816 2359.82 799.668 cv
2359.27 802.081 2355.37 801.143 2352.71 801.446 cv
ef
666.868 803.225 mo
667.418 800.811 671.32 801.749 673.981 801.446 cv
673.65 804.08 669.684 803.077 666.868 803.225 cv
ef
2336.7 803.225 mo
2337.03 800.591 2341 801.594 2343.82 801.446 cv
2343.27 803.86 2339.37 802.922 2336.7 803.225 cv
ef
649.084 805.003 mo
649.635 802.59 653.537 803.528 656.198 803.225 cv
655.867 805.858 651.9 804.855 649.084 805.003 cv
ef
2320.7 805.003 mo
2321.03 802.37 2325 803.372 2327.81 803.225 cv
2327.26 805.638 2323.36 804.7 2320.7 805.003 cv
ef
633.08 806.781 mo
633.63 804.368 637.532 805.306 640.193 805.003 cv
639.862 807.637 635.896 806.633 633.08 806.781 cv
ef
2304.69 806.781 mo
2305.02 804.148 2308.99 805.151 2311.81 805.003 cv
2311.26 807.416 2307.36 806.478 2304.69 806.781 cv
ef
615.296 808.559 mo
614.997 804.703 621.604 807.754 624.188 806.781 cv
624.488 810.638 617.88 807.587 615.296 808.559 cv
ef
2288.69 808.559 mo
2289.02 805.926 2292.99 806.929 2295.8 806.781 cv
2295.25 809.195 2291.35 808.257 2288.69 808.559 cv
ef
599.292 810.338 mo
598.992 806.481 605.599 809.532 608.183 808.559 cv
608.483 812.416 601.876 809.365 599.292 810.338 cv
ef
2270.91 810.338 mo
2270.61 806.481 2277.21 809.532 2279.8 808.559 cv
2280.1 812.416 2273.49 809.365 2270.91 810.338 cv
ef
585.065 812.116 mo
585.615 809.703 589.518 810.641 592.179 810.338 cv
591.848 812.972 587.881 811.968 585.065 812.116 cv
ef
2253.12 812.116 mo
2252.82 808.26 2259.43 811.31 2262.01 810.338 cv
2262.31 814.194 2255.71 811.143 2253.12 812.116 cv
ef
569.061 813.894 mo
569.611 811.481 573.513 812.419 576.174 812.116 cv
575.843 814.75 571.876 813.747 569.061 813.894 cv
ef
2235.34 813.894 mo
2235.04 810.038 2241.65 813.089 2244.23 812.116 cv
2244.53 815.973 2237.92 812.922 2235.34 813.894 cv
ef
553.056 815.673 mo
553.606 813.259 557.508 814.198 560.169 813.894 cv
559.838 816.528 555.871 815.525 553.056 815.673 cv
ef
2217.56 815.673 mo
2217.26 811.816 2223.87 814.867 2226.45 813.894 cv
2226.75 817.751 2220.14 814.7 2217.56 815.673 cv
ef
538.829 817.451 mo
539.379 815.038 543.282 815.976 545.942 815.673 cv
545.612 818.307 541.645 817.303 538.829 817.451 cv
ef
2199.77 817.451 mo
2199.47 813.595 2206.08 816.645 2208.67 815.673 cv
2208.96 819.529 2202.36 816.478 2199.77 817.451 cv
ef
524.603 819.229 mo
525.153 816.816 529.055 817.754 531.716 817.451 cv
531.385 820.085 527.418 819.081 524.603 819.229 cv
ef
2180.21 819.229 mo
2179.91 815.373 2186.52 818.424 2189.1 817.451 cv
2189.4 821.308 2182.8 818.257 2180.21 819.229 cv
ef
510.376 821.008 mo
510.926 818.594 514.829 819.533 517.489 819.229 cv
517.159 821.863 513.192 820.86 510.376 821.008 cv
ef
2160.65 821.008 mo
2160.35 817.151 2166.96 820.202 2169.54 819.229 cv
2169.84 823.086 2163.24 820.035 2160.65 821.008 cv
ef
496.149 822.786 mo
496.7 820.372 500.602 821.311 503.263 821.008 cv
502.932 823.642 498.965 822.638 496.149 822.786 cv
ef
2139.31 822.786 mo
2139.53 818.858 2146.85 822.031 2149.98 821.008 cv
2149.76 824.935 2142.44 821.763 2139.31 822.786 cv
ef
481.923 824.564 mo
482.473 822.151 486.375 823.089 489.036 822.786 cv
488.706 825.42 484.739 824.416 481.923 824.564 cv
ef
2119.75 824.564 mo
2119.45 820.708 2126.06 823.759 2128.64 822.786 cv
2128.94 826.643 2122.33 823.592 2119.75 824.564 cv
ef
2096.63 826.343 mo
2096.85 822.415 2104.18 825.588 2107.3 824.564 cv
2107.08 828.492 2099.76 825.32 2096.63 826.343 cv
ef
455.248 828.121 mo
455.799 825.707 459.701 826.646 462.361 826.343 cv
462.031 828.976 458.064 827.973 455.248 828.121 cv
ef
2075.29 828.121 mo
2075.51 824.193 2082.84 827.366 2085.96 826.343 cv
2085.74 830.27 2078.42 827.098 2075.29 828.121 cv
ef
2050.4 829.899 mo
2051.16 825.923 2059.16 829.179 2062.84 828.121 cv
2062.08 832.098 2054.08 828.841 2050.4 829.899 cv
ef
428.574 831.678 mo
429.124 829.264 433.026 830.203 435.687 829.899 cv
435.356 832.533 431.389 831.53 428.574 831.678 cv
ef
2027.28 831.678 mo
2027.5 827.75 2034.82 830.923 2037.95 829.899 cv
2037.73 833.827 2030.4 830.655 2027.28 831.678 cv
ef
2000.6 833.456 mo
2001.37 829.48 2009.37 832.736 2013.05 831.678 cv
2012.29 835.654 2004.29 832.398 2000.6 833.456 cv
ef
1973.93 835.234 mo
1975.25 831.224 1983.9 834.539 1988.15 833.456 cv
1986.83 837.467 1978.18 834.151 1973.93 835.234 cv
ef
1945.47 837.013 mo
1946.8 833.002 1955.45 836.317 1959.7 835.234 cv
1958.38 839.245 1949.73 835.93 1945.47 837.013 cv
ef
1915.24 838.791 mo
1916.57 834.78 1925.22 838.096 1929.47 837.013 cv
1928.15 841.023 1919.5 837.708 1915.24 838.791 cv
ef
1883.23 840.569 mo
1885.13 836.533 1894.41 839.893 1899.24 838.791 cv
1897.35 842.827 1888.06 839.468 1883.23 840.569 cv
ef
1847.67 842.348 mo
1850.13 838.293 1860.05 841.684 1865.45 840.569 cv
1862.99 844.624 1853.07 841.232 1847.67 842.348 cv
ef
1806.77 844.126 mo
1809.81 840.057 1820.34 843.474 1826.33 842.348 cv
1823.28 846.417 1812.75 843 1806.77 844.126 cv
ef
1762.31 845.904 mo
1766.52 841.814 1778.27 845.268 1785.43 844.126 cv
1781.22 848.216 1769.47 844.763 1762.31 845.904 cv
ef
1708.96 847.683 mo
1710.92 844.328 1716.47 846.003 1721.41 845.904 cv
1725.82 845.816 1731.71 845.974 1735.63 845.904 cv
1731.53 849.936 1717.76 846.601 1708.96 847.683 cv
ef
1637.83 849.461 mo
1638.16 846.822 1642.13 847.838 1644.94 847.683 cv
1655.29 847.113 1665.78 848.12 1675.17 847.683 cv
1671.92 851.014 1664.39 849.384 1657.39 849.461 cv
1651.11 849.53 1643.75 849.408 1637.83 849.461 cv
ef
1337.29 851.239 mo
1341.03 847.824 1345.28 849.561 1349.74 849.461 cv
1428.85 847.687 1509.55 850.797 1586.26 849.461 cv
1585.32 852.696 1577.4 851.153 1572.03 851.239 cv
1498.21 852.424 1414.2 850.351 1337.29 851.239 cv
ef
1179.02 853.018 mo
1179.3 850.668 1181.86 851.448 1184.36 851.239 cv
1204.46 849.555 1226.06 852.513 1244.82 851.239 cv
1243.57 854.458 1234.71 852.952 1228.81 853.018 cv
1215.14 853.17 1195.04 852.904 1179.02 853.018 cv
ef
1079.44 854.796 mo
1080.62 851.346 1085.99 853.108 1088.33 853.018 cv
1101.3 852.512 1114.71 853.406 1125.67 853.018 cv
1123.61 856.435 1118.08 854.717 1115 854.796 cv
1105.46 855.04 1091.11 854.617 1079.44 854.796 cv
ef
1001.19 856.574 mo
1001.52 853.935 1005.49 854.951 1008.3 854.796 cv
1018.65 854.226 1029.15 855.233 1038.54 854.796 cv
1035.29 858.127 1027.75 856.497 1020.75 856.574 cv
1014.47 856.643 1007.12 856.521 1001.19 856.574 cv
ef
933.615 858.352 mo
936.567 855.016 942.648 856.658 947.841 856.574 cv
954.263 856.471 960.513 856.654 965.625 856.574 cv
962.036 859.842 956.352 858.352 949.62 858.352 cv
944.62 858.352 937.959 858.352 933.615 858.352 cv
ef
874.93 860.131 mo
876.736 856.79 883.28 858.434 887.378 858.352 cv
893.245 858.235 898.672 858.443 903.383 858.352 cv
900.848 861.628 894.889 860.131 889.157 860.131 cv
884.746 860.131 878.854 860.131 874.93 860.131 cv
ef
819.803 861.909 mo
821.764 858.555 827.309 860.229 832.251 860.131 cv
836.66 860.042 842.555 860.2 846.478 860.131 cv
842.377 864.163 828.606 860.827 819.803 861.909 cv
ef
770.01 863.687 mo
771.417 860.305 776.945 862.005 780.68 861.909 cv
786.006 861.772 790.817 862.017 794.906 861.909 cv
791.44 865.968 778.215 862.586 770.01 863.687 cv
ef
723.773 865.466 mo
727.982 861.375 739.734 864.829 746.892 863.687 cv
742.683 867.778 730.931 864.324 723.773 865.466 cv
ef
679.316 867.244 mo
682.941 863.163 694.084 866.601 700.656 865.466 cv
697.031 869.547 685.887 866.109 679.316 867.244 cv
ef
638.415 869.022 mo
641.458 864.953 651.989 868.37 657.976 867.244 cv
654.932 871.313 644.402 867.896 638.415 869.022 cv
ef
599.292 870.801 mo
602.335 866.731 612.866 870.148 618.853 869.022 cv
615.81 873.092 605.279 869.675 599.292 870.801 cv
ef
561.947 872.579 mo
564.413 868.524 574.325 871.916 579.73 870.801 cv
577.265 874.855 567.352 871.464 561.947 872.579 cv
ef
526.381 874.357 mo
528.272 870.321 537.56 873.681 542.386 872.579 cv
540.494 876.615 531.207 873.256 526.381 874.357 cv
ef
490.814 876.136 mo
492.707 872.1 501.993 875.459 506.819 874.357 cv
504.928 878.393 495.641 875.034 490.814 876.136 cv
ef
457.026 877.914 mo
458.918 873.878 468.205 877.237 473.031 876.136 cv
471.14 880.172 461.853 876.812 457.026 877.914 cv
ef
425.017 879.692 mo
426.909 875.656 436.195 879.016 441.022 877.914 cv
439.13 881.95 429.843 878.591 425.017 879.692 cv
ef
393.007 881.471 mo
394.899 877.434 404.186 880.794 409.012 879.692 cv
407.12 883.728 397.833 880.369 393.007 881.471 cv
ef
362.776 883.249 mo
364.668 879.213 373.955 882.572 378.781 881.471 cv
376.889 885.507 367.602 882.147 362.776 883.249 cv
ef
334.323 885.027 mo
335.647 881.017 344.297 884.332 348.549 883.249 cv
347.225 887.26 338.575 883.944 334.323 885.027 cv
ef
305.87 886.806 mo
306.636 882.829 314.634 886.085 318.318 885.027 cv
317.552 889.003 309.554 885.747 305.87 886.806 cv
ef
277.417 888.584 mo
278.183 884.607 286.181 887.863 289.865 886.806 cv
289.099 890.782 281.101 887.526 277.417 888.584 cv
ef
248.964 890.362 mo
250.288 886.351 258.938 889.667 263.19 888.584 cv
261.866 892.595 253.216 889.279 248.964 890.362 cv
ef
1303.5 890.362 mo
1305.47 887.008 1311.01 888.683 1315.95 888.584 cv
1320.36 888.495 1326.26 888.653 1330.18 888.584 cv
1340.26 888.584 1350.33 888.584 1360.41 888.584 cv
1357.01 891.977 1350.54 890.304 1346.18 890.362 cv
1334.21 890.521 1317.54 890.245 1303.5 890.362 cv
ef
1360.41 888.584 mo
1422.06 888.584 1483.71 888.584 1545.35 888.584 cv
1548.75 891.977 1555.22 890.304 1559.58 890.362 cv
1571.55 890.521 1588.23 890.245 1602.26 890.362 cv
1615.3 890.362 1628.34 890.362 1641.38 890.362 cv
1644.94 893.68 1650.91 892.056 1657.39 892.141 cv
1663.14 892.216 1669.84 892.082 1675.17 892.141 cv
1684.66 892.141 1694.14 892.141 1703.63 892.141 cv
1707.72 896.172 1721.5 892.837 1730.3 893.919 cv
1738 893.919 1745.71 893.919 1753.42 893.919 cv
1757.04 898 1768.19 894.562 1774.76 895.697 cv
1781.87 895.697 1788.98 895.697 1796.1 895.697 cv
1799.14 899.767 1809.67 896.35 1815.66 897.476 cv
1821.59 897.476 1827.51 897.476 1833.44 897.476 cv
1835.91 901.53 1845.82 898.139 1851.22 899.254 cv
1856.56 899.254 1861.89 899.254 1867.23 899.254 cv
1869.12 903.29 1878.41 899.931 1883.23 901.032 cv
1888.57 901.032 1893.9 901.032 1899.24 901.032 cv
1900.56 905.043 1909.21 901.727 1913.47 902.81 cv
1918.8 902.81 1924.14 902.81 1929.47 902.81 cv
1930.24 906.786 1938.23 903.53 1941.92 904.589 cv
1946.66 904.589 1951.4 904.589 1956.14 904.589 cv
1957.47 908.6 1966.12 905.284 1970.37 906.367 cv
1982.82 906.367 1995.27 906.367 2007.72 906.367 cv
2006.29 913.127 2016.13 908.628 2020.16 909.924 cv
2023.72 909.924 2027.28 909.924 2030.83 909.924 cv
2031.6 913.899 2039.6 910.643 2043.28 911.702 cv
2046.84 911.702 2050.4 911.702 2053.95 911.702 cv
2054.17 915.63 2061.5 912.457 2064.62 913.48 cv
2068.18 913.48 2071.74 913.48 2075.29 913.48 cv
2076.06 917.456 2084.06 914.2 2087.74 915.259 cv
2090.7 915.259 2093.67 915.259 2096.63 915.259 cv
2096.85 919.186 2104.18 916.014 2107.3 917.037 cv
2110.86 917.037 2114.42 917.037 2117.97 917.037 cv
2118.19 920.965 2125.52 917.792 2128.64 918.815 cv
2131.61 918.815 2134.57 918.815 2137.53 918.815 cv
2137.75 922.743 2145.08 919.57 2148.2 920.594 cv
2151.17 920.594 2154.13 920.594 2157.09 920.594 cv
2156.79 924.45 2163.4 921.399 2165.99 922.372 cv
2169.54 922.372 2173.1 922.372 2176.66 922.372 cv
2176.36 926.228 2182.96 923.178 2185.55 924.15 cv
2188.51 924.15 2191.47 924.15 2194.44 924.15 cv
2194.14 928.007 2200.75 924.956 2203.33 925.929 cv
2206.29 925.929 2209.26 925.929 2212.22 925.929 cv
2211.92 929.785 2218.53 926.734 2221.11 927.707 cv
2224.08 927.707 2227.04 927.707 2230.01 927.707 cv
2229.71 931.563 2236.31 928.513 2238.9 929.485 cv
2241.27 929.485 2243.64 929.485 2246.01 929.485 cv
2245.71 933.342 2252.32 930.291 2254.9 931.264 cv
2257.87 931.264 2260.83 931.264 2263.79 931.264 cv
2264.34 933.677 2268.25 932.738 2270.91 933.042 cv
2273.87 933.042 2276.83 933.042 2279.8 933.042 cv
2280.35 935.455 2284.25 934.517 2286.91 934.82 cv
2289.88 934.82 2292.84 934.82 2295.8 934.82 cv
2296.35 937.233 2300.26 936.295 2302.92 936.599 cv
2305.88 936.599 2308.84 936.599 2311.81 936.599 cv
2312.36 939.012 2316.26 938.073 2318.92 938.377 cv
2321.29 938.377 2323.66 938.377 2326.03 938.377 cv
2326.58 940.79 2330.49 939.851 2333.15 940.155 cv
2336.11 940.155 2339.08 940.155 2342.04 940.155 cv
2342.59 942.568 2346.49 941.63 2349.15 941.934 cv
2351.52 941.934 2353.89 941.934 2356.27 941.934 cv
2356.82 944.347 2360.72 943.408 2363.38 943.712 cv
2365.75 943.712 2368.12 943.712 2370.49 943.712 cv
2371.04 946.125 2374.94 945.186 2377.61 945.49 cv
2379.98 945.49 2382.35 945.49 2384.72 945.49 cv
2385.27 947.903 2389.17 946.965 2391.83 947.268 cv
2394.2 947.268 2396.57 947.268 2398.95 947.268 cv
2399.5 949.682 2403.4 948.743 2406.06 949.047 cv
2408.43 949.047 2410.8 949.047 2413.17 949.047 cv
2413.72 951.46 2417.62 950.521 2420.29 950.825 cv
2427.62 950.602 2431.42 953.916 2439.85 952.603 cv
2440.4 955.017 2444.3 954.078 2446.96 954.382 cv
2454.29 954.159 2458.09 957.473 2466.52 956.16 cv
2467.07 958.573 2470.97 957.635 2473.63 957.938 cv
2475.41 957.938 2477.19 957.938 2478.97 957.938 cv
2479.52 960.351 2483.42 959.413 2486.08 959.716 cv
2500.84 960.966 2513.25 964.558 2528.76 965.052 cv
2529.31 967.465 2533.21 966.526 2535.88 966.829 cv
2537.65 966.829 2539.43 966.829 2541.21 966.829 cv
2541.76 969.243 2545.66 968.305 2548.32 968.608 cv
2638.16 981.684 2726.74 997.625 2811.51 1013.07 cv
2840.75 1018.39 2869.5 1024.72 2898.65 1029.07 cv
2898.43 1033 2891.11 1029.83 2887.98 1030.85 cv
2885.02 1030.85 2882.05 1030.85 2879.09 1030.85 cv
2878.87 1026.92 2871.55 1030.09 2868.42 1029.07 cv
2864.86 1029.07 2861.31 1029.07 2857.75 1029.07 cv
2857.53 1025.14 2850.21 1028.32 2847.08 1027.29 cv
2843.52 1027.29 2839.97 1027.29 2836.41 1027.29 cv
2836.19 1023.36 2828.87 1026.54 2825.74 1025.51 cv
2822.18 1025.51 2818.63 1025.51 2815.07 1025.51 cv
2814.85 1021.59 2807.53 1024.76 2804.4 1023.74 cv
2800.25 1023.74 2796.1 1023.74 2791.95 1023.74 cv
2791.73 1019.81 2784.41 1022.98 2781.28 1021.96 cv
2777.13 1021.96 2772.98 1021.96 2768.83 1021.96 cv
2768.61 1018.03 2761.29 1021.2 2758.16 1020.18 cv
2754.01 1020.18 2749.87 1020.18 2745.72 1020.18 cv
2744.95 1016.2 2736.95 1019.46 2733.27 1018.4 cv
2729.12 1018.4 2724.97 1018.4 2720.82 1018.4 cv
2720.05 1014.42 2712.06 1017.68 2708.37 1016.62 cv
2704.22 1016.62 2700.07 1016.62 2695.92 1016.62 cv
2695.16 1012.65 2687.16 1015.9 2683.48 1014.84 cv
2678.73 1014.84 2673.99 1014.84 2669.25 1014.84 cv
2668.48 1010.87 2660.48 1014.12 2656.8 1013.07 cv
2652.06 1013.07 2647.32 1013.07 2642.57 1013.07 cv
2641.81 1009.09 2633.81 1012.35 2630.13 1011.29 cv
2625.38 1011.29 2620.64 1011.29 2615.9 1011.29 cv
2614.58 1007.28 2605.92 1010.59 2601.67 1009.51 cv
2596.93 1009.51 2592.19 1009.51 2587.45 1009.51 cv
2586.12 1005.5 2577.47 1008.81 2573.22 1007.73 cv
2568.48 1007.73 2563.74 1007.73 2558.99 1007.73 cv
2557.1 1003.69 2547.81 1007.05 2542.99 1005.95 cv
2538.25 1005.95 2533.5 1005.95 2528.76 1005.95 cv
2526.87 1001.92 2517.58 1005.28 2512.76 1004.17 cv
2507.42 1004.17 2502.09 1004.17 2496.75 1004.17 cv
2494.86 1000.14 2485.57 1003.5 2480.75 1002.4 cv
2475.41 1002.4 2470.08 1002.4 2464.74 1002.4 cv
2462.28 998.341 2452.36 1001.73 2446.96 1000.62 cv
2441.63 1000.62 2436.29 1000.62 2430.96 1000.62 cv
2428.49 996.562 2418.58 999.954 2413.17 998.839 cv
2407.24 998.839 2401.32 998.839 2395.39 998.839 cv
2392.92 994.784 2383.01 998.177 2377.61 997.06 cv
2371.08 997.06 2364.56 997.06 2358.04 997.06 cv
2355.58 993.006 2345.67 996.397 2340.26 995.282 cv
2333.74 995.282 2327.22 995.282 2320.7 995.282 cv
2317.07 991.201 2305.93 994.639 2299.36 993.504 cv
2292.84 993.504 2286.32 993.504 2279.8 993.504 cv
2276.17 989.423 2265.03 992.86 2258.46 991.726 cv
2251.34 991.726 2244.23 991.726 2237.12 991.726 cv
2232.91 987.636 2221.16 991.089 2214 989.948 cv
2206.29 989.948 2198.59 989.948 2190.88 989.948 cv
2186.67 985.857 2174.92 989.31 2167.76 988.169 cv
2159.47 988.169 2151.17 988.169 2142.87 988.169 cv
2138.77 984.138 2125 987.474 2116.19 986.392 cv
2107.3 986.392 2098.41 986.392 2089.52 986.392 cv
2086.98 983.116 2081.02 984.612 2075.29 984.612 cv
2070.88 984.612 2064.99 984.612 2061.07 984.612 cv
2050.99 984.612 2040.91 984.612 2030.83 984.612 cv
2027.69 981.264 2022.68 982.932 2016.61 982.835 cv
2011.65 982.755 2005.16 982.895 2000.6 982.835 cv
1989.34 982.835 1978.08 982.835 1966.81 982.835 cv
1963.57 979.503 1956.03 981.133 1949.03 981.056 cv
1942.75 980.987 1935.39 981.109 1929.47 981.056 cv
1916.43 981.056 1903.39 981.056 1890.35 981.056 cv
1888.29 977.651 1882.75 979.339 1879.68 979.278 cv
1871.25 979.108 1858.15 979.4 1847.67 979.278 cv
1831.07 979.278 1814.47 979.278 1797.88 979.278 cv
1794.58 975.907 1787.67 977.553 1783.65 977.499 cv
1771.48 977.337 1753.61 977.619 1739.19 977.499 cv
1713.11 977.499 1687.03 977.499 1660.95 977.499 cv
1658.29 973.945 1653.95 975.815 1650.28 975.722 cv
1548.5 973.111 1438.33 975.721 1333.74 975.722 cv
1322.13 975.722 1310.97 975.223 1298.17 975.722 cv
1295.19 975.837 1291.38 973.91 1289.28 977.499 cv
1263.79 977.499 1238.3 977.499 1212.81 977.499 cv
1198.8 977.759 1181.78 977.158 1166.57 977.499 cv
1162.68 977.587 1156.86 975.863 1154.13 979.278 cv
1137.53 979.278 1120.93 979.278 1104.33 979.278 cv
1094.48 979.587 1082.34 978.876 1070.54 979.278 cv
1067.61 979.378 1063.22 977.584 1061.65 981.056 cv
1048.02 981.056 1034.39 981.056 1020.75 981.056 cv
1014.67 981.129 1008.38 980.962 1001.19 981.056 cv
995.585 981.13 988.56 979.526 985.186 982.835 cv
973.923 982.835 962.66 982.835 951.398 982.835 cv
946.286 982.915 940.036 982.731 933.615 982.835 cv
928.421 982.918 922.34 981.275 919.388 984.612 cv
909.311 984.612 899.234 984.612 889.157 984.612 cv
884.445 984.703 879.018 984.495 873.152 984.612 cv
869.053 984.694 862.509 983.051 860.704 986.392 cv
851.813 986.392 842.921 986.392 834.029 986.392 cv
829.94 986.499 825.129 986.255 819.803 986.392 cv
816.068 986.487 810.54 984.787 809.133 988.169 cv
800.834 988.169 792.535 988.169 784.236 988.169 cv
780.147 988.277 775.336 988.033 770.01 988.169 cv
766.275 988.265 760.747 986.565 759.34 989.948 cv
751.634 989.948 743.928 989.948 736.222 989.948 cv
729.064 991.089 717.313 987.636 713.104 991.726 cv
705.991 991.726 698.877 991.726 691.764 991.726 cv
685.192 992.86 674.049 989.423 670.424 993.504 cv
663.311 993.504 656.198 993.504 649.084 993.504 cv
643.097 994.63 632.567 991.213 629.523 995.282 cv
623.002 995.282 616.482 995.282 609.961 995.282 cv
603.975 996.409 593.444 992.991 590.4 997.06 cv
583.88 997.06 577.359 997.06 570.839 997.06 cv
565.434 998.177 555.521 994.784 553.056 998.839 cv
547.128 998.839 541.2 998.839 535.272 998.839 cv
529.867 999.954 519.955 996.562 517.489 1000.62 cv
511.562 1000.62 505.634 1000.62 499.706 1000.62 cv
494.88 1001.72 485.593 998.36 483.701 1002.4 cv
477.773 1002.4 471.846 1002.4 465.918 1002.4 cv
461.092 1003.5 451.805 1000.14 449.914 1004.17 cv
444.579 1004.17 439.244 1004.17 433.909 1004.17 cv
429.082 1005.28 419.795 1001.92 417.904 1005.95 cv
412.569 1005.95 407.234 1005.95 401.899 1005.95 cv
397.073 1007.05 387.786 1003.7 385.894 1007.73 cv
381.152 1007.73 376.41 1007.73 371.667 1007.73 cv
366.841 1008.83 357.555 1005.47 355.663 1009.51 cv
350.92 1009.51 346.178 1009.51 341.436 1009.51 cv
337.184 1010.59 328.534 1007.28 327.21 1011.29 cv
322.468 1011.29 317.726 1011.29 312.983 1011.29 cv
308.731 1012.37 300.081 1009.06 298.757 1013.07 cv
294.015 1013.07 289.272 1013.07 284.53 1013.07 cv
280.278 1014.15 271.628 1010.83 270.304 1014.84 cv
265.562 1014.84 260.819 1014.84 256.077 1014.84 cv
252.393 1015.9 244.395 1012.65 243.629 1016.62 cv
238.887 1016.62 234.145 1016.62 229.402 1016.62 cv
225.718 1017.68 217.72 1014.42 216.954 1018.4 cv
212.805 1018.4 208.655 1018.4 204.506 1018.4 cv
200.254 1019.48 191.604 1016.17 190.28 1020.18 cv
186.13 1020.18 181.981 1020.18 177.832 1020.18 cv
174.147 1021.24 166.149 1017.98 165.383 1021.96 cv
161.234 1021.96 157.084 1021.96 152.935 1021.96 cv
149.251 1023.02 141.253 1019.76 140.487 1023.74 cv
136.337 1023.74 132.188 1023.74 128.039 1023.74 cv
124.354 1024.79 116.356 1021.54 115.59 1025.51 cv
111.441 1025.51 107.292 1025.51 103.142 1025.51 cv
100.016 1026.54 92.694 1023.36 92.472 1027.29 cv
88.323 1027.29 84.173 1027.29 80.024 1027.29 cv
76.898 1028.32 69.576 1025.14 69.354 1029.07 cv
65.205 1029.07 61.056 1029.07 56.906 1029.07 cv
53.78 1030.09 46.458 1026.92 46.236 1030.85 cv
42.087 1030.85 37.937 1030.85 33.788 1030.85 cv
30.662 1031.87 23.34 1028.7 23.118 1032.63 cv
18.969 1032.63 14.819 1032.63 10.67 1032.63 cv
9.157 1032.95 8.992 1031.93 8.892 1030.85 cv
31.176 1027.61 52.302 1021.2 74.689 1016.62 cv
97.297 1012 120.981 1008.47 144.043 1004.17 cv
155.288 1002.08 166.539 999.092 177.832 997.06 cv
195.585 993.868 214.689 990.836 229.402 988.169 cv
247.599 984.872 264.429 982.525 282.752 979.278 cv
285.568 979.13 289.535 980.133 289.865 977.499 cv
300.394 977.951 307.3 974.78 316.54 973.942 cv
319.355 973.795 323.323 974.798 323.653 972.165 cv
330.805 973.389 333.805 970.461 339.658 970.386 cv
342.474 970.238 346.441 971.241 346.771 968.608 cv
361.575 968 374.013 965.025 387.672 963.272 cv
390.488 963.125 394.455 964.128 394.786 961.495 cv
396.564 961.495 398.342 961.495 400.121 961.495 cv
402.937 961.347 406.903 962.35 407.234 959.716 cv
419.627 960.255 427.961 956.733 439.244 956.16 cv
442.059 956.012 446.026 957.015 446.357 954.382 cv
448.135 954.382 449.914 954.382 451.691 954.382 cv
454.508 954.233 458.475 955.236 458.805 952.603 cv
461.176 952.603 463.547 952.603 465.918 952.603 cv
468.734 952.455 472.701 953.458 473.031 950.825 cv
481.458 952.138 485.258 948.824 492.593 949.047 cv
495.409 948.898 499.375 949.901 499.706 947.268 cv
502.077 947.268 504.448 947.268 506.819 947.268 cv
509.635 947.12 513.602 948.123 513.933 945.49 cv
516.304 945.49 518.675 945.49 521.046 945.49 cv
523.862 945.342 527.829 946.345 528.159 943.712 cv
530.53 943.712 532.901 943.712 535.272 943.712 cv
538.088 943.563 542.055 944.566 542.386 941.934 cv
545.35 941.934 548.313 941.934 551.277 941.934 cv
554.093 941.785 558.06 942.788 558.391 940.155 cv
560.762 940.155 563.133 940.155 565.504 940.155 cv
568.319 940.007 572.287 941.01 572.617 938.377 cv
575.581 938.377 578.545 938.377 581.509 938.377 cv
584.324 938.228 588.292 939.231 588.622 936.599 cv
590.993 936.599 593.364 936.599 595.735 936.599 cv
598.319 935.626 604.926 938.677 604.626 934.82 cv
606.998 934.82 609.369 934.82 611.74 934.82 cv
614.324 933.848 620.931 936.897 620.631 933.042 cv
623.595 933.042 626.559 933.042 629.523 933.042 cv
632.339 932.893 636.306 933.896 636.636 931.264 cv
639.6 931.264 642.564 931.264 645.528 931.264 cv
648.112 930.291 654.719 933.341 654.419 929.485 cv
656.791 929.485 659.162 929.485 661.533 929.485 cv
664.117 928.513 670.724 931.563 670.424 927.707 cv
673.388 927.707 676.352 927.707 679.316 927.707 cv
681.9 926.734 688.507 929.784 688.208 925.929 cv
691.171 925.929 694.135 925.929 697.099 925.929 cv
699.683 924.956 706.29 928.007 705.991 924.15 cv
708.955 924.15 711.918 924.15 714.882 924.15 cv
718.008 923.127 725.33 926.3 725.552 922.372 cv
728.516 922.372 731.479 922.372 734.443 922.372 cv
737.027 921.399 743.635 924.45 743.335 920.594 cv
746.892 920.594 750.448 920.594 754.005 920.594 cv
756.589 919.621 763.196 922.672 762.896 918.815 cv
766.453 918.815 770.01 918.815 773.566 918.815 cv
776.15 917.843 782.758 920.893 782.458 917.037 cv
786.015 917.037 789.571 917.037 793.128 917.037 cv
796.254 916.014 803.576 919.186 803.798 915.259 cv
807.354 915.259 810.911 915.259 814.468 915.259 cv
817.594 914.235 824.916 917.408 825.138 913.48 cv
828.694 913.48 832.251 913.48 835.808 913.48 cv
839.492 912.422 847.49 915.678 848.256 911.702 cv
851.813 911.702 855.369 911.702 858.925 911.702 cv
862.609 910.643 870.608 913.899 871.374 909.924 cv
874.93 909.924 878.487 909.924 882.043 909.924 cv
886.083 908.628 895.917 913.127 894.492 906.367 cv
907.533 906.367 920.574 906.367 933.615 906.367 cv
937.299 905.309 945.297 908.565 946.063 904.589 cv
950.805 904.589 955.547 904.589 960.29 904.589 cv
964.542 903.506 973.192 906.821 974.516 902.81 cv
979.258 902.81 984 902.81 988.742 902.81 cv
993.568 901.709 1002.86 905.068 1004.75 901.032 cv
1009.49 901.032 1014.23 901.032 1018.97 901.032 cv
1023.8 899.931 1033.09 903.29 1034.98 899.254 cv
1040.91 899.254 1046.83 899.254 1052.76 899.254 cv
1058.17 898.139 1068.08 901.53 1070.54 897.476 cv
1076.47 897.476 1082.4 897.476 1088.33 897.476 cv
1094.31 896.35 1104.85 899.767 1107.89 895.697 cv
1115 895.697 1122.12 895.697 1129.23 895.697 cv
1135.8 894.562 1146.94 898 1150.57 893.919 cv
1158.27 893.919 1165.98 893.919 1173.69 893.919 cv
1177.61 893.85 1183.5 894.007 1187.91 893.919 cv
1192.85 893.82 1198.4 895.495 1200.36 892.141 cv
1209.85 892.141 1219.33 892.141 1228.81 892.141 cv
1234.15 892.081 1240.85 892.216 1246.6 892.141 cv
1253.08 892.056 1259.05 893.68 1262.6 890.362 cv
1276.24 890.362 1289.87 890.362 1303.5 890.362 cv
1317.54 890.245 1334.21 890.521 1346.18 890.362 cv
1350.54 890.304 1357.01 891.977 1360.41 888.584 cv
.612 .008 .965 0 cmyk
ef
1545.35 888.584 mo
1554.84 888.584 1564.32 888.584 1573.81 888.584 cv
1578.55 888.584 1583.29 888.584 1588.03 888.584 cv
1592.29 889.667 1600.94 886.351 1602.26 890.362 cv
1588.23 890.245 1571.55 890.521 1559.58 890.362 cv
1555.22 890.304 1548.75 891.977 1545.35 888.584 cv
.22 .169 .18 0 cmyk
ef
222.289 892.141 mo
223.613 888.13 232.264 891.445 236.516 890.362 cv
235.191 894.373 226.541 891.058 222.289 892.141 cv
ef
1228.81 892.141 mo
1230.71 888.104 1239.99 891.464 1244.82 890.362 cv
1250.75 890.362 1256.67 890.362 1262.6 890.362 cv
1259.05 893.68 1253.08 892.056 1246.6 892.141 cv
1240.85 892.216 1234.15 892.081 1228.81 892.141 cv
ef
1641.38 890.362 mo
1647.31 890.362 1653.24 890.362 1659.17 890.362 cv
1663.99 891.464 1673.28 888.104 1675.17 892.141 cv
1669.84 892.082 1663.14 892.216 1657.39 892.141 cv
1650.91 892.056 1644.94 893.68 1641.38 890.362 cv
ef
197.393 893.919 mo
198.159 889.942 206.157 893.198 209.841 892.141 cv
209.075 896.116 201.077 892.86 197.393 893.919 cv
ef
1173.69 893.919 mo
1174.45 889.942 1182.45 893.198 1186.14 892.141 cv
1190.88 892.141 1195.62 892.141 1200.36 892.141 cv
1198.4 895.495 1192.85 893.82 1187.91 893.919 cv
1183.5 894.007 1177.61 893.85 1173.69 893.919 cv
ef
1703.63 892.141 mo
1708.37 892.141 1713.11 892.141 1717.85 892.141 cv
1721.54 893.198 1729.53 889.942 1730.3 893.919 cv
1721.5 892.837 1707.72 896.172 1703.63 892.141 cv
ef
170.718 895.697 mo
171.484 891.721 179.482 894.976 183.167 893.919 cv
182.4 897.895 174.402 894.639 170.718 895.697 cv
ef
1129.23 895.697 mo
1132.85 891.616 1144 895.054 1150.57 893.919 cv
1146.94 898 1135.8 894.562 1129.23 895.697 cv
ef
1753.42 893.919 mo
1759.99 895.054 1771.13 891.616 1774.76 895.697 cv
1768.19 894.562 1757.04 898 1753.42 893.919 cv
ef
145.822 897.476 mo
146.587 893.499 154.586 896.755 158.27 895.697 cv
157.504 899.673 149.506 896.417 145.822 897.476 cv
ef
1088.33 897.476 mo
1091.37 893.406 1101.9 896.823 1107.89 895.697 cv
1104.85 899.767 1094.31 896.35 1088.33 897.476 cv
ef
1796.1 895.697 mo
1802.08 896.823 1812.61 893.405 1815.66 897.476 cv
1809.67 896.35 1799.14 899.767 1796.1 895.697 cv
ef
122.704 899.254 mo
122.925 895.326 130.247 898.499 133.374 897.476 cv
133.152 901.403 125.83 898.23 122.704 899.254 cv
ef
1052.76 899.254 mo
1055.23 895.198 1065.14 898.591 1070.54 897.476 cv
1068.08 901.53 1058.17 898.139 1052.76 899.254 cv
ef
1833.44 897.476 mo
1838.85 898.591 1848.76 895.198 1851.22 899.254 cv
1845.82 898.139 1835.91 901.53 1833.44 897.476 cv
ef
97.807 901.032 mo
98.029 897.104 105.351 900.276 108.477 899.254 cv
108.255 903.182 100.934 900.009 97.807 901.032 cv
ef
1018.97 901.032 mo
1020.87 896.996 1030.15 900.355 1034.98 899.254 cv
1033.09 903.29 1023.8 899.931 1018.97 901.032 cv
ef
1867.23 899.254 mo
1872.06 900.355 1881.34 896.996 1883.23 901.032 cv
1878.41 899.931 1869.12 903.29 1867.23 899.254 cv
ef
74.689 902.81 mo
74.911 898.883 82.233 902.055 85.359 901.032 cv
85.137 904.96 77.815 901.787 74.689 902.81 cv
ef
988.742 902.81 mo
990.634 898.774 999.921 902.134 1004.75 901.032 cv
1002.86 905.068 993.568 901.709 988.742 902.81 cv
ef
1899.24 901.032 mo
1903.49 902.115 1912.14 898.8 1913.47 902.81 cv
1909.21 901.727 1900.56 905.043 1899.24 901.032 cv
ef
51.571 904.589 mo
51.793 900.661 59.115 903.833 62.241 902.81 cv
62.019 906.738 54.697 903.565 51.571 904.589 cv
ef
960.29 904.589 mo
961.614 900.578 970.264 903.893 974.516 902.81 cv
973.192 906.821 964.542 903.506 960.29 904.589 cv
ef
1929.47 902.81 mo
1933.15 903.868 1941.15 900.612 1941.92 904.589 cv
1938.23 903.53 1930.24 906.786 1929.47 902.81 cv
ef
28.453 906.367 mo
28.675 902.439 35.997 905.611 39.123 904.589 cv
38.901 908.517 31.579 905.344 28.453 906.367 cv
ef
933.615 906.367 mo
934.381 902.391 942.379 905.646 946.063 904.589 cv
945.297 908.565 937.299 905.309 933.615 906.367 cv
ef
1956.14 904.589 mo
1960.4 905.672 1969.05 902.356 1970.37 906.367 cv
1966.12 905.284 1957.47 908.6 1956.14 904.589 cv
ef
894.492 906.367 mo
895.917 913.127 886.083 908.628 882.043 909.924 cv
880.618 903.163 890.452 907.662 894.492 906.367 cv
ef
2007.72 906.367 mo
2011.76 907.662 2021.59 903.163 2020.16 909.924 cv
2016.13 908.628 2006.29 913.127 2007.72 906.367 cv
ef
858.925 911.702 mo
859.691 907.726 867.689 910.981 871.374 909.924 cv
870.608 913.899 862.609 910.643 858.925 911.702 cv
ef
2030.83 909.924 mo
2034.52 910.981 2042.52 907.726 2043.28 911.702 cv
2039.6 910.643 2031.6 913.899 2030.83 909.924 cv
ef
835.808 913.48 mo
836.573 909.504 844.571 912.76 848.256 911.702 cv
847.49 915.678 839.492 912.422 835.808 913.48 cv
ef
2053.95 911.702 mo
2057.08 912.725 2064.4 909.553 2064.62 913.48 cv
2061.5 912.457 2054.17 915.63 2053.95 911.702 cv
ef
814.468 915.259 mo
814.689 911.331 822.011 914.503 825.138 913.48 cv
824.916 917.408 817.594 914.235 814.468 915.259 cv
ef
2075.29 913.48 mo
2078.98 914.538 2086.97 911.282 2087.74 915.259 cv
2084.06 914.2 2076.06 917.456 2075.29 913.48 cv
ef
793.128 917.037 mo
793.35 913.109 800.671 916.281 803.798 915.259 cv
803.576 919.186 796.254 916.014 793.128 917.037 cv
ef
2096.63 915.259 mo
2099.76 916.281 2107.08 913.109 2107.3 917.037 cv
2104.18 916.014 2096.85 919.186 2096.63 915.259 cv
ef
773.566 918.815 mo
773.267 914.959 779.874 918.01 782.458 917.037 cv
782.758 920.893 776.15 917.843 773.566 918.815 cv
ef
2117.97 917.037 mo
2121.1 918.059 2128.42 914.888 2128.64 918.815 cv
2125.52 917.792 2118.19 920.965 2117.97 917.037 cv
ef
754.005 920.594 mo
753.705 916.737 760.313 919.788 762.896 918.815 cv
763.196 922.672 756.589 919.621 754.005 920.594 cv
ef
2137.53 918.815 mo
2140.66 919.838 2147.98 916.666 2148.2 920.594 cv
2145.08 919.57 2137.75 922.743 2137.53 918.815 cv
ef
734.443 922.372 mo
734.144 918.516 740.751 921.566 743.335 920.594 cv
743.635 924.45 737.027 921.399 734.443 922.372 cv
ef
2157.09 920.594 mo
2159.68 921.566 2166.29 918.516 2165.99 922.372 cv
2163.4 921.399 2156.79 924.45 2157.09 920.594 cv
ef
714.882 924.15 mo
715.104 920.223 722.426 923.394 725.552 922.372 cv
725.33 926.3 718.008 923.127 714.882 924.15 cv
ef
2176.66 922.372 mo
2179.24 923.345 2185.85 920.294 2185.55 924.15 cv
2182.96 923.178 2176.36 926.228 2176.66 922.372 cv
ef
697.099 925.929 mo
696.799 922.072 703.406 925.123 705.991 924.15 cv
706.29 928.007 699.683 924.956 697.099 925.929 cv
ef
2194.44 924.15 mo
2197.02 925.123 2203.63 922.072 2203.33 925.929 cv
2200.75 924.956 2194.14 928.007 2194.44 924.15 cv
ef
679.316 927.707 mo
679.016 923.851 685.623 926.901 688.208 925.929 cv
688.507 929.784 681.9 926.734 679.316 927.707 cv
ef
2212.22 925.929 mo
2214.81 926.901 2221.41 923.851 2221.11 927.707 cv
2218.53 926.734 2211.92 929.785 2212.22 925.929 cv
ef
661.533 929.485 mo
661.233 925.629 667.84 928.68 670.424 927.707 cv
670.724 931.563 664.117 928.513 661.533 929.485 cv
ef
2230.01 927.707 mo
2232.59 928.68 2239.2 925.629 2238.9 929.485 cv
2236.31 928.513 2229.71 931.563 2230.01 927.707 cv
ef
645.528 931.264 mo
645.228 927.407 651.835 930.458 654.419 929.485 cv
654.719 933.341 648.112 930.291 645.528 931.264 cv
ef
2246.01 929.485 mo
2248.59 930.458 2255.2 927.407 2254.9 931.264 cv
2252.32 930.291 2245.71 933.342 2246.01 929.485 cv
ef
629.523 933.042 mo
629.854 930.408 633.82 931.411 636.636 931.264 cv
636.306 933.896 632.339 932.893 629.523 933.042 cv
ef
2263.79 931.264 mo
2266.45 931.566 2270.36 930.628 2270.91 933.042 cv
2268.25 932.738 2264.34 933.677 2263.79 931.264 cv
ef
611.74 934.82 mo
611.44 930.964 618.047 934.015 620.631 933.042 cv
620.931 936.897 614.324 933.848 611.74 934.82 cv
ef
2279.8 933.042 mo
2282.46 933.345 2286.36 932.406 2286.91 934.82 cv
2284.25 934.517 2280.35 935.455 2279.8 933.042 cv
ef
595.735 936.599 mo
595.436 932.742 602.042 935.793 604.626 934.82 cv
604.926 938.677 598.319 935.626 595.735 936.599 cv
ef
2295.8 934.82 mo
2298.46 935.123 2302.37 934.184 2302.92 936.599 cv
2300.26 936.295 2296.35 937.233 2295.8 934.82 cv
ef
581.509 938.377 mo
581.839 935.743 585.806 936.746 588.622 936.599 cv
588.292 939.231 584.324 938.228 581.509 938.377 cv
ef
2311.81 936.599 mo
2314.47 936.901 2318.37 935.963 2318.92 938.377 cv
2316.26 938.073 2312.36 939.012 2311.81 936.599 cv
ef
565.504 940.155 mo
565.834 937.521 569.801 938.524 572.617 938.377 cv
572.287 941.01 568.319 940.007 565.504 940.155 cv
ef
2326.03 938.377 mo
2328.7 938.68 2332.6 937.741 2333.15 940.155 cv
2330.49 939.851 2326.58 940.79 2326.03 938.377 cv
ef
551.277 941.934 mo
551.608 939.3 555.575 940.303 558.391 940.155 cv
558.06 942.788 554.093 941.785 551.277 941.934 cv
ef
2342.04 940.155 mo
2344.7 940.458 2348.6 939.519 2349.15 941.934 cv
2346.49 941.63 2342.59 942.568 2342.04 940.155 cv
ef
535.272 943.712 mo
535.603 941.078 539.57 942.081 542.386 941.934 cv
542.055 944.566 538.088 943.563 535.272 943.712 cv
ef
2356.27 941.934 mo
2358.93 942.236 2362.83 941.298 2363.38 943.712 cv
2360.72 943.408 2356.82 944.347 2356.27 941.934 cv
ef
521.046 945.49 mo
521.376 942.856 525.343 943.859 528.159 943.712 cv
527.829 946.345 523.862 945.342 521.046 945.49 cv
ef
2370.49 943.712 mo
2373.15 944.015 2377.05 943.076 2377.61 945.49 cv
2374.94 945.186 2371.04 946.125 2370.49 943.712 cv
ef
506.819 947.268 mo
507.15 944.635 511.117 945.638 513.933 945.49 cv
513.602 948.123 509.635 947.12 506.819 947.268 cv
ef
2384.72 945.49 mo
2387.38 945.793 2391.28 944.854 2391.83 947.268 cv
2389.17 946.965 2385.27 947.903 2384.72 945.49 cv
ef
492.593 949.047 mo
492.923 946.413 496.89 947.416 499.706 947.268 cv
499.375 949.901 495.409 948.898 492.593 949.047 cv
ef
2398.95 947.268 mo
2401.61 947.571 2405.51 946.633 2406.06 949.047 cv
2403.4 948.743 2399.5 949.682 2398.95 947.268 cv
ef
2413.17 949.047 mo
2415.83 949.35 2419.73 948.411 2420.29 950.825 cv
2417.62 950.521 2413.72 951.46 2413.17 949.047 cv
ef
465.918 952.603 mo
466.249 949.97 470.215 950.973 473.031 950.825 cv
472.701 953.458 468.734 952.455 465.918 952.603 cv
ef
451.691 954.382 mo
452.022 951.748 455.989 952.751 458.805 952.603 cv
458.475 955.236 454.508 954.233 451.691 954.382 cv
ef
2439.85 952.603 mo
2442.51 952.906 2446.41 951.968 2446.96 954.382 cv
2444.3 954.078 2440.4 955.017 2439.85 952.603 cv
ef
439.244 956.16 mo
439.574 953.526 443.541 954.529 446.357 954.382 cv
446.026 957.015 442.059 956.012 439.244 956.16 cv
ef
2466.52 956.16 mo
2469.18 956.463 2473.08 955.524 2473.63 957.938 cv
2470.97 957.635 2467.07 958.573 2466.52 956.16 cv
ef
2478.97 957.938 mo
2481.63 958.241 2485.53 957.303 2486.08 959.716 cv
2483.42 959.413 2479.52 960.351 2478.97 957.938 cv
ef
400.121 961.495 mo
400.451 958.861 404.418 959.864 407.234 959.716 cv
406.903 962.35 402.937 961.347 400.121 961.495 cv
ef
387.672 963.272 mo
388.003 960.64 391.97 961.643 394.786 961.495 cv
394.455 964.128 390.488 963.125 387.672 963.272 cv
ef
2528.76 965.052 mo
2531.42 965.354 2535.32 964.416 2535.88 966.829 cv
2533.21 966.526 2529.31 967.465 2528.76 965.052 cv
ef
2541.21 966.829 mo
2543.87 967.133 2547.77 966.194 2548.32 968.608 cv
2545.66 968.305 2541.76 969.243 2541.21 966.829 cv
ef
339.658 970.386 mo
339.988 967.753 343.955 968.756 346.771 968.608 cv
346.441 971.241 342.474 970.238 339.658 970.386 cv
ef
316.54 973.942 mo
316.87 971.309 320.837 972.312 323.653 972.165 cv
323.323 974.798 319.355 973.795 316.54 973.942 cv
ef
1289.28 977.499 mo
1291.38 973.91 1295.19 975.837 1298.17 975.722 cv
1310.97 975.223 1322.13 975.722 1333.74 975.722 cv
1438.33 975.721 1548.5 973.111 1650.28 975.722 cv
1653.95 975.815 1658.29 973.945 1660.95 977.499 cv
1537.05 977.499 1413.17 977.499 1289.28 977.499 cv
ef
282.752 979.278 mo
283.082 976.644 287.049 977.647 289.865 977.499 cv
289.535 980.133 285.568 979.13 282.752 979.278 cv
ef
1154.13 979.278 mo
1156.86 975.863 1162.68 977.587 1166.57 977.499 cv
1181.78 977.158 1198.8 977.759 1212.81 977.499 cv
1210.08 980.914 1204.26 979.19 1200.36 979.278 cv
1185.15 979.619 1168.14 979.018 1154.13 979.278 cv
ef
1739.19 977.499 mo
1753.61 977.619 1771.48 977.337 1783.65 977.499 cv
1787.67 977.553 1794.58 975.907 1797.88 979.278 cv
1783.46 979.158 1765.59 979.44 1753.42 979.278 cv
1749.4 979.225 1742.49 980.87 1739.19 977.499 cv
ef
1061.65 981.056 mo
1063.22 977.584 1067.61 979.378 1070.54 979.278 cv
1082.34 978.876 1094.48 979.587 1104.33 979.278 cv
1102.77 982.75 1098.38 980.956 1095.44 981.056 cv
1083.65 981.458 1071.5 980.747 1061.65 981.056 cv
ef
1847.67 979.278 mo
1858.15 979.4 1871.25 979.108 1879.68 979.278 cv
1882.75 979.339 1888.29 977.651 1890.35 981.056 cv
1879.87 980.933 1866.77 981.226 1858.34 981.056 cv
1855.27 980.995 1849.73 982.683 1847.67 979.278 cv
ef
985.186 982.835 mo
988.56 979.526 995.585 981.13 1001.19 981.056 cv
1008.38 980.962 1014.67 981.129 1020.75 981.056 cv
1017.38 984.364 1010.35 982.761 1004.75 982.835 cv
997.559 982.929 991.271 982.762 985.186 982.835 cv
ef
1929.47 981.056 mo
1935.39 981.109 1942.75 980.987 1949.03 981.056 cv
1956.03 981.133 1963.57 979.503 1966.81 982.835 cv
1960.89 982.781 1953.54 982.903 1947.25 982.835 cv
1940.26 982.758 1932.72 984.388 1929.47 981.056 cv
ef
919.388 984.612 mo
922.34 981.275 928.421 982.918 933.615 982.835 cv
940.036 982.731 946.286 982.915 951.398 982.835 cv
948.445 986.171 942.365 984.529 937.171 984.612 cv
930.75 984.716 924.5 984.532 919.388 984.612 cv
ef
2000.6 982.835 mo
2005.16 982.895 2011.65 982.755 2016.61 982.835 cv
2022.68 982.932 2027.69 981.264 2030.83 984.612 cv
2026.28 984.552 2019.79 984.692 2014.83 984.612 cv
2008.76 984.516 2003.75 986.184 2000.6 982.835 cv
ef
860.704 986.392 mo
862.509 983.051 869.053 984.694 873.152 984.612 cv
879.018 984.495 884.445 984.703 889.157 984.612 cv
887.351 987.953 880.808 986.309 876.708 986.392 cv
870.842 986.509 865.416 986.301 860.704 986.392 cv
ef
2061.07 984.612 mo
2064.99 984.612 2070.88 984.612 2075.29 984.612 cv
2081.02 984.612 2086.98 983.116 2089.52 986.392 cv
2085.59 986.392 2079.7 986.392 2075.29 986.392 cv
2069.56 986.392 2063.6 987.888 2061.07 984.612 cv
ef
809.133 988.169 mo
810.54 984.787 816.068 986.487 819.803 986.392 cv
825.129 986.255 829.94 986.499 834.029 986.392 cv
832.622 989.773 827.094 988.073 823.359 988.169 cv
818.032 988.306 813.221 988.061 809.133 988.169 cv
ef
2116.19 986.392 mo
2125 987.474 2138.77 984.138 2142.87 988.169 cv
2134.06 987.087 2120.29 990.423 2116.19 986.392 cv
ef
759.34 989.948 mo
760.747 986.565 766.275 988.265 770.01 988.169 cv
775.336 988.033 780.147 988.277 784.236 988.169 cv
782.829 991.552 777.301 989.851 773.566 989.948 cv
768.24 990.084 763.429 989.84 759.34 989.948 cv
ef
2167.76 988.169 mo
2174.92 989.31 2186.67 985.857 2190.88 989.948 cv
2183.72 988.806 2171.97 992.26 2167.76 988.169 cv
ef
713.104 991.726 mo
717.313 987.636 729.064 991.089 736.222 989.948 cv
732.013 994.038 720.261 990.585 713.104 991.726 cv
ef
2214 989.948 mo
2221.16 991.089 2232.91 987.636 2237.12 991.726 cv
2229.96 990.585 2218.21 994.038 2214 989.948 cv
ef
670.424 993.504 mo
674.049 989.423 685.192 992.86 691.764 991.726 cv
688.139 995.808 676.996 992.37 670.424 993.504 cv
ef
2258.46 991.726 mo
2265.03 992.86 2276.17 989.423 2279.8 993.504 cv
2273.23 992.37 2262.08 995.808 2258.46 991.726 cv
ef
629.523 995.282 mo
632.567 991.213 643.097 994.63 649.084 993.504 cv
646.041 997.574 635.51 994.156 629.523 995.282 cv
ef
2299.36 993.504 mo
2305.93 994.639 2317.07 991.201 2320.7 995.282 cv
2314.13 994.147 2302.98 997.585 2299.36 993.504 cv
ef
590.4 997.06 mo
593.444 992.991 603.975 996.409 609.961 995.282 cv
606.918 999.352 596.387 995.934 590.4 997.06 cv
ef
2340.26 995.282 mo
2345.67 996.397 2355.58 993.006 2358.04 997.06 cv
2352.64 995.945 2342.73 999.338 2340.26 995.282 cv
ef
553.056 998.839 mo
555.521 994.784 565.434 998.177 570.839 997.06 cv
568.373 1001.12 558.46 997.724 553.056 998.839 cv
ef
2377.61 997.06 mo
2383.01 998.177 2392.92 994.784 2395.39 998.839 cv
2389.98 997.724 2380.07 1001.12 2377.61 997.06 cv
ef
517.489 1000.62 mo
519.955 996.562 529.867 999.954 535.272 998.839 cv
532.807 1002.89 522.895 999.502 517.489 1000.62 cv
ef
2413.17 998.839 mo
2418.58 999.954 2428.49 996.562 2430.96 1000.62 cv
2425.55 999.502 2415.64 1002.89 2413.17 998.839 cv
ef
483.701 1002.4 mo
485.593 998.36 494.88 1001.72 499.706 1000.62 cv
497.814 1004.65 488.527 1001.29 483.701 1002.4 cv
ef
2446.96 1000.62 mo
2452.36 1001.73 2462.28 998.341 2464.74 1002.4 cv
2459.34 1001.28 2449.42 1004.67 2446.96 1000.62 cv
ef
449.914 1004.17 mo
451.805 1000.14 461.092 1003.5 465.918 1002.4 cv
464.026 1006.43 454.74 1003.07 449.914 1004.17 cv
ef
2480.75 1002.4 mo
2485.57 1003.5 2494.86 1000.14 2496.75 1004.17 cv
2491.93 1003.07 2482.64 1006.43 2480.75 1002.4 cv
ef
417.904 1005.95 mo
419.795 1001.92 429.082 1005.28 433.909 1004.17 cv
432.017 1008.21 422.73 1004.85 417.904 1005.95 cv
ef
2512.76 1004.17 mo
2517.58 1005.28 2526.87 1001.92 2528.76 1005.95 cv
2523.94 1004.85 2514.65 1008.21 2512.76 1004.17 cv
ef
385.894 1007.73 mo
387.786 1003.7 397.073 1007.05 401.899 1005.95 cv
400.007 1009.99 390.72 1006.63 385.894 1007.73 cv
ef
2542.99 1005.95 mo
2547.81 1007.05 2557.1 1003.69 2558.99 1007.73 cv
2554.17 1006.63 2544.88 1009.99 2542.99 1005.95 cv
ef
355.663 1009.51 mo
357.555 1005.47 366.841 1008.83 371.667 1007.73 cv
369.776 1011.77 360.489 1008.41 355.663 1009.51 cv
ef
2573.22 1007.73 mo
2577.47 1008.81 2586.12 1005.5 2587.45 1009.51 cv
2583.19 1008.43 2574.54 1011.74 2573.22 1007.73 cv
ef
327.21 1011.29 mo
328.534 1007.28 337.184 1010.59 341.436 1009.51 cv
340.112 1013.52 331.461 1010.2 327.21 1011.29 cv
ef
1337.29 1011.29 mo
1339.76 1007.23 1349.67 1010.62 1355.08 1009.51 cv
1361 1009.51 1366.93 1009.51 1372.86 1009.51 cv
1372.86 1010.1 1372.86 1010.69 1372.86 1011.29 cv
1361 1011.29 1349.15 1011.29 1337.29 1011.29 cv
ef
1372.86 1011.29 mo
1372.86 1010.69 1372.86 1010.1 1372.86 1009.51 cv
1426.21 1009.51 1479.56 1009.51 1532.91 1009.51 cv
1532.91 1010.1 1532.91 1010.69 1532.91 1011.29 cv
1479.56 1011.29 1426.21 1011.29 1372.86 1011.29 cv
.624 .475 .192 .008 cmyk
ef
1532.91 1011.29 mo
1532.91 1010.69 1532.91 1010.1 1532.91 1009.51 cv
1538.99 1009.58 1545.28 1009.41 1552.47 1009.51 cv
1558.07 1009.58 1565.1 1007.98 1568.47 1011.29 cv
1556.62 1011.29 1544.76 1011.29 1532.91 1011.29 cv
.22 .169 .18 0 cmyk
ef
2601.67 1009.51 mo
2605.92 1010.59 2614.58 1007.28 2615.9 1011.29 cv
2611.65 1010.2 2603 1013.52 2601.67 1009.51 cv
ef
298.757 1013.07 mo
300.081 1009.06 308.731 1012.37 312.983 1011.29 cv
311.659 1015.3 303.009 1011.98 298.757 1013.07 cv
ef
1250.15 1013.07 mo
1252.62 1009.01 1262.53 1012.4 1267.94 1011.29 cv
1267.94 1011.88 1267.94 1012.47 1267.94 1013.07 cv
1262.01 1013.07 1256.08 1013.07 1250.15 1013.07 cv
ef
1267.94 1013.07 mo
1267.94 1012.47 1267.94 1011.88 1267.94 1011.29 cv
1282.16 1011.29 1296.39 1011.29 1310.62 1011.29 cv
1309.05 1014.76 1304.66 1012.97 1301.73 1013.07 cv
1289.93 1013.47 1277.79 1012.76 1267.94 1013.07 cv
.624 .475 .192 .008 cmyk
ef
1595.15 1011.29 mo
1608.78 1011.29 1622.42 1011.29 1636.05 1011.29 cv
1636.05 1011.88 1636.05 1012.47 1636.05 1013.07 cv
1626.02 1012.87 1611.75 1013.33 1604.04 1013.07 cv
1601.11 1012.97 1596.71 1014.76 1595.15 1011.29 cv
ef
1636.05 1013.07 mo
1636.05 1012.47 1636.05 1011.88 1636.05 1011.29 cv
1642.04 1012.41 1652.57 1009 1655.61 1013.07 cv
1649.09 1013.07 1642.57 1013.07 1636.05 1013.07 cv
.22 .169 .18 0 cmyk
ef
2630.13 1011.29 mo
2633.81 1012.35 2641.81 1009.09 2642.57 1013.07 cv
2638.89 1012.01 2630.89 1015.26 2630.13 1011.29 cv
ef
270.304 1014.84 mo
271.628 1010.83 280.278 1014.15 284.53 1013.07 cv
283.206 1017.08 274.556 1013.76 270.304 1014.84 cv
ef
1189.69 1014.84 mo
1191.02 1010.83 1199.67 1014.15 1203.92 1013.07 cv
1203.92 1013.66 1203.92 1014.25 1203.92 1014.84 cv
1199.18 1014.84 1194.43 1014.84 1189.69 1014.84 cv
ef
1203.92 1014.84 mo
1203.92 1014.25 1203.92 1013.66 1203.92 1013.07 cv
1214 1013.07 1224.07 1013.07 1234.15 1013.07 cv
1231.01 1016.41 1226 1014.75 1219.92 1014.84 cv
1214.96 1014.92 1208.48 1014.78 1203.92 1014.84 cv
.624 .475 .192 .008 cmyk
ef
1671.62 1013.07 mo
1681.1 1013.07 1690.58 1013.07 1700.07 1013.07 cv
1700.07 1013.66 1700.07 1014.25 1700.07 1014.84 cv
1696.14 1014.84 1690.25 1014.84 1685.84 1014.84 cv
1680.11 1014.84 1674.15 1016.34 1671.62 1013.07 cv
ef
1700.07 1014.84 mo
1700.07 1014.25 1700.07 1013.66 1700.07 1013.07 cv
1704.32 1014.15 1712.97 1010.83 1714.29 1014.84 cv
1709.55 1014.84 1704.81 1014.84 1700.07 1014.84 cv
.22 .169 .18 0 cmyk
ef
2656.8 1013.07 mo
2660.48 1014.12 2668.48 1010.87 2669.25 1014.84 cv
2665.56 1013.79 2657.57 1017.04 2656.8 1013.07 cv
ef
243.629 1016.62 mo
244.395 1012.65 252.393 1015.9 256.077 1014.84 cv
255.311 1018.82 247.313 1015.56 243.629 1016.62 cv
ef
1141.68 1016.62 mo
1142.44 1012.65 1150.44 1015.9 1154.13 1014.84 cv
1154.13 1015.44 1154.13 1016.03 1154.13 1016.62 cv
1149.98 1016.62 1145.83 1016.62 1141.68 1016.62 cv
ef
1154.13 1016.62 mo
1154.13 1016.03 1154.13 1015.44 1154.13 1014.84 cv
1161.83 1014.84 1169.54 1014.84 1177.24 1014.84 cv
1173.04 1018.93 1161.28 1015.48 1154.13 1016.62 cv
.624 .475 .192 .008 cmyk
ef
1726.74 1014.84 mo
1734.45 1014.84 1742.15 1014.84 1749.86 1014.84 cv
1749.86 1015.44 1749.86 1016.03 1749.86 1016.62 cv
1742.7 1015.48 1730.95 1018.93 1726.74 1014.84 cv
ef
1749.86 1016.62 mo
1749.86 1016.03 1749.86 1015.44 1749.86 1014.84 cv
1753.54 1015.9 1761.54 1012.65 1762.31 1016.62 cv
1758.16 1016.62 1754.01 1016.62 1749.86 1016.62 cv
.22 .169 .18 0 cmyk
ef
2683.48 1014.84 mo
2687.16 1015.9 2695.16 1012.65 2695.92 1016.62 cv
2692.24 1015.56 2684.24 1018.82 2683.48 1014.84 cv
ef
216.954 1018.4 mo
217.72 1014.42 225.718 1017.68 229.402 1016.62 cv
228.637 1020.6 220.639 1017.34 216.954 1018.4 cv
ef
1100.78 1018.4 mo
1100.48 1014.54 1107.08 1017.59 1109.67 1016.62 cv
1109.67 1017.21 1109.67 1017.81 1109.67 1018.4 cv
1106.7 1018.4 1103.74 1018.4 1100.78 1018.4 cv
ef
1109.67 1018.4 mo
1109.67 1017.81 1109.67 1017.21 1109.67 1016.62 cv
1116.78 1016.62 1123.89 1016.62 1131.01 1016.62 cv
1127.38 1020.7 1116.24 1017.27 1109.67 1018.4 cv
.624 .475 .192 .008 cmyk
ef
1772.98 1016.62 mo
1779.5 1016.62 1786.02 1016.62 1792.54 1016.62 cv
1792.54 1017.21 1792.54 1017.81 1792.54 1018.4 cv
1786.55 1017.27 1776.02 1020.69 1772.98 1016.62 cv
ef
1792.54 1018.4 mo
1792.54 1017.81 1792.54 1017.21 1792.54 1016.62 cv
1795.67 1017.65 1802.99 1014.47 1803.21 1018.4 cv
1799.65 1018.4 1796.1 1018.4 1792.54 1018.4 cv
.22 .169 .18 0 cmyk
ef
2708.37 1016.62 mo
2712.06 1017.68 2720.05 1014.42 2720.82 1018.4 cv
2717.14 1017.34 2709.14 1020.6 2708.37 1016.62 cv
ef
190.28 1020.18 mo
191.604 1016.17 200.254 1019.48 204.506 1018.4 cv
203.182 1022.41 194.532 1019.1 190.28 1020.18 cv
ef
1063.43 1020.18 mo
1063.13 1016.32 1069.74 1019.37 1072.32 1018.4 cv
1072.32 1018.99 1072.32 1019.59 1072.32 1020.18 cv
1069.36 1020.18 1066.4 1020.18 1063.43 1020.18 cv
ef
1072.32 1020.18 mo
1072.32 1019.59 1072.32 1018.99 1072.32 1018.4 cv
1078.25 1018.4 1084.18 1018.4 1090.11 1018.4 cv
1087.64 1022.46 1077.73 1019.06 1072.32 1020.18 cv
.624 .475 .192 .008 cmyk
ef
1812.1 1018.4 mo
1818.62 1018.4 1825.14 1018.4 1831.66 1018.4 cv
1831.66 1018.99 1831.66 1019.59 1831.66 1020.18 cv
1825.68 1019.05 1815.15 1022.47 1812.1 1018.4 cv
ef
1831.66 1020.18 mo
1831.66 1019.59 1831.66 1018.99 1831.66 1018.4 cv
1834.25 1019.37 1840.85 1016.32 1840.55 1020.18 cv
1837.59 1020.18 1834.63 1020.18 1831.66 1020.18 cv
.22 .169 .18 0 cmyk
ef
2733.27 1018.4 mo
2736.95 1019.46 2744.95 1016.2 2745.72 1020.18 cv
2742.03 1019.12 2734.03 1022.38 2733.27 1018.4 cv
ef
165.383 1021.96 mo
166.149 1017.98 174.147 1021.24 177.832 1020.18 cv
177.065 1024.16 169.067 1020.9 165.383 1021.96 cv
ef
1029.64 1021.96 mo
1030.19 1019.54 1034.1 1020.48 1036.76 1020.18 cv
1036.76 1020.77 1036.76 1021.36 1036.76 1021.96 cv
1034.39 1021.96 1032.01 1021.96 1029.64 1021.96 cv
ef
1036.76 1021.96 mo
1036.76 1021.36 1036.76 1020.77 1036.76 1020.18 cv
1042.68 1020.18 1048.61 1020.18 1054.54 1020.18 cv
1052.07 1024.23 1042.16 1020.84 1036.76 1021.96 cv
.624 .475 .192 .008 cmyk
ef
1849.45 1020.18 mo
1854.78 1020.18 1860.12 1020.18 1865.45 1020.18 cv
1865.45 1020.77 1865.45 1021.36 1865.45 1021.96 cv
1860.63 1020.86 1851.34 1024.21 1849.45 1020.18 cv
ef
1865.45 1021.96 mo
1865.45 1021.36 1865.45 1020.77 1865.45 1020.18 cv
1868.04 1021.15 1874.64 1018.1 1874.34 1021.96 cv
1871.38 1021.96 1868.42 1021.96 1865.45 1021.96 cv
.22 .169 .18 0 cmyk
ef
2758.16 1020.18 mo
2761.29 1021.2 2768.61 1018.03 2768.83 1021.96 cv
2765.71 1020.93 2758.39 1024.11 2758.16 1020.18 cv
ef
140.487 1023.74 mo
141.253 1019.76 149.251 1023.02 152.935 1021.96 cv
152.169 1025.93 144.171 1022.68 140.487 1023.74 cv
ef
997.634 1023.74 mo
998.185 1021.32 1002.09 1022.26 1004.75 1021.96 cv
1004.75 1022.55 1004.75 1023.14 1004.75 1023.74 cv
1002.38 1023.74 1000 1023.74 997.634 1023.74 cv
ef
1004.75 1023.74 mo
1004.75 1023.14 1004.75 1022.55 1004.75 1021.96 cv
1010.08 1021.96 1015.42 1021.96 1020.75 1021.96 cv
1018.86 1025.99 1009.57 1022.63 1004.75 1023.74 cv
.624 .475 .192 .008 cmyk
ef
1881.46 1021.96 mo
1886.79 1021.96 1892.13 1021.96 1897.46 1021.96 cv
1897.46 1022.55 1897.46 1023.14 1897.46 1023.74 cv
1892.63 1022.63 1883.35 1025.99 1881.46 1021.96 cv
ef
1897.46 1023.74 mo
1897.46 1023.14 1897.46 1022.55 1897.46 1021.96 cv
1900.04 1022.93 1906.65 1019.88 1906.35 1023.74 cv
1903.39 1023.74 1900.42 1023.74 1897.46 1023.74 cv
.22 .169 .18 0 cmyk
ef
2781.28 1021.96 mo
2784.41 1022.98 2791.73 1019.81 2791.95 1023.74 cv
2788.83 1022.71 2781.5 1025.88 2781.28 1021.96 cv
ef
115.59 1025.51 mo
116.356 1021.54 124.354 1024.79 128.039 1023.74 cv
127.272 1027.71 119.274 1024.46 115.59 1025.51 cv
ef
967.402 1025.51 mo
967.103 1021.66 973.71 1024.71 976.294 1023.74 cv
976.294 1024.33 976.294 1024.92 976.294 1025.51 cv
973.331 1025.51 970.366 1025.51 967.402 1025.51 cv
ef
976.294 1025.51 mo
976.294 1024.92 976.294 1024.33 976.294 1023.74 cv
981.036 1023.74 985.778 1023.74 990.521 1023.74 cv
989.196 1027.75 980.546 1024.43 976.294 1025.51 cv
.624 .475 .192 .008 cmyk
ef
1913.47 1023.74 mo
1918.21 1023.74 1922.95 1023.74 1927.69 1023.74 cv
1927.69 1024.33 1927.69 1024.92 1927.69 1025.51 cv
1923.44 1024.43 1914.79 1027.75 1913.47 1023.74 cv
ef
1927.69 1025.51 mo
1927.69 1024.92 1927.69 1024.33 1927.69 1023.74 cv
1930.51 1023.88 1934.47 1022.88 1934.8 1025.51 cv
1932.43 1025.51 1930.06 1025.51 1927.69 1025.51 cv
.22 .169 .18 0 cmyk
ef
2804.4 1023.74 mo
2807.53 1024.76 2814.85 1021.59 2815.07 1025.51 cv
2811.94 1024.49 2804.62 1027.66 2804.4 1023.74 cv
ef
92.472 1027.29 mo
92.694 1023.36 100.016 1026.54 103.142 1025.51 cv
102.92 1029.44 95.599 1026.27 92.472 1027.29 cv
ef
940.728 1027.29 mo
941.278 1024.88 945.181 1025.82 947.841 1025.51 cv
947.841 1026.11 947.841 1026.7 947.841 1027.29 cv
945.47 1027.29 943.099 1027.29 940.728 1027.29 cv
ef
947.841 1027.29 mo
947.841 1026.7 947.841 1026.11 947.841 1025.51 cv
952.583 1025.51 957.326 1025.51 962.068 1025.51 cv
960.744 1029.52 952.093 1026.21 947.841 1027.29 cv
.624 .475 .192 .008 cmyk
ef
1941.92 1025.51 mo
1946.07 1025.51 1950.22 1025.51 1954.37 1025.51 cv
1954.37 1026.11 1954.37 1026.7 1954.37 1027.29 cv
1950.68 1026.23 1942.68 1029.49 1941.92 1025.51 cv
ef
1954.37 1027.29 mo
1954.37 1026.7 1954.37 1026.11 1954.37 1025.51 cv
1957.18 1025.66 1961.15 1024.66 1961.48 1027.29 cv
1959.11 1027.29 1956.74 1027.29 1954.37 1027.29 cv
.22 .169 .18 0 cmyk
ef
2825.74 1025.51 mo
2828.87 1026.54 2836.19 1023.36 2836.41 1027.29 cv
2833.28 1026.27 2825.96 1029.44 2825.74 1025.51 cv
ef
69.354 1029.07 mo
69.576 1025.14 76.898 1028.32 80.024 1027.29 cv
79.802 1031.22 72.48 1028.05 69.354 1029.07 cv
ef
914.053 1029.07 mo
914.604 1026.66 918.506 1027.6 921.167 1027.29 cv
921.167 1027.88 921.167 1028.48 921.167 1029.07 cv
918.795 1029.07 916.424 1029.07 914.053 1029.07 cv
ef
921.167 1029.07 mo
921.167 1028.48 921.167 1027.88 921.167 1027.29 cv
925.316 1027.29 929.465 1027.29 933.615 1027.29 cv
932.849 1031.27 924.851 1028.01 921.167 1029.07 cv
.624 .475 .192 .008 cmyk
ef
1968.59 1027.29 mo
1972.74 1027.29 1976.89 1027.29 1981.04 1027.29 cv
1981.04 1027.88 1981.04 1028.48 1981.04 1029.07 cv
1977.36 1028.01 1969.36 1031.27 1968.59 1027.29 cv
ef
1981.04 1029.07 mo
1981.04 1028.48 1981.04 1027.88 1981.04 1027.29 cv
1983.86 1027.44 1987.82 1026.44 1988.15 1029.07 cv
1985.78 1029.07 1983.41 1029.07 1981.04 1029.07 cv
.22 .169 .18 0 cmyk
ef
2847.08 1027.29 mo
2850.21 1028.32 2857.53 1025.14 2857.75 1029.07 cv
2854.62 1028.05 2847.3 1031.22 2847.08 1027.29 cv
ef
46.236 1030.85 mo
46.458 1026.92 53.78 1030.09 56.906 1029.07 cv
56.684 1033 49.362 1029.83 46.236 1030.85 cv
ef
889.157 1030.85 mo
889.707 1028.44 893.609 1029.37 896.27 1029.07 cv
896.27 1029.66 896.27 1030.26 896.27 1030.85 cv
893.899 1030.85 891.528 1030.85 889.157 1030.85 cv
ef
896.27 1030.85 mo
896.27 1030.26 896.27 1029.66 896.27 1029.07 cv
900.419 1029.07 904.569 1029.07 908.718 1029.07 cv
907.952 1033.05 899.954 1029.79 896.27 1030.85 cv
.624 .475 .192 .008 cmyk
ef
1993.49 1029.07 mo
1997.64 1029.07 2001.79 1029.07 2005.94 1029.07 cv
2005.94 1029.66 2005.94 1030.26 2005.94 1030.85 cv
2002.25 1029.79 1994.26 1033.05 1993.49 1029.07 cv
ef
2005.94 1030.85 mo
2005.94 1030.26 2005.94 1029.66 2005.94 1029.07 cv
2008.75 1029.22 2012.72 1028.22 2013.05 1030.85 cv
2010.68 1030.85 2008.31 1030.85 2005.94 1030.85 cv
.22 .169 .18 0 cmyk
ef
grestore
gsave
.06 1673.94 mo
2923.55 1673.94 li
2923.55 .580078 li
.06 .580078 li
cp
clp
2868.42 1029.07 mo
2871.55 1030.09 2878.87 1026.92 2879.09 1030.85 cv
2875.96 1029.83 2868.64 1033 2868.42 1029.07 cv
false sop
.22 .169 .18 0 cmyk
ef
8.892 1030.85 mo
8.992 1031.93 9.157 1032.95 10.67 1032.63 cv
10.448 1036.55 3.126 1033.38 0 1034.41 cv
0 1033.81 0 1033.22 0 1032.63 cv
5.026 1034.1 4.607 1030.12 8.892 1030.85 cv
ef
grestore
gsave
0 1674 mo
2924 1674 li
2924 0 li
0 0 li
cp
clp
23.118 1032.63 mo
23.34 1028.7 30.662 1031.87 33.788 1030.85 cv
33.566 1034.78 26.245 1031.6 23.118 1032.63 cv
false sop
.22 .169 .18 0 cmyk
ef
871.374 1032.63 mo
872.14 1028.65 880.138 1031.91 883.822 1030.85 cv
883.056 1034.83 875.058 1031.57 871.374 1032.63 cv
.624 .475 .192 .008 cmyk
ef
2018.39 1030.85 mo
2022.07 1031.91 2030.07 1028.65 2030.83 1032.63 cv
2027.15 1031.57 2019.15 1034.83 2018.39 1030.85 cv
ef
2898.65 1032.63 mo
2898.95 1030.55 2901.46 1030.7 2903.99 1030.85 cv
2905.17 1030.85 2906.36 1030.85 2907.54 1030.85 cv
2907.54 1031.44 2907.54 1032.03 2907.54 1032.63 cv
2904.58 1032.63 2901.62 1032.63 2898.65 1032.63 cv
.612 .008 .965 0 cmyk
ef
2907.54 1032.63 mo
2907.54 1032.03 2907.54 1031.44 2907.54 1030.85 cv
2912.57 1029.38 2912.15 1033.36 2916.43 1032.63 cv
2917.24 1035.53 2906.74 1035.53 2907.54 1032.63 cv
.22 .169 .18 0 cmyk
ef
848.256 1034.41 mo
849.021 1030.43 857.02 1033.69 860.704 1032.63 cv
859.938 1036.6 851.94 1033.35 848.256 1034.41 cv
.624 .475 .192 .008 cmyk
ef
2041.5 1032.63 mo
2045.19 1033.69 2053.19 1030.43 2053.95 1034.41 cv
2050.27 1033.35 2042.27 1036.6 2041.5 1032.63 cv
ef
819.803 1036.18 mo
820.353 1033.77 824.255 1034.71 826.916 1034.41 cv
826.916 1035 826.916 1035.59 826.916 1036.18 cv
824.545 1036.18 822.174 1036.18 819.803 1036.18 cv
.22 .169 .18 0 cmyk
ef
826.916 1036.18 mo
826.916 1035.59 826.916 1035 826.916 1034.41 cv
830.473 1034.41 834.029 1034.41 837.586 1034.41 cv
837.364 1038.33 830.042 1035.16 826.916 1036.18 cv
.624 .475 .192 .008 cmyk
ef
2064.62 1034.41 mo
2067.75 1035.43 2075.07 1032.26 2075.29 1036.18 cv
2072.17 1035.16 2064.84 1038.33 2064.62 1034.41 cv
ef
798.463 1037.96 mo
799.013 1035.55 802.916 1036.49 805.576 1036.18 cv
805.576 1036.78 805.576 1037.37 805.576 1037.96 cv
803.205 1037.96 800.834 1037.96 798.463 1037.96 cv
.22 .169 .18 0 cmyk
ef
805.576 1037.96 mo
805.576 1037.37 805.576 1036.78 805.576 1036.18 cv
809.133 1036.18 812.689 1036.18 816.246 1036.18 cv
816.024 1040.11 808.702 1036.94 805.576 1037.96 cv
.624 .475 .192 .008 cmyk
ef
2085.96 1036.18 mo
2089.09 1037.21 2096.41 1034.03 2096.63 1037.96 cv
2093.51 1036.94 2086.18 1040.11 2085.96 1036.18 cv
ef
784.236 1039.74 mo
784.458 1035.81 791.78 1038.99 794.906 1037.96 cv
794.685 1041.89 787.363 1038.72 784.236 1039.74 cv
ef
2107.3 1037.96 mo
2110.43 1038.99 2117.75 1035.81 2117.97 1039.74 cv
2114.85 1038.72 2107.52 1041.89 2107.3 1037.96 cv
ef
764.675 1041.52 mo
764.375 1037.66 770.982 1040.71 773.566 1039.74 cv
773.866 1043.6 767.259 1040.55 764.675 1041.52 cv
ef
2126.86 1039.74 mo
2129.99 1040.76 2137.31 1037.59 2137.53 1041.52 cv
2134.41 1040.5 2127.08 1043.67 2126.86 1039.74 cv
ef
745.113 1043.3 mo
744.813 1039.44 751.421 1042.49 754.005 1041.52 cv
754.305 1045.37 747.697 1042.32 745.113 1043.3 cv
ef
2146.42 1041.52 mo
2149.55 1042.54 2156.87 1039.37 2157.09 1043.3 cv
2153.97 1042.27 2146.65 1045.45 2146.42 1041.52 cv
ef
725.552 1045.08 mo
725.252 1041.22 731.859 1044.27 734.443 1043.3 cv
734.743 1047.15 728.136 1044.1 725.552 1045.08 cv
ef
2165.99 1043.3 mo
2168.57 1044.27 2175.18 1041.22 2174.88 1045.08 cv
2172.29 1044.1 2165.69 1047.15 2165.99 1043.3 cv
ef
707.769 1046.85 mo
707.469 1043 714.076 1046.05 716.66 1045.08 cv
716.96 1048.93 710.353 1045.88 707.769 1046.85 cv
ef
2183.77 1045.08 mo
2186.9 1046.1 2194.22 1042.93 2194.44 1046.85 cv
2191.31 1045.83 2183.99 1049 2183.77 1045.08 cv
ef
688.208 1048.63 mo
687.908 1044.78 694.515 1047.83 697.099 1046.85 cv
697.398 1050.71 690.792 1047.66 688.208 1048.63 cv
ef
2203.33 1046.85 mo
2205.92 1047.83 2212.52 1044.78 2212.22 1048.63 cv
2209.64 1047.66 2203.03 1050.71 2203.33 1046.85 cv
ef
672.203 1050.41 mo
672.753 1048 676.655 1048.94 679.316 1048.63 cv
678.985 1051.27 675.019 1050.26 672.203 1050.41 cv
ef
2221.11 1048.63 mo
2223.93 1048.78 2227.9 1047.78 2228.23 1050.41 cv
2225.57 1050.11 2221.66 1051.04 2221.11 1048.63 cv
ef
654.419 1052.19 mo
654.12 1048.33 660.727 1051.38 663.311 1050.41 cv
663.611 1054.27 657.003 1051.22 654.419 1052.19 cv
ef
2237.12 1050.41 mo
2239.7 1051.38 2246.31 1048.33 2246.01 1052.19 cv
2243.43 1051.22 2236.82 1054.27 2237.12 1050.41 cv
ef
636.636 1053.97 mo
636.336 1050.11 642.944 1053.16 645.528 1052.19 cv
645.828 1056.04 639.22 1052.99 636.636 1053.97 cv
ef
2254.9 1052.19 mo
2257.72 1052.34 2261.68 1051.33 2262.01 1053.97 cv
2259.35 1053.66 2255.45 1054.6 2254.9 1052.19 cv
ef
620.631 1055.75 mo
620.332 1051.89 626.939 1054.94 629.523 1053.97 cv
629.823 1057.82 623.215 1054.77 620.631 1055.75 cv
ef
2270.91 1053.97 mo
2273.49 1054.94 2280.1 1051.89 2279.8 1055.75 cv
2277.21 1054.77 2270.61 1057.82 2270.91 1053.97 cv
ef
604.626 1057.52 mo
604.327 1053.67 610.934 1056.72 613.518 1055.75 cv
613.818 1059.6 607.211 1056.55 604.626 1057.52 cv
ef
2286.91 1055.75 mo
2289.5 1056.72 2296.1 1053.67 2295.8 1057.52 cv
2293.22 1056.55 2286.61 1059.6 2286.91 1055.75 cv
ef
588.622 1059.3 mo
588.322 1055.45 594.929 1058.5 597.513 1057.52 cv
597.813 1061.38 591.206 1058.33 588.622 1059.3 cv
ef
2302.92 1057.52 mo
2305.73 1057.67 2309.7 1056.67 2310.03 1059.3 cv
2307.37 1059 2303.47 1059.94 2302.92 1057.52 cv
ef
574.396 1061.08 mo
574.946 1058.67 578.848 1059.61 581.509 1059.3 cv
581.178 1061.94 577.211 1060.93 574.396 1061.08 cv
ef
2318.92 1059.3 mo
2321.74 1059.45 2325.7 1058.45 2326.03 1061.08 cv
2323.37 1060.78 2319.47 1061.71 2318.92 1059.3 cv
ef
558.391 1062.86 mo
558.941 1060.45 562.843 1061.38 565.504 1061.08 cv
565.173 1063.71 561.206 1062.71 558.391 1062.86 cv
ef
2333.15 1061.08 mo
2335.73 1062.05 2342.34 1059 2342.04 1062.86 cv
2339.46 1061.89 2332.85 1064.94 2333.15 1061.08 cv
ef
544.164 1064.64 mo
544.714 1062.22 548.617 1063.16 551.277 1062.86 cv
550.947 1065.49 546.979 1064.49 544.164 1064.64 cv
ef
2349.15 1062.86 mo
2351.97 1063.01 2355.94 1062 2356.27 1064.64 cv
2353.6 1064.33 2349.7 1065.27 2349.15 1062.86 cv
ef
528.159 1066.41 mo
527.859 1062.56 534.467 1065.61 537.051 1064.64 cv
537.351 1068.49 530.743 1065.44 528.159 1066.41 cv
ef
2363.38 1064.64 mo
2366.19 1064.79 2370.16 1063.78 2370.49 1066.41 cv
2367.83 1066.11 2363.93 1067.05 2363.38 1064.64 cv
ef
513.933 1068.19 mo
514.483 1065.78 518.385 1066.72 521.046 1066.41 cv
520.715 1069.05 516.749 1068.05 513.933 1068.19 cv
ef
2377.61 1066.41 mo
2380.42 1066.56 2384.39 1065.56 2384.72 1068.19 cv
2382.06 1067.89 2378.16 1068.83 2377.61 1066.41 cv
ef
499.706 1069.97 mo
500.256 1067.56 504.159 1068.5 506.819 1068.19 cv
506.489 1070.83 502.522 1069.82 499.706 1069.97 cv
ef
2391.83 1068.19 mo
2394.65 1068.34 2398.62 1067.34 2398.95 1069.97 cv
2396.28 1069.67 2392.38 1070.61 2391.83 1068.19 cv
ef
2406.06 1069.97 mo
2408.87 1070.12 2412.84 1069.12 2413.17 1071.75 cv
2410.51 1071.45 2406.61 1072.38 2406.06 1069.97 cv
ef
473.031 1073.53 mo
473.582 1071.12 477.484 1072.05 480.145 1071.75 cv
479.814 1074.38 475.847 1073.38 473.031 1073.53 cv
ef
2420.29 1071.75 mo
2423.1 1071.9 2427.07 1070.9 2427.4 1073.53 cv
2424.74 1073.23 2420.83 1074.16 2420.29 1071.75 cv
ef
458.805 1075.31 mo
459.355 1072.89 463.257 1073.83 465.918 1073.53 cv
465.588 1076.16 461.621 1075.16 458.805 1075.31 cv
ef
2432.73 1073.53 mo
2435.55 1073.68 2439.52 1072.67 2439.85 1075.31 cv
2437.19 1075 2433.28 1075.94 2432.73 1073.53 cv
ef
446.357 1077.08 mo
446.907 1074.67 450.809 1075.61 453.47 1075.31 cv
453.14 1077.94 449.172 1076.94 446.357 1077.08 cv
ef
2446.96 1075.31 mo
2449.78 1075.46 2453.74 1074.45 2454.07 1077.08 cv
2451.41 1076.78 2447.51 1077.72 2446.96 1075.31 cv
ef
432.13 1078.86 mo
432.681 1076.45 436.583 1077.39 439.244 1077.08 cv
438.913 1079.72 434.946 1078.72 432.13 1078.86 cv
ef
2459.41 1077.08 mo
2462.22 1077.23 2466.19 1076.23 2466.52 1078.86 cv
2463.86 1078.56 2459.96 1079.5 2459.41 1077.08 cv
ef
419.682 1080.64 mo
420.232 1078.23 424.134 1079.17 426.795 1078.86 cv
426.465 1081.5 422.498 1080.49 419.682 1080.64 cv
ef
407.234 1082.42 mo
407.784 1080.01 411.687 1080.94 414.347 1080.64 cv
414.017 1083.28 410.05 1082.27 407.234 1082.42 cv
ef
394.786 1084.2 mo
395.336 1081.79 399.238 1082.72 401.899 1082.42 cv
401.568 1085.05 397.602 1084.05 394.786 1084.2 cv
ef
382.337 1085.98 mo
382.888 1083.56 386.79 1084.5 389.451 1084.2 cv
389.12 1086.83 385.153 1085.83 382.337 1085.98 cv
ef
369.889 1087.75 mo
370.439 1085.34 374.342 1086.28 377.002 1085.98 cv
376.672 1088.61 372.705 1087.61 369.889 1087.75 cv
ef
357.441 1089.53 mo
357.991 1087.12 361.894 1088.06 364.554 1087.75 cv
364.224 1090.39 360.257 1089.39 357.441 1089.53 cv
ef
2558.99 1091.31 mo
2561.81 1091.46 2565.78 1090.46 2566.11 1093.09 cv
2563.45 1092.79 2559.54 1093.72 2558.99 1091.31 cv
ef
2582.11 1094.87 mo
2584.93 1095.02 2588.89 1094.01 2589.22 1096.65 cv
2586.56 1096.34 2582.66 1097.28 2582.11 1094.87 cv
ef
1307.06 1098.42 mo
1310.1 1094.36 1320.63 1097.77 1326.62 1096.65 cv
1333.74 1096.65 1340.85 1096.65 1347.96 1096.65 cv
1362.19 1096.65 1376.42 1096.65 1390.64 1096.65 cv
1419.09 1096.65 1447.55 1096.65 1476 1096.65 cv
1504.45 1096.65 1532.91 1096.65 1561.36 1096.65 cv
1575.59 1096.65 1589.81 1096.65 1604.04 1096.65 cv
1614.07 1096.84 1628.34 1096.38 1636.05 1096.65 cv
1638.98 1096.75 1643.37 1094.95 1644.94 1098.42 cv
1532.31 1098.42 1419.69 1098.42 1307.06 1098.42 cv
ef
1164.8 1100.2 mo
1166.6 1096.86 1173.14 1098.52 1177.24 1098.42 cv
1183.11 1098.29 1188.54 1098.53 1193.25 1098.42 cv
1203.92 1098.42 1214.59 1098.42 1225.26 1098.42 cv
1225.26 1099.02 1225.26 1099.61 1225.26 1100.2 cv
1205.1 1100.2 1184.95 1100.2 1164.8 1100.2 cv
ef
1225.26 1100.2 mo
1225.26 1099.61 1225.26 1099.02 1225.26 1098.42 cv
1237.71 1098.42 1250.15 1098.42 1262.6 1098.42 cv
1259.36 1101.76 1251.82 1100.13 1244.82 1100.2 cv
1238.54 1100.27 1231.18 1100.15 1225.26 1100.2 cv
.22 .169 .18 0 cmyk
ef
1689.4 1098.42 mo
1701.85 1098.42 1714.29 1098.42 1726.74 1098.42 cv
1726.74 1099.02 1726.74 1099.61 1726.74 1100.2 cv
1717.35 1099.77 1706.86 1100.77 1696.51 1100.2 cv
1693.7 1100.05 1689.73 1101.06 1689.4 1098.42 cv
ef
1726.74 1100.2 mo
1726.74 1099.61 1726.74 1099.02 1726.74 1098.42 cv
1736.82 1098.42 1746.9 1098.42 1756.97 1098.42 cv
1762.31 1098.42 1767.64 1098.42 1772.98 1098.42 cv
1777.23 1099.51 1785.88 1096.19 1787.21 1100.2 cv
1767.05 1100.2 1746.9 1100.2 1726.74 1100.2 cv
.624 .475 .192 .008 cmyk
ef
2605.23 1098.42 mo
2608.04 1098.57 2612.01 1097.57 2612.34 1100.2 cv
2609.68 1099.9 2605.78 1100.84 2605.23 1098.42 cv
ef
1068.77 1101.98 mo
1072.39 1097.9 1083.53 1101.34 1090.11 1100.2 cv
1097.81 1100.2 1105.52 1100.2 1113.22 1100.2 cv
1113.22 1100.8 1113.22 1101.39 1113.22 1101.98 cv
1098.41 1101.98 1083.59 1101.98 1068.77 1101.98 cv
ef
1113.22 1101.98 mo
1113.22 1101.39 1113.22 1100.8 1113.22 1100.2 cv
1121.52 1100.2 1129.82 1100.2 1138.12 1100.2 cv
1134.65 1104.26 1121.43 1100.88 1113.22 1101.98 cv
.22 .169 .18 0 cmyk
ef
1813.88 1100.2 mo
1822.18 1100.2 1830.48 1100.2 1838.78 1100.2 cv
1838.78 1100.8 1838.78 1101.39 1838.78 1101.98 cv
1834.69 1101.87 1829.88 1102.12 1824.55 1101.98 cv
1820.82 1101.89 1815.29 1103.58 1813.88 1100.2 cv
ef
1838.78 1101.98 mo
1838.78 1101.39 1838.78 1100.8 1838.78 1100.2 cv
1846.48 1100.2 1854.19 1100.2 1861.89 1100.2 cv
1865.45 1100.2 1869.01 1100.2 1872.56 1100.2 cv
1875.69 1101.23 1883.01 1098.05 1883.23 1101.98 cv
1868.42 1101.98 1853.6 1101.98 1838.78 1101.98 cv
.624 .475 .192 .008 cmyk
ef
992.299 1103.76 mo
994.765 1099.71 1004.68 1103.1 1010.08 1101.98 cv
1016.6 1101.98 1023.12 1101.98 1029.64 1101.98 cv
1029.64 1102.57 1029.64 1103.17 1029.64 1103.76 cv
1017.2 1103.76 1004.75 1103.76 992.299 1103.76 cv
ef
1029.64 1103.76 mo
1029.64 1103.17 1029.64 1102.57 1029.64 1101.98 cv
1036.16 1101.98 1042.68 1101.98 1049.21 1101.98 cv
1046.16 1106.05 1035.63 1102.63 1029.64 1103.76 cv
.22 .169 .18 0 cmyk
ef
1902.8 1101.98 mo
1909.32 1101.98 1915.84 1101.98 1922.36 1101.98 cv
1922.36 1102.57 1922.36 1103.17 1922.36 1103.76 cv
1916.37 1102.63 1905.84 1106.05 1902.8 1101.98 cv
ef
1922.36 1103.76 mo
1922.36 1103.17 1922.36 1102.57 1922.36 1101.98 cv
1928.88 1101.98 1935.4 1101.98 1941.92 1101.98 cv
1947.32 1103.1 1957.24 1099.71 1959.7 1103.76 cv
1947.25 1103.76 1934.8 1103.76 1922.36 1103.76 cv
.624 .475 .192 .008 cmyk
ef
926.501 1105.54 mo
927.826 1101.53 936.476 1104.84 940.728 1103.76 cv
946.656 1103.76 952.583 1103.76 958.511 1103.76 cv
958.511 1104.35 958.511 1104.95 958.511 1105.54 cv
947.841 1105.54 937.171 1105.54 926.501 1105.54 cv
ef
958.511 1105.54 mo
958.511 1104.95 958.511 1104.35 958.511 1103.76 cv
963.846 1103.76 969.181 1103.76 974.516 1103.76 cv
972.624 1107.8 963.337 1104.44 958.511 1105.54 cv
.22 .169 .18 0 cmyk
ef
1975.71 1103.76 mo
1981.63 1103.76 1987.56 1103.76 1993.49 1103.76 cv
1993.49 1104.35 1993.49 1104.95 1993.49 1105.54 cv
1988.08 1104.42 1978.17 1107.81 1975.71 1103.76 cv
ef
1993.49 1105.54 mo
1993.49 1104.95 1993.49 1104.35 1993.49 1103.76 cv
1998.82 1103.76 2004.16 1103.76 2009.49 1103.76 cv
2014.32 1104.86 2023.61 1101.5 2025.5 1105.54 cv
2014.83 1105.54 2004.16 1105.54 1993.49 1105.54 cv
.624 .475 .192 .008 cmyk
ef
867.817 1107.32 mo
869.623 1103.98 876.167 1105.62 880.265 1105.54 cv
886.131 1105.42 891.559 1105.63 896.27 1105.54 cv
896.27 1106.13 896.27 1106.72 896.27 1107.32 cv
886.786 1107.32 877.301 1107.32 867.817 1107.32 cv
ef
896.27 1107.32 mo
896.27 1106.72 896.27 1106.13 896.27 1105.54 cv
901.012 1105.54 905.754 1105.54 910.497 1105.54 cv
909.172 1109.55 900.522 1106.23 896.27 1107.32 cv
.22 .169 .18 0 cmyk
ef
2039.73 1105.54 mo
2045.06 1105.54 2050.4 1105.54 2055.73 1105.54 cv
2055.73 1106.13 2055.73 1106.72 2055.73 1107.32 cv
2050.9 1106.21 2041.62 1109.57 2039.73 1105.54 cv
ef
2055.73 1107.32 mo
2055.73 1106.72 2055.73 1106.13 2055.73 1105.54 cv
2059.65 1105.54 2065.55 1105.54 2069.96 1105.54 cv
2075.69 1105.54 2081.65 1104.04 2084.18 1107.32 cv
2074.7 1107.32 2065.21 1107.32 2055.73 1107.32 cv
.624 .475 .192 .008 cmyk
ef
814.468 1109.09 mo
814.689 1105.17 822.011 1108.34 825.138 1107.32 cv
829.88 1107.32 834.622 1107.32 839.364 1107.32 cv
839.364 1107.91 839.364 1108.5 839.364 1109.09 cv
831.065 1109.09 822.767 1109.09 814.468 1109.09 cv
ef
839.364 1109.09 mo
839.364 1108.5 839.364 1107.91 839.364 1107.32 cv
844.106 1107.32 848.849 1107.32 853.591 1107.32 cv
852.266 1111.33 843.616 1108.01 839.364 1109.09 cv
.22 .169 .18 0 cmyk
ef
2096.63 1107.32 mo
2101.37 1107.32 2106.12 1107.32 2110.86 1107.32 cv
2110.86 1107.91 2110.86 1108.5 2110.86 1109.09 cv
2106.61 1108.01 2097.96 1111.33 2096.63 1107.32 cv
ef
2110.86 1109.09 mo
2110.86 1108.5 2110.86 1107.91 2110.86 1107.32 cv
2119.66 1108.4 2133.43 1105.06 2137.53 1109.09 cv
2128.64 1109.09 2119.75 1109.09 2110.86 1109.09 cv
.624 .475 .192 .008 cmyk
ef
764.675 1110.87 mo
768.883 1106.78 780.636 1110.24 787.793 1109.09 cv
787.793 1109.69 787.793 1110.28 787.793 1110.87 cv
780.087 1110.87 772.381 1110.87 764.675 1110.87 cv
ef
787.793 1110.87 mo
787.793 1110.28 787.793 1109.69 787.793 1109.09 cv
792.535 1109.09 797.277 1109.09 802.02 1109.09 cv
800.695 1113.11 792.045 1109.79 787.793 1110.87 cv
.22 .169 .18 0 cmyk
ef
2149.98 1109.09 mo
2154.13 1109.09 2158.28 1109.09 2162.43 1109.09 cv
2162.43 1109.69 2162.43 1110.28 2162.43 1110.87 cv
2158.75 1109.82 2150.75 1113.07 2149.98 1109.09 cv
ef
2162.43 1110.87 mo
2162.43 1110.28 2162.43 1109.69 2162.43 1109.09 cv
2169.59 1110.24 2181.34 1106.78 2185.55 1110.87 cv
2177.84 1110.87 2170.14 1110.87 2162.43 1110.87 cv
.624 .475 .192 .008 cmyk
ef
718.438 1112.65 mo
722.647 1108.56 734.399 1112.01 741.557 1110.87 cv
741.557 1111.47 741.557 1112.06 741.557 1112.65 cv
733.851 1112.65 726.145 1112.65 718.438 1112.65 cv
ef
741.557 1112.65 mo
741.557 1112.06 741.557 1111.47 741.557 1110.87 cv
745.113 1110.87 748.67 1110.87 752.227 1110.87 cv
752.005 1114.8 744.683 1111.63 741.557 1112.65 cv
.22 .169 .18 0 cmyk
ef
2198 1110.87 mo
2202.14 1110.87 2206.29 1110.87 2210.44 1110.87 cv
2210.44 1111.47 2210.44 1112.06 2210.44 1112.65 cv
2206.76 1111.59 2198.76 1114.85 2198 1110.87 cv
ef
2210.44 1112.65 mo
2210.44 1112.06 2210.44 1111.47 2210.44 1110.87 cv
2217.02 1112.01 2228.16 1108.57 2231.78 1112.65 cv
2224.67 1112.65 2217.56 1112.65 2210.44 1112.65 cv
.624 .475 .192 .008 cmyk
ef
673.981 1114.43 mo
677.606 1110.35 688.749 1113.79 695.321 1112.65 cv
695.321 1113.24 695.321 1113.84 695.321 1114.43 cv
688.208 1114.43 681.094 1114.43 673.981 1114.43 cv
ef
695.321 1114.43 mo
695.321 1113.84 695.321 1113.24 695.321 1112.65 cv
699.47 1112.65 703.62 1112.65 707.769 1112.65 cv
707.003 1116.63 699.005 1113.37 695.321 1114.43 cv
.22 .169 .18 0 cmyk
ef
2242.45 1112.65 mo
2246.6 1112.65 2250.75 1112.65 2254.9 1112.65 cv
2254.9 1113.24 2254.9 1113.84 2254.9 1114.43 cv
2251.22 1113.37 2243.22 1116.63 2242.45 1112.65 cv
ef
2254.9 1114.43 mo
2254.9 1113.84 2254.9 1113.24 2254.9 1112.65 cv
2260.89 1113.78 2271.42 1110.36 2274.46 1114.43 cv
2267.94 1114.43 2261.42 1114.43 2254.9 1114.43 cv
.624 .475 .192 .008 cmyk
ef
633.08 1116.21 mo
636.705 1112.13 647.848 1115.56 654.419 1114.43 cv
654.419 1115.02 654.419 1115.62 654.419 1116.21 cv
647.306 1116.21 640.193 1116.21 633.08 1116.21 cv
ef
654.419 1116.21 mo
654.419 1115.62 654.419 1115.02 654.419 1114.43 cv
657.976 1114.43 661.533 1114.43 665.089 1114.43 cv
664.868 1118.36 657.546 1115.18 654.419 1116.21 cv
.22 .169 .18 0 cmyk
ef
2285.13 1114.43 mo
2288.69 1114.43 2292.25 1114.43 2295.8 1114.43 cv
2295.8 1115.02 2295.8 1115.62 2295.8 1116.21 cv
2292.68 1115.18 2285.35 1118.36 2285.13 1114.43 cv
ef
2295.8 1116.21 mo
2295.8 1115.62 2295.8 1115.02 2295.8 1114.43 cv
2301.79 1115.56 2312.32 1112.14 2315.36 1116.21 cv
2308.84 1116.21 2302.32 1116.21 2295.8 1116.21 cv
.624 .475 .192 .008 cmyk
ef
593.957 1117.99 mo
597 1113.92 607.531 1117.33 613.518 1116.21 cv
613.518 1116.8 613.518 1117.39 613.518 1117.99 cv
606.998 1117.99 600.477 1117.99 593.957 1117.99 cv
ef
613.518 1117.99 mo
613.518 1117.39 613.518 1116.8 613.518 1116.21 cv
617.075 1116.21 620.631 1116.21 624.188 1116.21 cv
623.966 1120.14 616.645 1116.96 613.518 1117.99 cv
.22 .169 .18 0 cmyk
ef
2326.03 1116.21 mo
2329 1116.21 2331.96 1116.21 2334.93 1116.21 cv
2334.93 1116.8 2334.93 1117.39 2334.93 1117.99 cv
2332.34 1117.01 2325.73 1120.06 2326.03 1116.21 cv
ef
2334.93 1117.99 mo
2334.93 1117.39 2334.93 1116.8 2334.93 1116.21 cv
2340.91 1117.33 2351.44 1113.92 2354.49 1117.99 cv
2347.97 1117.99 2341.45 1117.99 2334.93 1117.99 cv
.624 .475 .192 .008 cmyk
ef
556.612 1119.76 mo
559.656 1115.7 570.187 1119.11 576.174 1117.99 cv
576.174 1118.58 576.174 1119.17 576.174 1119.76 cv
569.653 1119.76 563.133 1119.76 556.612 1119.76 cv
ef
576.174 1119.76 mo
576.174 1119.17 576.174 1118.58 576.174 1117.99 cv
579.138 1117.99 582.102 1117.99 585.065 1117.99 cv
585.365 1121.84 578.758 1118.79 576.174 1119.76 cv
.22 .169 .18 0 cmyk
ef
2363.38 1117.99 mo
2366.94 1117.99 2370.49 1117.99 2374.05 1117.99 cv
2374.05 1118.58 2374.05 1119.17 2374.05 1119.76 cv
2370.92 1118.74 2363.6 1121.91 2363.38 1117.99 cv
ef
2374.05 1119.76 mo
2374.05 1119.17 2374.05 1118.58 2374.05 1117.99 cv
2379.45 1119.1 2389.37 1115.71 2391.83 1119.76 cv
2385.9 1119.76 2379.98 1119.76 2374.05 1119.76 cv
.624 .475 .192 .008 cmyk
ef
521.046 1121.54 mo
523.512 1117.49 533.424 1120.88 538.829 1119.76 cv
538.829 1120.36 538.829 1120.95 538.829 1121.54 cv
532.901 1121.54 526.974 1121.54 521.046 1121.54 cv
ef
538.829 1121.54 mo
538.829 1120.95 538.829 1120.36 538.829 1119.76 cv
541.793 1119.76 544.757 1119.76 547.721 1119.76 cv
548.021 1123.62 541.413 1120.57 538.829 1121.54 cv
.22 .169 .18 0 cmyk
ef
2400.72 1119.76 mo
2403.69 1119.76 2406.65 1119.76 2409.62 1119.76 cv
2409.62 1120.36 2409.62 1120.95 2409.62 1121.54 cv
2407.03 1120.57 2400.42 1123.62 2400.72 1119.76 cv
ef
2409.62 1121.54 mo
2409.62 1120.95 2409.62 1120.36 2409.62 1119.76 cv
2415.02 1120.88 2424.93 1117.49 2427.4 1121.54 cv
2421.47 1121.54 2415.54 1121.54 2409.62 1121.54 cv
.624 .475 .192 .008 cmyk
ef
487.258 1123.32 mo
489.15 1119.29 498.437 1122.64 503.263 1121.54 cv
503.263 1122.14 503.263 1122.73 503.263 1123.32 cv
497.928 1123.32 492.593 1123.32 487.258 1123.32 cv
ef
503.263 1123.32 mo
503.263 1122.73 503.263 1122.14 503.263 1121.54 cv
506.227 1121.54 509.19 1121.54 512.154 1121.54 cv
512.454 1125.4 505.847 1122.35 503.263 1123.32 cv
.22 .169 .18 0 cmyk
ef
2434.51 1121.54 mo
2437.48 1121.54 2440.44 1121.54 2443.4 1121.54 cv
2443.4 1122.14 2443.4 1122.73 2443.4 1123.32 cv
2440.82 1122.35 2434.21 1125.4 2434.51 1121.54 cv
ef
2443.4 1123.32 mo
2443.4 1122.73 2443.4 1122.14 2443.4 1121.54 cv
2448.81 1122.66 2458.72 1119.27 2461.19 1123.32 cv
2455.26 1123.32 2449.33 1123.32 2443.4 1123.32 cv
.624 .475 .192 .008 cmyk
ef
453.47 1125.1 mo
455.362 1121.06 464.648 1124.42 469.475 1123.32 cv
469.475 1123.91 469.475 1124.51 469.475 1125.1 cv
464.14 1125.1 458.805 1125.1 453.47 1125.1 cv
ef
469.475 1125.1 mo
469.475 1124.51 469.475 1123.91 469.475 1123.32 cv
472.438 1123.32 475.402 1123.32 478.366 1123.32 cv
478.666 1127.18 472.059 1124.13 469.475 1125.1 cv
.22 .169 .18 0 cmyk
ef
2468.3 1123.32 mo
2471.26 1123.32 2474.23 1123.32 2477.19 1123.32 cv
2477.19 1123.91 2477.19 1124.51 2477.19 1125.1 cv
2474.61 1124.13 2468 1127.18 2468.3 1123.32 cv
ef
2477.19 1125.1 mo
2477.19 1124.51 2477.19 1123.91 2477.19 1123.32 cv
2482.02 1124.42 2491.3 1121.06 2493.2 1125.1 cv
2487.86 1125.1 2482.53 1125.1 2477.19 1125.1 cv
.624 .475 .192 .008 cmyk
ef
421.46 1126.88 mo
423.352 1122.84 432.639 1126.2 437.465 1125.1 cv
437.465 1125.69 437.465 1126.29 437.465 1126.88 cv
432.13 1126.88 426.795 1126.88 421.46 1126.88 cv
ef
437.465 1126.88 mo
437.465 1126.29 437.465 1125.69 437.465 1125.1 cv
440.429 1125.1 443.393 1125.1 446.357 1125.1 cv
446.656 1128.96 440.049 1125.91 437.465 1126.88 cv
.22 .169 .18 0 cmyk
ef
2500.31 1125.1 mo
2503.27 1125.1 2506.24 1125.1 2509.2 1125.1 cv
2509.2 1125.69 2509.2 1126.29 2509.2 1126.88 cv
2506.62 1125.91 2500.01 1128.96 2500.31 1125.1 cv
ef
2509.2 1126.88 mo
2509.2 1126.29 2509.2 1125.69 2509.2 1125.1 cv
2514.03 1126.2 2523.31 1122.84 2525.21 1126.88 cv
2519.87 1126.88 2514.54 1126.88 2509.2 1126.88 cv
.624 .475 .192 .008 cmyk
ef
389.451 1128.66 mo
391.342 1124.62 400.629 1127.98 405.456 1126.88 cv
405.456 1127.47 405.456 1128.06 405.456 1128.66 cv
400.121 1128.66 394.786 1128.66 389.451 1128.66 cv
ef
405.456 1128.66 mo
405.456 1128.06 405.456 1127.47 405.456 1126.88 cv
408.419 1126.88 411.383 1126.88 414.347 1126.88 cv
414.647 1130.73 408.04 1127.68 405.456 1128.66 cv
.22 .169 .18 0 cmyk
ef
2532.32 1126.88 mo
2534.69 1126.88 2537.06 1126.88 2539.43 1126.88 cv
2539.43 1127.47 2539.43 1128.06 2539.43 1128.66 cv
2536.62 1128.51 2532.65 1129.51 2532.32 1126.88 cv
ef
2539.43 1128.66 mo
2539.43 1128.06 2539.43 1127.47 2539.43 1126.88 cv
2544.26 1127.98 2553.54 1124.62 2555.44 1128.66 cv
2550.1 1128.66 2544.77 1128.66 2539.43 1128.66 cv
.624 .475 .192 .008 cmyk
ef
359.219 1130.43 mo
361.111 1126.4 370.398 1129.76 375.224 1128.66 cv
375.224 1129.25 375.224 1129.84 375.224 1130.43 cv
369.889 1130.43 364.554 1130.43 359.219 1130.43 cv
ef
375.224 1130.43 mo
375.224 1129.84 375.224 1129.25 375.224 1128.66 cv
377.595 1128.66 379.966 1128.66 382.337 1128.66 cv
381.787 1131.07 377.885 1130.13 375.224 1130.43 cv
.22 .169 .18 0 cmyk
ef
2562.55 1128.66 mo
2564.92 1128.66 2567.29 1128.66 2569.66 1128.66 cv
2569.66 1129.25 2569.66 1129.84 2569.66 1130.43 cv
2566.85 1130.29 2562.88 1131.29 2562.55 1128.66 cv
ef
2569.66 1130.43 mo
2569.66 1129.84 2569.66 1129.25 2569.66 1128.66 cv
2573.92 1129.74 2582.57 1126.42 2583.89 1130.43 cv
2579.15 1130.43 2574.41 1130.43 2569.66 1130.43 cv
.624 .475 .192 .008 cmyk
ef
330.766 1132.21 mo
332.091 1128.2 340.741 1131.52 344.993 1130.43 cv
344.993 1131.03 344.993 1131.62 344.993 1132.21 cv
340.25 1132.21 335.508 1132.21 330.766 1132.21 cv
ef
344.993 1132.21 mo
344.993 1131.62 344.993 1131.03 344.993 1130.43 cv
347.364 1130.43 349.735 1130.43 352.106 1130.43 cv
351.556 1132.85 347.654 1131.91 344.993 1132.21 cv
.22 .169 .18 0 cmyk
ef
2591 1130.43 mo
2593.37 1130.43 2595.75 1130.43 2598.12 1130.43 cv
2598.12 1131.03 2598.12 1131.62 2598.12 1132.21 cv
2595.3 1132.06 2591.33 1133.07 2591 1130.43 cv
ef
2598.12 1132.21 mo
2598.12 1131.62 2598.12 1131.03 2598.12 1130.43 cv
2602.37 1131.52 2611.02 1128.2 2612.34 1132.21 cv
2607.6 1132.21 2602.86 1132.21 2598.12 1132.21 cv
.624 .475 .192 .008 cmyk
ef
302.313 1133.99 mo
303.638 1129.98 312.288 1133.3 316.54 1132.21 cv
316.54 1132.81 316.54 1133.4 316.54 1133.99 cv
311.798 1133.99 307.056 1133.99 302.313 1133.99 cv
ef
316.54 1133.99 mo
316.54 1133.4 316.54 1132.81 316.54 1132.21 cv
318.911 1132.21 321.282 1132.21 323.653 1132.21 cv
323.103 1134.63 319.201 1133.69 316.54 1133.99 cv
.22 .169 .18 0 cmyk
ef
2619.46 1132.21 mo
2621.83 1132.21 2624.2 1132.21 2626.57 1132.21 cv
2626.57 1132.81 2626.57 1133.4 2626.57 1133.99 cv
2623.75 1133.84 2619.79 1134.85 2619.46 1132.21 cv
ef
2626.57 1133.99 mo
2626.57 1133.4 2626.57 1132.81 2626.57 1132.21 cv
2630.82 1133.3 2639.47 1129.98 2640.8 1133.99 cv
2636.05 1133.99 2631.31 1133.99 2626.57 1133.99 cv
.624 .475 .192 .008 cmyk
ef
273.86 1135.77 mo
275.185 1131.76 283.835 1135.07 288.087 1133.99 cv
288.087 1134.58 288.087 1135.18 288.087 1135.77 cv
283.345 1135.77 278.603 1135.77 273.86 1135.77 cv
ef
288.087 1135.77 mo
288.087 1135.18 288.087 1134.58 288.087 1133.99 cv
290.458 1133.99 292.829 1133.99 295.2 1133.99 cv
294.65 1136.4 290.748 1135.47 288.087 1135.77 cv
.22 .169 .18 0 cmyk
ef
2646.13 1133.99 mo
2648.5 1133.99 2650.87 1133.99 2653.24 1133.99 cv
2653.24 1134.58 2653.24 1135.18 2653.24 1135.77 cv
2650.43 1135.62 2646.46 1136.62 2646.13 1133.99 cv
ef
2653.24 1135.77 mo
2653.24 1135.18 2653.24 1134.58 2653.24 1133.99 cv
2657.5 1135.07 2666.15 1131.76 2667.47 1135.77 cv
2662.73 1135.77 2657.99 1135.77 2653.24 1135.77 cv
.624 .475 .192 .008 cmyk
ef
247.186 1137.55 mo
247.952 1133.57 255.95 1136.83 259.634 1135.77 cv
259.634 1136.36 259.634 1136.96 259.634 1137.55 cv
255.484 1137.55 251.335 1137.55 247.186 1137.55 cv
ef
259.634 1137.55 mo
259.634 1136.96 259.634 1136.36 259.634 1135.77 cv
262.005 1135.77 264.376 1135.77 266.747 1135.77 cv
266.197 1138.18 262.294 1137.25 259.634 1137.55 cv
.22 .169 .18 0 cmyk
ef
2672.81 1135.77 mo
2675.18 1135.77 2677.55 1135.77 2679.92 1135.77 cv
2679.92 1136.36 2679.92 1136.96 2679.92 1137.55 cv
2677.1 1137.4 2673.14 1138.4 2672.81 1135.77 cv
ef
2679.92 1137.55 mo
2679.92 1136.96 2679.92 1136.36 2679.92 1135.77 cv
2683.6 1136.83 2691.6 1133.57 2692.37 1137.55 cv
2688.22 1137.55 2684.07 1137.55 2679.92 1137.55 cv
.624 .475 .192 .008 cmyk
ef
220.511 1139.33 mo
221.277 1135.35 229.275 1138.61 232.959 1137.55 cv
232.959 1138.14 232.959 1138.73 232.959 1139.33 cv
228.81 1139.33 224.66 1139.33 220.511 1139.33 cv
ef
232.959 1139.33 mo
232.959 1138.73 232.959 1138.14 232.959 1137.55 cv
235.33 1137.55 237.701 1137.55 240.072 1137.55 cv
239.522 1139.96 235.62 1139.02 232.959 1139.33 cv
.22 .169 .18 0 cmyk
ef
2719.04 1139.33 mo
2714.79 1138.24 2706.14 1141.56 2704.81 1137.55 cv
2709.07 1138.63 2717.72 1135.32 2719.04 1139.33 cv
.624 .475 .192 .008 cmyk
ef
193.836 1141.1 mo
194.602 1137.13 202.6 1140.38 206.284 1139.33 cv
206.284 1139.92 206.284 1140.51 206.284 1141.1 cv
202.135 1141.1 197.985 1141.1 193.836 1141.1 cv
ef
206.284 1141.1 mo
206.284 1140.51 206.284 1139.92 206.284 1139.33 cv
208.655 1139.33 211.026 1139.33 213.397 1139.33 cv
212.847 1141.74 208.945 1140.8 206.284 1141.1 cv
.22 .169 .18 0 cmyk
ef
2742.16 1141.1 mo
2738.48 1140.05 2730.48 1143.3 2729.71 1139.33 cv
2733.4 1140.38 2741.39 1137.13 2742.16 1141.1 cv
.624 .475 .192 .008 cmyk
ef
168.94 1142.88 mo
169.706 1138.91 177.704 1142.16 181.388 1141.1 cv
181.388 1141.7 181.388 1142.29 181.388 1142.88 cv
177.239 1142.88 173.089 1142.88 168.94 1142.88 cv
ef
181.388 1142.88 mo
181.388 1142.29 181.388 1141.7 181.388 1141.1 cv
183.759 1141.1 186.13 1141.1 188.501 1141.1 cv
187.951 1143.52 184.049 1142.58 181.388 1142.88 cv
.22 .169 .18 0 cmyk
ef
2747.49 1141.1 mo
2749.87 1141.1 2752.24 1141.1 2754.61 1141.1 cv
2754.61 1141.7 2754.61 1142.29 2754.61 1142.88 cv
2751.79 1142.73 2747.82 1143.74 2747.49 1141.1 cv
ef
2754.61 1142.88 mo
2754.61 1142.29 2754.61 1141.7 2754.61 1141.1 cv
2758.29 1142.16 2766.29 1138.91 2767.06 1142.88 cv
2762.91 1142.88 2758.76 1142.88 2754.61 1142.88 cv
.624 .475 .192 .008 cmyk
ef
144.043 1144.66 mo
144.809 1140.68 152.808 1143.94 156.492 1142.88 cv
155.726 1146.86 147.728 1143.6 144.043 1144.66 cv
ef
2790.17 1144.66 mo
2786.49 1143.6 2778.49 1146.86 2777.73 1142.88 cv
2781.41 1143.94 2789.41 1140.68 2790.17 1144.66 cv
ef
119.147 1146.44 mo
119.913 1142.46 127.911 1145.72 131.595 1144.66 cv
130.829 1148.64 122.831 1145.38 119.147 1146.44 cv
ef
2811.51 1146.44 mo
2808.39 1145.42 2801.07 1148.59 2800.84 1144.66 cv
2803.97 1145.68 2811.29 1142.51 2811.51 1146.44 cv
ef
94.25 1148.22 mo
95.016 1144.24 103.015 1147.5 106.699 1146.44 cv
106.699 1147.03 106.699 1147.62 106.699 1148.22 cv
102.549 1148.22 98.4 1148.22 94.25 1148.22 cv
ef
106.699 1148.22 mo
106.699 1147.62 106.699 1147.03 106.699 1146.44 cv
109.07 1146.44 111.441 1146.44 113.812 1146.44 cv
113.262 1148.85 109.359 1147.91 106.699 1148.22 cv
.22 .169 .18 0 cmyk
ef
2816.85 1146.44 mo
2819.22 1146.44 2821.59 1146.44 2823.96 1146.44 cv
2823.96 1147.03 2823.96 1147.62 2823.96 1148.22 cv
2821.15 1148.07 2817.18 1149.07 2816.85 1146.44 cv
ef
2823.96 1148.22 mo
2823.96 1147.62 2823.96 1147.03 2823.96 1146.44 cv
2827.09 1147.46 2834.41 1144.29 2834.63 1148.22 cv
2831.08 1148.22 2827.52 1148.22 2823.96 1148.22 cv
.624 .475 .192 .008 cmyk
ef
71.132 1150 mo
71.898 1146.02 79.896 1149.28 83.581 1148.22 cv
82.815 1152.19 74.817 1148.94 71.132 1150 cv
ef
2838.19 1148.22 mo
2840.56 1148.22 2842.93 1148.22 2845.3 1148.22 cv
2845.3 1148.81 2845.3 1149.4 2845.3 1150 cv
2842.49 1149.85 2838.52 1150.85 2838.19 1148.22 cv
.22 .169 .18 0 cmyk
ef
2845.3 1150 mo
2845.3 1149.4 2845.3 1148.81 2845.3 1148.22 cv
2848.43 1149.24 2855.75 1146.07 2855.97 1150 cv
2852.42 1150 2848.86 1150 2845.3 1150 cv
.624 .475 .192 .008 cmyk
ef
48.015 1151.77 mo
48.78 1147.8 56.778 1151.05 60.463 1150 cv
59.697 1153.97 51.699 1150.72 48.015 1151.77 cv
ef
2875.53 1151.77 mo
2872.41 1150.75 2865.08 1153.92 2864.86 1150 cv
2867.99 1151.02 2875.31 1147.85 2875.53 1151.77 cv
ef
14.227 1153.55 mo
13.46 1157.53 5.462 1154.27 1.778 1155.33 cv
3.575 1152.39 9.331 1153.4 12.448 1151.77 cv
12.121 1153.29 13.142 1153.45 14.227 1153.55 cv
ef
24.896 1153.55 mo
25.662 1149.58 33.661 1152.83 37.345 1151.77 cv
36.578 1155.75 28.581 1152.49 24.896 1153.55 cv
ef
2895.09 1153.55 mo
2895.49 1152.17 2896.58 1151.49 2898.65 1151.77 cv
2900.43 1151.77 2902.21 1151.77 2903.99 1151.77 cv
2903.99 1152.37 2903.99 1152.96 2903.99 1153.55 cv
2901.02 1153.55 2898.06 1153.55 2895.09 1153.55 cv
.988 .749 .267 .102 cmyk
ef
2903.99 1153.55 mo
2903.99 1152.96 2903.99 1152.37 2903.99 1151.77 cv
2905.85 1153.63 2919.23 1152.9 2914.66 1155.33 cv
2910.27 1155.57 2906.09 1155.6 2903.99 1153.55 cv
.624 .475 .192 .008 cmyk
ef
2887.98 1030.85 mo
2891.11 1029.83 2898.43 1033 2898.65 1029.07 cv
2901.18 1028.92 2903.69 1028.78 2903.99 1030.85 cv
2901.46 1030.7 2898.95 1030.55 2898.65 1032.63 cv
2895.53 1031.6 2888.2 1034.78 2887.98 1030.85 cv
.22 .169 .18 0 cmyk
ef
2886.2 1151.77 mo
2888.79 1150.8 2895.39 1153.85 2895.09 1150 cv
2897.16 1149.71 2898.26 1150.39 2898.65 1151.77 cv
2896.58 1151.49 2895.49 1152.17 2895.09 1153.55 cv
2892.51 1152.58 2885.9 1155.63 2886.2 1151.77 cv
.624 .475 .192 .008 cmyk
ef
2466.52 1078.86 mo
2498.87 1081.49 2528.13 1087.2 2558.99 1091.31 cv
2559.54 1093.72 2563.45 1092.79 2566.11 1093.09 cv
2573.26 1091.87 2576.26 1094.79 2582.11 1094.87 cv
2582.66 1097.28 2586.56 1096.34 2589.22 1096.65 cv
2596.38 1095.42 2599.38 1098.35 2605.23 1098.42 cv
2605.78 1100.84 2609.68 1099.9 2612.34 1100.2 cv
2625.18 1100.71 2637.3 1103.5 2649.69 1105.54 cv
2670.59 1108.97 2690.73 1112.19 2711.93 1116.21 cv
2729.69 1119.57 2754.34 1123.21 2774.17 1126.88 cv
2788.18 1129.47 2802.84 1132.63 2818.63 1135.77 cv
2820.29 1136.1 2822.35 1135.28 2823.96 1135.77 cv
2827.19 1136.75 2837.81 1137.93 2845.3 1139.33 cv
2845.52 1139.37 2845.63 1141.03 2847.08 1141.1 cv
2849.37 1141.22 2851.95 1140.69 2854.19 1141.1 cv
2854.41 1141.14 2854.53 1142.81 2855.97 1142.88 cv
2867.92 1143.51 2882.25 1148.51 2895.09 1150 cv
2895.39 1153.85 2888.79 1150.8 2886.2 1151.77 cv
2882.65 1151.77 2879.09 1151.77 2875.53 1151.77 cv
2875.31 1147.85 2867.99 1151.02 2864.86 1150 cv
2861.9 1150 2858.94 1150 2855.97 1150 cv
2855.75 1146.07 2848.43 1149.24 2845.3 1148.22 cv
2842.93 1148.22 2840.56 1148.22 2838.19 1148.22 cv
2837 1148.22 2835.82 1148.22 2834.63 1148.22 cv
2834.41 1144.29 2827.09 1147.46 2823.96 1146.44 cv
2821.59 1146.44 2819.22 1146.44 2816.85 1146.44 cv
2815.07 1146.44 2813.29 1146.44 2811.51 1146.44 cv
2811.29 1142.51 2803.97 1145.68 2800.84 1144.66 cv
2797.29 1144.66 2793.73 1144.66 2790.17 1144.66 cv
2789.41 1140.68 2781.41 1143.94 2777.73 1142.88 cv
2774.17 1142.88 2770.61 1142.88 2767.06 1142.88 cv
2766.29 1138.91 2758.29 1142.16 2754.61 1141.1 cv
2752.24 1141.1 2749.87 1141.1 2747.49 1141.1 cv
2745.72 1141.1 2743.94 1141.1 2742.16 1141.1 cv
2741.39 1137.13 2733.4 1140.38 2729.71 1139.33 cv
2726.15 1139.33 2722.6 1139.33 2719.04 1139.33 cv
2717.72 1135.32 2709.07 1138.63 2704.81 1137.55 cv
2700.67 1137.55 2696.52 1137.55 2692.37 1137.55 cv
2691.6 1133.57 2683.6 1136.83 2679.92 1135.77 cv
2677.55 1135.77 2675.18 1135.77 2672.81 1135.77 cv
2671.03 1135.77 2669.25 1135.77 2667.47 1135.77 cv
2666.15 1131.76 2657.5 1135.07 2653.24 1133.99 cv
2650.87 1133.99 2648.5 1133.99 2646.13 1133.99 cv
2644.35 1133.99 2642.57 1133.99 2640.8 1133.99 cv
2639.47 1129.98 2630.82 1133.3 2626.57 1132.21 cv
2624.2 1132.21 2621.83 1132.21 2619.46 1132.21 cv
2617.08 1132.21 2614.71 1132.21 2612.34 1132.21 cv
2611.02 1128.2 2602.37 1131.52 2598.12 1130.43 cv
2595.75 1130.43 2593.37 1130.43 2591 1130.43 cv
2588.63 1130.43 2586.26 1130.43 2583.89 1130.43 cv
2582.57 1126.42 2573.92 1129.74 2569.66 1128.66 cv
2567.29 1128.66 2564.92 1128.66 2562.55 1128.66 cv
2560.18 1128.66 2557.81 1128.66 2555.44 1128.66 cv
2553.54 1124.62 2544.26 1127.98 2539.43 1126.88 cv
2537.06 1126.88 2534.69 1126.88 2532.32 1126.88 cv
2529.95 1126.88 2527.58 1126.88 2525.21 1126.88 cv
2523.31 1122.84 2514.03 1126.2 2509.2 1125.1 cv
2506.24 1125.1 2503.27 1125.1 2500.31 1125.1 cv
2497.94 1125.1 2495.57 1125.1 2493.2 1125.1 cv
2491.3 1121.06 2482.02 1124.42 2477.19 1123.32 cv
2474.23 1123.32 2471.26 1123.32 2468.3 1123.32 cv
2465.93 1123.32 2463.56 1123.32 2461.19 1123.32 cv
2458.72 1119.27 2448.81 1122.66 2443.4 1121.54 cv
2440.44 1121.54 2437.48 1121.54 2434.51 1121.54 cv
2432.14 1121.54 2429.77 1121.54 2427.4 1121.54 cv
2424.93 1117.49 2415.02 1120.88 2409.62 1119.76 cv
2406.65 1119.76 2403.69 1119.76 2400.72 1119.76 cv
2397.76 1119.76 2394.8 1119.76 2391.83 1119.76 cv
2389.37 1115.71 2379.45 1119.1 2374.05 1117.99 cv
2370.49 1117.99 2366.94 1117.99 2363.38 1117.99 cv
2360.42 1117.99 2357.45 1117.99 2354.49 1117.99 cv
2351.44 1113.92 2340.91 1117.33 2334.93 1116.21 cv
2331.96 1116.21 2329 1116.21 2326.03 1116.21 cv
2322.48 1116.21 2318.92 1116.21 2315.36 1116.21 cv
2312.32 1112.14 2301.79 1115.56 2295.8 1114.43 cv
2292.25 1114.43 2288.69 1114.43 2285.13 1114.43 cv
2281.58 1114.43 2278.02 1114.43 2274.46 1114.43 cv
2271.42 1110.36 2260.89 1113.78 2254.9 1112.65 cv
2250.75 1112.65 2246.6 1112.65 2242.45 1112.65 cv
2238.9 1112.65 2235.34 1112.65 2231.78 1112.65 cv
2228.16 1108.57 2217.02 1112.01 2210.44 1110.87 cv
2206.29 1110.87 2202.14 1110.87 2198 1110.87 cv
2193.85 1110.87 2189.7 1110.87 2185.55 1110.87 cv
2181.34 1106.78 2169.59 1110.24 2162.43 1109.09 cv
2158.28 1109.09 2154.13 1109.09 2149.98 1109.09 cv
2145.83 1109.09 2141.68 1109.09 2137.53 1109.09 cv
2133.43 1105.06 2119.66 1108.4 2110.86 1107.32 cv
2106.12 1107.32 2101.37 1107.32 2096.63 1107.32 cv
2092.48 1107.32 2088.33 1107.32 2084.18 1107.32 cv
2081.65 1104.04 2075.69 1105.54 2069.96 1105.54 cv
2065.55 1105.54 2059.65 1105.54 2055.73 1105.54 cv
2050.4 1105.54 2045.06 1105.54 2039.73 1105.54 cv
2034.98 1105.54 2030.24 1105.54 2025.5 1105.54 cv
2023.61 1101.5 2014.32 1104.86 2009.49 1103.76 cv
2004.16 1103.76 1998.82 1103.76 1993.49 1103.76 cv
1987.56 1103.76 1981.63 1103.76 1975.71 1103.76 cv
1970.37 1103.76 1965.04 1103.76 1959.7 1103.76 cv
1957.24 1099.71 1947.32 1103.1 1941.92 1101.98 cv
1935.4 1101.98 1928.88 1101.98 1922.36 1101.98 cv
1915.84 1101.98 1909.32 1101.98 1902.8 1101.98 cv
1896.28 1101.98 1889.75 1101.98 1883.23 1101.98 cv
1883.01 1098.05 1875.69 1101.23 1872.56 1100.2 cv
1869.01 1100.2 1865.45 1100.2 1861.89 1100.2 cv
1854.19 1100.2 1846.48 1100.2 1838.78 1100.2 cv
1830.48 1100.2 1822.18 1100.2 1813.88 1100.2 cv
1804.99 1100.2 1796.1 1100.2 1787.21 1100.2 cv
1785.88 1096.19 1777.23 1099.51 1772.98 1098.42 cv
1767.64 1098.42 1762.31 1098.42 1756.97 1098.42 cv
1746.9 1098.42 1736.82 1098.42 1726.74 1098.42 cv
1714.29 1098.42 1701.85 1098.42 1689.4 1098.42 cv
1674.58 1098.42 1659.76 1098.42 1644.94 1098.42 cv
1643.37 1094.95 1638.98 1096.75 1636.05 1096.65 cv
1628.34 1096.38 1614.07 1096.84 1604.04 1096.65 cv
1589.81 1096.65 1575.59 1096.65 1561.36 1096.65 cv
1532.91 1096.65 1504.45 1096.65 1476 1096.65 cv
1447.55 1096.65 1419.09 1096.65 1390.64 1096.65 cv
1376.42 1096.65 1362.19 1096.65 1347.96 1096.65 cv
1340.85 1096.65 1333.74 1096.65 1326.62 1096.65 cv
1320.63 1097.77 1310.1 1094.36 1307.06 1098.42 cv
1292.24 1098.42 1277.42 1098.42 1262.6 1098.42 cv
1250.15 1098.42 1237.71 1098.42 1225.26 1098.42 cv
1214.59 1098.42 1203.92 1098.42 1193.25 1098.42 cv
1188.54 1098.53 1183.11 1098.29 1177.24 1098.42 cv
1173.14 1098.52 1166.6 1096.86 1164.8 1100.2 cv
1155.9 1100.2 1147.01 1100.2 1138.12 1100.2 cv
1129.82 1100.2 1121.52 1100.2 1113.22 1100.2 cv
1105.52 1100.2 1097.81 1100.2 1090.11 1100.2 cv
1083.53 1101.34 1072.39 1097.9 1068.77 1101.98 cv
1062.25 1101.98 1055.73 1101.98 1049.21 1101.98 cv
1042.68 1101.98 1036.16 1101.98 1029.64 1101.98 cv
1023.12 1101.98 1016.6 1101.98 1010.08 1101.98 cv
1004.68 1103.1 994.765 1099.71 992.299 1103.76 cv
986.371 1103.76 980.444 1103.76 974.516 1103.76 cv
969.181 1103.76 963.846 1103.76 958.511 1103.76 cv
952.583 1103.76 946.656 1103.76 940.728 1103.76 cv
936.476 1104.84 927.826 1101.53 926.501 1105.54 cv
921.167 1105.54 915.832 1105.54 910.497 1105.54 cv
905.754 1105.54 901.012 1105.54 896.27 1105.54 cv
891.559 1105.63 886.131 1105.42 880.265 1105.54 cv
876.167 1105.62 869.623 1103.98 867.817 1107.32 cv
863.075 1107.32 858.333 1107.32 853.591 1107.32 cv
848.849 1107.32 844.106 1107.32 839.364 1107.32 cv
834.622 1107.32 829.88 1107.32 825.138 1107.32 cv
822.011 1108.34 814.689 1105.17 814.468 1109.09 cv
810.318 1109.09 806.169 1109.09 802.02 1109.09 cv
797.277 1109.09 792.535 1109.09 787.793 1109.09 cv
780.636 1110.24 768.883 1106.78 764.675 1110.87 cv
760.525 1110.87 756.376 1110.87 752.227 1110.87 cv
748.67 1110.87 745.113 1110.87 741.557 1110.87 cv
734.399 1112.01 722.647 1108.56 718.438 1112.65 cv
714.882 1112.65 711.325 1112.65 707.769 1112.65 cv
703.62 1112.65 699.47 1112.65 695.321 1112.65 cv
688.749 1113.79 677.606 1110.35 673.981 1114.43 cv
671.017 1114.43 668.053 1114.43 665.089 1114.43 cv
661.533 1114.43 657.976 1114.43 654.419 1114.43 cv
647.848 1115.56 636.705 1112.13 633.08 1116.21 cv
630.116 1116.21 627.152 1116.21 624.188 1116.21 cv
620.631 1116.21 617.075 1116.21 613.518 1116.21 cv
607.531 1117.33 597 1113.92 593.957 1117.99 cv
590.993 1117.99 588.029 1117.99 585.065 1117.99 cv
582.102 1117.99 579.138 1117.99 576.174 1117.99 cv
570.187 1119.11 559.656 1115.7 556.612 1119.76 cv
553.648 1119.76 550.685 1119.76 547.721 1119.76 cv
544.757 1119.76 541.793 1119.76 538.829 1119.76 cv
533.424 1120.88 523.512 1117.49 521.046 1121.54 cv
518.082 1121.54 515.118 1121.54 512.154 1121.54 cv
509.19 1121.54 506.227 1121.54 503.263 1121.54 cv
498.437 1122.64 489.15 1119.29 487.258 1123.32 cv
484.294 1123.32 481.33 1123.32 478.366 1123.32 cv
475.402 1123.32 472.438 1123.32 469.475 1123.32 cv
464.648 1124.42 455.362 1121.06 453.47 1125.1 cv
451.099 1125.1 448.728 1125.1 446.357 1125.1 cv
443.393 1125.1 440.429 1125.1 437.465 1125.1 cv
432.639 1126.2 423.352 1122.84 421.46 1126.88 cv
419.089 1126.88 416.718 1126.88 414.347 1126.88 cv
411.383 1126.88 408.419 1126.88 405.456 1126.88 cv
400.629 1127.98 391.342 1124.62 389.451 1128.66 cv
387.08 1128.66 384.708 1128.66 382.337 1128.66 cv
379.966 1128.66 377.595 1128.66 375.224 1128.66 cv
370.398 1129.76 361.111 1126.4 359.219 1130.43 cv
356.848 1130.43 354.477 1130.43 352.106 1130.43 cv
349.735 1130.43 347.364 1130.43 344.993 1130.43 cv
340.741 1131.52 332.091 1128.2 330.766 1132.21 cv
328.396 1132.21 326.024 1132.21 323.653 1132.21 cv
321.282 1132.21 318.911 1132.21 316.54 1132.21 cv
312.288 1133.3 303.638 1129.98 302.313 1133.99 cv
299.942 1133.99 297.571 1133.99 295.2 1133.99 cv
292.829 1133.99 290.458 1133.99 288.087 1133.99 cv
283.835 1135.07 275.185 1131.76 273.86 1135.77 cv
271.489 1135.77 269.118 1135.77 266.747 1135.77 cv
264.376 1135.77 262.005 1135.77 259.634 1135.77 cv
255.95 1136.83 247.952 1133.57 247.186 1137.55 cv
244.814 1137.55 242.443 1137.55 240.072 1137.55 cv
237.701 1137.55 235.33 1137.55 232.959 1137.55 cv
229.275 1138.61 221.277 1135.35 220.511 1139.33 cv
218.14 1139.33 215.769 1139.33 213.397 1139.33 cv
211.026 1139.33 208.655 1139.33 206.284 1139.33 cv
202.6 1140.38 194.602 1137.13 193.836 1141.1 cv
192.058 1141.1 190.28 1141.1 188.501 1141.1 cv
186.13 1141.1 183.759 1141.1 181.388 1141.1 cv
177.704 1142.16 169.706 1138.91 168.94 1142.88 cv
164.791 1142.88 160.641 1142.88 156.492 1142.88 cv
152.808 1143.94 144.809 1140.68 144.043 1144.66 cv
139.894 1144.66 135.745 1144.66 131.595 1144.66 cv
127.911 1145.72 119.913 1142.46 119.147 1146.44 cv
117.369 1146.44 115.59 1146.44 113.812 1146.44 cv
111.441 1146.44 109.07 1146.44 106.699 1146.44 cv
103.015 1147.5 95.016 1144.24 94.25 1148.22 cv
90.694 1148.22 87.137 1148.22 83.581 1148.22 cv
79.896 1149.28 71.898 1146.02 71.132 1150 cv
67.576 1150 64.02 1150 60.463 1150 cv
56.778 1151.05 48.78 1147.8 48.015 1151.77 cv
44.458 1151.77 40.901 1151.77 37.345 1151.77 cv
33.661 1152.83 25.662 1149.58 24.896 1153.55 cv
21.34 1153.55 17.783 1153.55 14.227 1153.55 cv
13.142 1153.45 12.121 1153.29 12.448 1151.77 cv
61.338 1139.93 109.801 1131.13 161.827 1121.54 cv
167.084 1120.57 171.955 1118.6 177.832 1117.99 cv
182.54 1117.49 185.821 1117.77 192.058 1116.21 cv
194.005 1115.72 195.661 1115.18 200.949 1114.43 cv
201.492 1114.35 204.199 1114.8 204.506 1114.43 cv
206.948 1111.45 212.827 1115.52 215.176 1112.65 cv
218.252 1108.89 225.792 1110.78 232.959 1109.09 cv
234.441 1108.75 234.747 1107.61 236.516 1107.32 cv
238.793 1106.94 241.385 1107.84 243.629 1107.32 cv
245.111 1106.97 245.417 1105.83 247.186 1105.54 cv
249.463 1105.16 252.055 1106.07 254.299 1105.54 cv
255.781 1105.19 256.086 1104.05 257.855 1103.76 cv
260.133 1103.38 262.725 1104.29 264.969 1103.76 cv
267.624 1103.13 274.587 1101.18 280.974 1100.2 cv
283.251 1099.86 285.848 1100.73 288.087 1100.2 cv
289.572 1099.85 289.868 1098.71 291.644 1098.42 cv
293.921 1098.06 296.516 1098.95 298.757 1098.42 cv
300.239 1098.08 300.544 1096.94 302.313 1096.65 cv
304.591 1096.27 307.183 1097.17 309.427 1096.65 cv
311.642 1096.12 314.439 1095.68 320.097 1094.87 cv
320.639 1094.79 323.346 1095.24 323.653 1094.87 cv
326.094 1091.88 331.975 1095.96 334.323 1093.09 cv
334.422 1092.97 334.214 1091.33 334.323 1091.31 cv
341.751 1090.23 349.789 1090.41 357.441 1089.53 cv
360.257 1089.39 364.224 1090.39 364.554 1087.75 cv
366.333 1087.75 368.111 1087.75 369.889 1087.75 cv
372.705 1087.61 376.672 1088.61 377.002 1085.98 cv
378.781 1085.98 380.559 1085.98 382.337 1085.98 cv
385.153 1085.83 389.12 1086.83 389.451 1084.2 cv
391.229 1084.2 393.007 1084.2 394.786 1084.2 cv
397.602 1084.05 401.568 1085.05 401.899 1082.42 cv
403.677 1082.42 405.456 1082.42 407.234 1082.42 cv
410.05 1082.27 414.017 1083.28 414.347 1080.64 cv
416.125 1080.64 417.904 1080.64 419.682 1080.64 cv
422.498 1080.49 426.465 1081.5 426.795 1078.86 cv
428.574 1078.86 430.352 1078.86 432.13 1078.86 cv
434.946 1078.72 438.913 1079.72 439.244 1077.08 cv
441.615 1077.08 443.986 1077.08 446.357 1077.08 cv
449.172 1076.94 453.14 1077.94 453.47 1075.31 cv
455.248 1075.31 457.026 1075.31 458.805 1075.31 cv
461.621 1075.16 465.588 1076.16 465.918 1073.53 cv
468.289 1073.53 470.66 1073.53 473.031 1073.53 cv
475.847 1073.38 479.814 1074.38 480.145 1071.75 cv
487.48 1071.97 491.28 1068.66 499.706 1069.97 cv
502.522 1069.82 506.489 1070.83 506.819 1068.19 cv
509.19 1068.19 511.562 1068.19 513.933 1068.19 cv
516.749 1068.05 520.715 1069.05 521.046 1066.41 cv
523.417 1066.41 525.788 1066.41 528.159 1066.41 cv
530.743 1065.44 537.351 1068.49 537.051 1064.64 cv
539.422 1064.64 541.793 1064.64 544.164 1064.64 cv
546.979 1064.49 550.947 1065.49 551.277 1062.86 cv
553.648 1062.86 556.02 1062.86 558.391 1062.86 cv
561.206 1062.71 565.173 1063.71 565.504 1061.08 cv
568.468 1061.08 571.432 1061.08 574.396 1061.08 cv
577.211 1060.93 581.178 1061.94 581.509 1059.3 cv
583.88 1059.3 586.251 1059.3 588.622 1059.3 cv
591.206 1058.33 597.813 1061.38 597.513 1057.52 cv
599.884 1057.52 602.255 1057.52 604.626 1057.52 cv
607.211 1056.55 613.818 1059.6 613.518 1055.75 cv
615.889 1055.75 618.26 1055.75 620.631 1055.75 cv
623.215 1054.77 629.823 1057.82 629.523 1053.97 cv
631.894 1053.97 634.265 1053.97 636.636 1053.97 cv
639.22 1052.99 645.828 1056.04 645.528 1052.19 cv
648.492 1052.19 651.456 1052.19 654.419 1052.19 cv
657.003 1051.22 663.611 1054.27 663.311 1050.41 cv
666.275 1050.41 669.239 1050.41 672.203 1050.41 cv
675.019 1050.26 678.985 1051.27 679.316 1048.63 cv
682.28 1048.63 685.244 1048.63 688.208 1048.63 cv
690.792 1047.66 697.398 1050.71 697.099 1046.85 cv
700.656 1046.85 704.212 1046.85 707.769 1046.85 cv
710.353 1045.88 716.96 1048.93 716.66 1045.08 cv
719.624 1045.08 722.588 1045.08 725.552 1045.08 cv
728.136 1044.1 734.743 1047.15 734.443 1043.3 cv
738 1043.3 741.557 1043.3 745.113 1043.3 cv
747.697 1042.32 754.305 1045.37 754.005 1041.52 cv
757.562 1041.52 761.118 1041.52 764.675 1041.52 cv
767.259 1040.55 773.866 1043.6 773.566 1039.74 cv
777.123 1039.74 780.68 1039.74 784.236 1039.74 cv
787.363 1038.72 794.685 1041.89 794.906 1037.96 cv
796.092 1037.96 797.277 1037.96 798.463 1037.96 cv
800.834 1037.96 803.205 1037.96 805.576 1037.96 cv
808.702 1036.94 816.024 1040.11 816.246 1036.18 cv
817.432 1036.18 818.617 1036.18 819.803 1036.18 cv
822.174 1036.18 824.545 1036.18 826.916 1036.18 cv
830.042 1035.16 837.364 1038.33 837.586 1034.41 cv
841.143 1034.41 844.699 1034.41 848.256 1034.41 cv
851.94 1033.35 859.938 1036.6 860.704 1032.63 cv
864.26 1032.63 867.817 1032.63 871.374 1032.63 cv
875.058 1031.57 883.056 1034.83 883.822 1030.85 cv
885.6 1030.85 887.378 1030.85 889.157 1030.85 cv
891.528 1030.85 893.899 1030.85 896.27 1030.85 cv
899.954 1029.79 907.952 1033.05 908.718 1029.07 cv
910.497 1029.07 912.275 1029.07 914.053 1029.07 cv
916.424 1029.07 918.795 1029.07 921.167 1029.07 cv
924.851 1028.01 932.849 1031.27 933.615 1027.29 cv
935.986 1027.29 938.357 1027.29 940.728 1027.29 cv
943.099 1027.29 945.47 1027.29 947.841 1027.29 cv
952.093 1026.21 960.744 1029.52 962.068 1025.51 cv
963.846 1025.51 965.625 1025.51 967.402 1025.51 cv
970.366 1025.51 973.331 1025.51 976.294 1025.51 cv
980.546 1024.43 989.196 1027.75 990.521 1023.74 cv
992.892 1023.74 995.263 1023.74 997.634 1023.74 cv
1000 1023.74 1002.38 1023.74 1004.75 1023.74 cv
1009.57 1022.63 1018.86 1025.99 1020.75 1021.96 cv
1023.72 1021.96 1026.68 1021.96 1029.64 1021.96 cv
1032.01 1021.96 1034.39 1021.96 1036.76 1021.96 cv
1042.16 1020.84 1052.07 1024.23 1054.54 1020.18 cv
1057.5 1020.18 1060.47 1020.18 1063.43 1020.18 cv
1066.4 1020.18 1069.36 1020.18 1072.32 1020.18 cv
1077.73 1019.06 1087.64 1022.46 1090.11 1018.4 cv
1093.66 1018.4 1097.22 1018.4 1100.78 1018.4 cv
1103.74 1018.4 1106.7 1018.4 1109.67 1018.4 cv
1116.24 1017.27 1127.38 1020.7 1131.01 1016.62 cv
1134.56 1016.62 1138.12 1016.62 1141.68 1016.62 cv
1145.83 1016.62 1149.98 1016.62 1154.13 1016.62 cv
1161.28 1015.48 1173.04 1018.93 1177.24 1014.84 cv
1181.39 1014.84 1185.54 1014.84 1189.69 1014.84 cv
1194.43 1014.84 1199.18 1014.84 1203.92 1014.84 cv
1208.48 1014.78 1214.96 1014.92 1219.92 1014.84 cv
1226 1014.75 1231.01 1016.41 1234.15 1013.07 cv
1239.48 1013.07 1244.82 1013.07 1250.15 1013.07 cv
1256.08 1013.07 1262.01 1013.07 1267.94 1013.07 cv
1277.79 1012.76 1289.93 1013.47 1301.73 1013.07 cv
1304.66 1012.97 1309.05 1014.76 1310.62 1011.29 cv
1319.51 1011.29 1328.4 1011.29 1337.29 1011.29 cv
1349.15 1011.29 1361 1011.29 1372.86 1011.29 cv
1426.21 1011.29 1479.56 1011.29 1532.91 1011.29 cv
1544.76 1011.29 1556.62 1011.29 1568.47 1011.29 cv
1577.36 1011.29 1586.26 1011.29 1595.15 1011.29 cv
1596.71 1014.76 1601.11 1012.97 1604.04 1013.07 cv
1611.75 1013.33 1626.02 1012.87 1636.05 1013.07 cv
1642.57 1013.07 1649.09 1013.07 1655.61 1013.07 cv
1660.95 1013.07 1666.28 1013.07 1671.62 1013.07 cv
1674.15 1016.34 1680.11 1014.84 1685.84 1014.84 cv
1690.25 1014.84 1696.14 1014.84 1700.07 1014.84 cv
1704.81 1014.84 1709.55 1014.84 1714.29 1014.84 cv
1718.44 1014.84 1722.59 1014.84 1726.74 1014.84 cv
1730.95 1018.93 1742.7 1015.48 1749.86 1016.62 cv
1754.01 1016.62 1758.16 1016.62 1762.31 1016.62 cv
1765.87 1016.62 1769.42 1016.62 1772.98 1016.62 cv
1776.02 1020.69 1786.55 1017.27 1792.54 1018.4 cv
1796.1 1018.4 1799.65 1018.4 1803.21 1018.4 cv
1806.17 1018.4 1809.14 1018.4 1812.1 1018.4 cv
1815.15 1022.47 1825.68 1019.05 1831.66 1020.18 cv
1834.63 1020.18 1837.59 1020.18 1840.55 1020.18 cv
1843.52 1020.18 1846.48 1020.18 1849.45 1020.18 cv
1851.34 1024.21 1860.63 1020.86 1865.45 1021.96 cv
1868.42 1021.96 1871.38 1021.96 1874.34 1021.96 cv
1876.71 1021.96 1879.08 1021.96 1881.46 1021.96 cv
1883.35 1025.99 1892.63 1022.63 1897.46 1023.74 cv
1900.42 1023.74 1903.39 1023.74 1906.35 1023.74 cv
1908.72 1023.74 1911.09 1023.74 1913.47 1023.74 cv
1914.79 1027.75 1923.44 1024.43 1927.69 1025.51 cv
1930.06 1025.51 1932.43 1025.51 1934.8 1025.51 cv
1937.18 1025.51 1939.55 1025.51 1941.92 1025.51 cv
1942.68 1029.49 1950.68 1026.23 1954.37 1027.29 cv
1956.74 1027.29 1959.11 1027.29 1961.48 1027.29 cv
1963.85 1027.29 1966.22 1027.29 1968.59 1027.29 cv
1969.36 1031.27 1977.36 1028.01 1981.04 1029.07 cv
1983.41 1029.07 1985.78 1029.07 1988.15 1029.07 cv
1989.93 1029.07 1991.71 1029.07 1993.49 1029.07 cv
1994.26 1033.05 2002.25 1029.79 2005.94 1030.85 cv
2008.31 1030.85 2010.68 1030.85 2013.05 1030.85 cv
2014.83 1030.85 2016.61 1030.85 2018.39 1030.85 cv
2019.15 1034.83 2027.15 1031.57 2030.83 1032.63 cv
2034.39 1032.63 2037.95 1032.63 2041.5 1032.63 cv
2042.27 1036.6 2050.27 1033.35 2053.95 1034.41 cv
2057.51 1034.41 2061.07 1034.41 2064.62 1034.41 cv
2064.84 1038.33 2072.17 1035.16 2075.29 1036.18 cv
2078.85 1036.18 2082.41 1036.18 2085.96 1036.18 cv
2086.18 1040.11 2093.51 1036.94 2096.63 1037.96 cv
2100.19 1037.96 2103.75 1037.96 2107.3 1037.96 cv
2107.52 1041.89 2114.85 1038.72 2117.97 1039.74 cv
2120.94 1039.74 2123.9 1039.74 2126.86 1039.74 cv
2127.08 1043.67 2134.41 1040.5 2137.53 1041.52 cv
2140.5 1041.52 2143.46 1041.52 2146.42 1041.52 cv
2146.65 1045.45 2153.97 1042.27 2157.09 1043.3 cv
2160.06 1043.3 2163.02 1043.3 2165.99 1043.3 cv
2165.69 1047.15 2172.29 1044.1 2174.88 1045.08 cv
2177.84 1045.08 2180.81 1045.08 2183.77 1045.08 cv
2183.99 1049 2191.31 1045.83 2194.44 1046.85 cv
2197.4 1046.85 2200.37 1046.85 2203.33 1046.85 cv
2203.03 1050.71 2209.64 1047.66 2212.22 1048.63 cv
2215.19 1048.63 2218.15 1048.63 2221.11 1048.63 cv
2221.66 1051.04 2225.57 1050.11 2228.23 1050.41 cv
2231.19 1050.41 2234.15 1050.41 2237.12 1050.41 cv
2236.82 1054.27 2243.43 1051.22 2246.01 1052.19 cv
2248.97 1052.19 2251.94 1052.19 2254.9 1052.19 cv
2255.45 1054.6 2259.35 1053.66 2262.01 1053.97 cv
2264.98 1053.97 2267.94 1053.97 2270.91 1053.97 cv
2270.61 1057.82 2277.21 1054.77 2279.8 1055.75 cv
2282.17 1055.75 2284.54 1055.75 2286.91 1055.75 cv
2286.61 1059.6 2293.22 1056.55 2295.8 1057.52 cv
2298.17 1057.52 2300.54 1057.52 2302.92 1057.52 cv
2303.47 1059.94 2307.37 1059 2310.03 1059.3 cv
2312.99 1059.3 2315.96 1059.3 2318.92 1059.3 cv
2319.47 1061.71 2323.37 1060.78 2326.03 1061.08 cv
2328.41 1061.08 2330.78 1061.08 2333.15 1061.08 cv
2332.85 1064.94 2339.46 1061.89 2342.04 1062.86 cv
2344.41 1062.86 2346.78 1062.86 2349.15 1062.86 cv
2349.7 1065.27 2353.6 1064.33 2356.27 1064.64 cv
2358.64 1064.64 2361.01 1064.64 2363.38 1064.64 cv
2363.93 1067.05 2367.83 1066.11 2370.49 1066.41 cv
2372.86 1066.41 2375.23 1066.41 2377.61 1066.41 cv
2378.16 1068.83 2382.06 1067.89 2384.72 1068.19 cv
2387.09 1068.19 2389.46 1068.19 2391.83 1068.19 cv
2392.38 1070.61 2396.28 1069.67 2398.95 1069.97 cv
2401.32 1069.97 2403.69 1069.97 2406.06 1069.97 cv
2406.61 1072.38 2410.51 1071.45 2413.17 1071.75 cv
2415.54 1071.75 2417.91 1071.75 2420.29 1071.75 cv
2420.83 1074.16 2424.74 1073.23 2427.4 1073.53 cv
2429.18 1073.53 2430.96 1073.53 2432.73 1073.53 cv
2433.28 1075.94 2437.19 1075 2439.85 1075.31 cv
2442.22 1075.31 2444.59 1075.31 2446.96 1075.31 cv
2447.51 1077.72 2451.41 1076.78 2454.07 1077.08 cv
2455.85 1077.08 2457.63 1077.08 2459.41 1077.08 cv
2459.96 1079.5 2463.86 1078.56 2466.52 1078.86 cv
.988 .749 .267 .102 cmyk
ef
%ADOBeginSubsetFont: PBAAAA+MyriadPro-Regular Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2016 Adobe System Incorporated. All rights reserved.
13 dict dup begin
/FontType 1 def
/FontName /PBAAAA+MyriadPro-Regular def
/FontInfo 6 dict dup begin
/Weight (Regular) def
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /space put
dup 73 /I put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 106 /j put
dup 110 /n put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 127 /odieresis put
dup 128 /adieresis put
def
/UniqueID 0 def
/FontBBox {-157 -250 1126 952} def
end
systemdict begin
dup /Private
13 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def
/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def
/BlueScale 0.0604553 def
/StdHW [67] def
/StdVW [88] def
/StemSnapH [67] def
/StemSnapV [88 92] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/space <1C60D8A8C9B896187A> |-
/I <1C60D8A8C9B87DE005AD6F3C5D74814B2BFE06F81F462471EDB11E0EC39F
39EA> |-
/a <1C60D8A8C9B75946039FC5B56ED6A50878B478B1780B40C4125CE8039A26
1528F027CE6FDEC5783823498623E2545F156FE1817CCA8E4CEF932EAF146EA4
E45F8E44AF7B3429BDE6EAD3417E01676A62E7E41175148C72742B2C6CC241FF
06B9AE6A99EACBD61DC0A967A1A9EA490A3B86CCCCBA356FE0C46F09ED4CCD9D
7FD84EFCB667453A166D73A23A48C3A48DCEEFA9A85E6DA8EDA33C7A566D8839
3EC5B1BCAE7CEACDFA7D9A043D> |-
/e <1C60D8A8C9B7A66F85F3DBE5AE1E76F6A9740420B265CA4AC9DE99AD8AED
C4233110D7344BA8969F49ACBE3164296BAF8D8824063AB5A81F8F9142D2C049
2C8D085FBBDD29052840FCC873C574581FB314AC3521D9DA4AE8E6D987C45E9E
8106797186054DABC39E6B> |-
/g <1C60D8A8C9B7ECD94DE1A189191AD5F29F43B727FC67DAAB0A1AC3463640
03E4FEF79FBAC399EF60BAB44182D20FA0C6402BF1E27F05398DCDDDA14D79F5
733F11E560A813FF9D16C42617DFDA23021803BAB86086244EE74B29A5E1F99E
79BC6C6C8880FE4C572C55E990D88B7521BD46854B97930948AAC94E7DFE2FF6
9F2221950186414A7427A5E80E1B04B219E3300404246D87351FD05C6F3EA0B9
5C636083B47E4D5C2DAA8BBB8D343439CEC8A6CCD7C3BA57C2332F2A02343DC5
6BF6AA691E1A081F9D254D> |-
/j <1C60D8A8C9B879BE2B6D62B02C248C7AD617101B598D72A0ADE2AED2D777
F8A6CE105D9C8652691D59523C882D1DEF6602D4389A33BB81060F9BD8AF6D73
BA42E83F7E271645381327C882C7ADAA943858009BF9863E04A771625DD5ACBA
3A5A2618F38A4F897E1081C88D5DE158573C> |-
/n <1C60D8A8C9B790A816BA887E1EEC2C6B98EC99098FC021FEBA148F884875
E3B03D8F5BA9B51A6918EFA4195D8FABF82DC961545110C1672CA0A5B167A366
46DBDC6B2B1EB2CCFFCB412605A41F5E921E35125025B68561FC08FF5F5A87F0
318D13C761F9DF> |-
/r <1C60D8A8C9B825FA276057E430FDF01407E8A25201058EF45B5C185214AB
1116383552C8A26ACD44FF0BE1E00A052AF17C7B552C44648BDA524B50952CB0
AE525A4563499AD1C42D4D0C12A5AD458628362FB1B81E032637466F> |-
/s <1C60D8A8C9B70FAD6F31E6985338EEEA1793890FC3B3DC4027B9CC9488D5
A6B4D4C4E3E08CED307B2C798C1699A9DD310011666D86920512F1C3EB9CEE4F
24B897BB1E950EE111237B9A2BC5BBB8732A07D9407EA3C86D8241785B5209F0
AEBA9DE73147EEE82D829B87C7> |-
/t <1C60D8A8C9B821B37F30E246C711EE3A9B1905ECA3B2281EC66105C6FB87
D8A11F34421A86A4C8EB1634F07587A29F1959067E8F5C01D391C88E64020888
37AF0D6E016A2B2057BCC898EDBE8C7509BAF139B3EFB89894D72C8915100CD3
D16C57> |-
/u <1C60D8A8C9B794D34CED683BC0F75FB25BE8ECA5D4F8D235649E81E6A62D
D7B90AF6DE09B4373C71DC870DE9EFA0B94E7506F75EEE558DF81CD33372DAD0
B84FB6B3C173C4DB8D5EA8C4F6D8C721F2FFE6909411B724C264F09293D8D8F8
9019F8CCCB6FE3AF5C57> |-
/odieresis <1C60D8A8C9B7967683396363C4C5A9E451FFBD75248EC3A8EC4B
566E5BD4E7BBB72EB29C672F7BE91209F1171F84980F7DA08B43C90BC9E3BDC6
5B190F81C7A4B1ED6D074E407F8CF228B147D6A94BC016CCE6EB4BD1FBBAED7A
68661C73DCCEDCFD7617E6DB31C67F8D448394453A87CA43A2A7988AF49ACB2A
36DC94BDE7810266C7E786D318414642CD035762467B83AB017C931BB77D67> |-
/adieresis <1C60D8A8C9B75946039FC5B56ED6A50878B478E7E81BF8D49702
AEB214592CA8FD7F09E36E559FE63A7411E4DB148AB889980951CF2DBA7048AC
3B9463A7764FFA4AAF94691B15037C41C89F917B11DDA9F6E83CFC818864FF4A
F98405C148FAFC11A9BB438083162873E940000F7AF0A738A8918939945AD805
10C155DB371329584D3C4F83128B0C122116849F7D51E64A610B98EB2B8ED67D
002E918C39D24B46B64B0E132E0F1072CD20814AADACD78A17DC0F33F6F4C499
66B336E51578288F1AB117EEEED064959D423577584BC7E348DA2A2CCC685C60
8266126975333FA82CC9115058706B03246D7B87FD6F2EECB4715A8F9CE1B9BD
3903DD3901B057> |-
/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364C
BBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0
D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917
B17192> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/JOAZTQ+MyriadPro-Regular /PBAAAA+MyriadPro-Regular findfont ct_VMDictPut
/JOAZTQ+MyriadPro-Regular*1 
[32{/.notdef}rp /space 40{/.notdef}rp /I 23{/.notdef}rp /a 3{/.notdef}rp /e 
/.notdef /g 2{/.notdef}rp /j 3{/.notdef}rp /n 3{/.notdef}rp /r 
/s /t /u 9{/.notdef}rp /odieresis /adieresis 127{/.notdef}rp]
JOAZTQ+MyriadPro-Regular nf
JOAZTQ+MyriadPro-Regular*1 [670 0 0 -670 0 0 ]msf
0 561.374 mo
(Ingenj\177rer)
[166.829 371.845 374.534 335.675 371.845 162.807 367.827 213.057 335.675 0 ]xsh
JOAZTQ+MyriadPro-Regular*1 [550 0 0 -550 0 0 ]msf
23.1182 1536.5 mo
(utan )sh
1195.16 1536.5 mo
(gr\200nser)
[304.703 177.648 265.097 305.246 217.798 275.554 0 ]xsh
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
] del_res
/JOAZTQ+MyriadPro-Regular*1 uf
/JOAZTQ+MyriadPro-Regular uf
/PBAAAA+MyriadPro-Regular uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
