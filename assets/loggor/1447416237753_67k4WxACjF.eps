%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: 1447416237753_67k4WxACjF.pdf
%%Creator: Adobe Acrobat 10.1.5
%%For: kivi
%%CreationDate: 2016-01-02, 13:41:14
%%BoundingBox: 0 0 767 450
%%HiResBoundingBox: 0 0 766.2980 449.4801
%%CropBox: 0 0 766.2980 449.4801
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 30438 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.2-c001 63.139439, 2010/09/27-13:37:26        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
    xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   dc:format="application/pdf"
   xmp:MetadataDate="2014-08-20T10:01:19+02:00"
   xmp:ModifyDate="2014-08-20T10:01:19+02:00"
   xmp:CreateDate="2014-01-14T15:13:38+01:00"
   xmp:CreatorTool="Adobe Illustrator CC (Macintosh)"
   xmpMM:InstanceID="uuid:b8d91b89-a0e8-4d17-86e1-b3433ccda5de"
   xmpMM:DocumentID="xmp.did:3fcd56ec-b898-4004-bb47-c87871940bb8"
   xmpMM:OriginalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
   xmpMM:RenditionClass="proof:pdf"
   illustrator:StartupProfile="Print"
   xmpTPg:HasVisibleOverprint="False"
   xmpTPg:HasVisibleTransparency="True"
   xmpTPg:NPages="1"
   pdf:Producer="Adobe PDF library 10.01">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">MCA-sweden_RVB</rdf:li>
    </rdf:Alt>
   </dc:title>
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="128"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAgAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYqkXmnzTBosARAJb6UVhhPQDpzenb9eZel0hyn+i67tDtCOAUN5nkP0ljek&#xA;+W9W8yAajrV3ItpJvDENiyn9pR9lF8Nt/wATnZtTDB6cY3dXp9Dl1X7zNI8J5fjkB96cL5Ml039/&#xA;oN/NBcrv6M5DwyU/ZdQF+/7sxjrRPbJEEeXMOcOzDi3wyIl3HcH3p/pl7Jd2qyTQm3uVPC4t23KS&#xA;Abio2I3qD3GYeWAiaBsdC7HBlM42RUuo7iisrbnYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FWMfmD+Y/lXyDoZ1fzDc+lGxKWtrGA89xIBXhElRU+JJCjuRir5w1T/AJzc1xr4nSvLVrHYhvhW&#xA;6mkklZfEmMRqpPhQ098Ves/k7/zkd5Y/MS6/RE1s2jeYuJdLGRxLHOqCrGCWiVYbkoVBpuK0NFXr&#xA;uKuxVif5jfmf5S/L7RhqfmC4KmUlbOyhAe4uHUVKxoSBt3ZiFHc7jFXznqH/ADm5r7XxOneWbSOx&#xA;DGiXE8kkrL2+JBGqn/YnFXsX5Of85DeWPzHkbTTA2k+Yo0Mh06VxIkqL9poJQE5U7qVBHuKnFXq2&#xA;KuxVDalfw6fYzXk393CvIjuT0Cj5nbLMWMzkIjq1Z8wxQMzyD5x/NT8y/wDDlq2s3MKX1/dTBbe0&#xA;kJEbd6NT4vTVVpQfKorXN7nmMGKo+4freS0uOWr1Fz5cz7u79HueH+Z/+civze8wO4l1+bTbZvsW&#xA;mmf6GiL/ACh46Skf6znOeeyYFe6xq9+zNfX1xdM+7meV5CT135E1wKvsNf13T2VrDUbq0ZRRWgmk&#xA;iIHtwYYq9C8qf85K/nB5dkSmtvq1sv2rXVR9aDfOViJx9Egwq+j/AMqf+cqfKXnC8ttG1uA6Drtw&#xA;wjg5tzs55DsqRymhR2PRXHsGJxV7hirsVdirsVQuq6pp+k6bdanqM62thZxNPdXD7KkaDkzH6MVf&#xA;In5gf85jebbzUZrfyVBDpelxsVhvbiNZ7qUA7OVesUYP8vFj74qxjRv+cs/zmsbpZbzUbbVoQfit&#xA;rq0gjUjw5WyQOPvxV9Wfk9+cegfmXokl1ZobLVrPiupaW7BmiLfZdGoOcbUNGoPAjFXoGKuxV2Ku&#xA;xV2KuxVbLLFFE8srrHFGpaSRiFVVUVJJOwAGKvzx/PH8y5/zA8/XuqI7foi1JtdHhJNFtoyQJKdm&#xA;larn507Yq8/wKj9B1vUNC1qx1nTpDFfafPHc27js8bBgDTqDShHcYq/TfSdRg1PSrPUoP7i9giuY&#xA;q9eEqB1/BsKq11c29rbS3VzIsNtAjSzzOQqIiDkzMTsAAKnFX51fnH+Y135/893+tuzfo9WNvpMD&#xA;VAjtIyRH8J6M/wBtv8onFWEYFTXyr5iv/LfmTTdesGKXem3EdxHQ05cGqyH/ACXWqt7HFX6bWl1D&#xA;d2sN1CeUM8ayxt4q4DA/ccKqWqapp+ladc6lqNwlrYWkbTXNxIaIiIKlicVeF2H5qah+YUt7qFtE&#xA;1n5XgmMGlQMKSzlPt3E3hWtFUbDetTm27Mxc5/B53t3UcsY95/Q+d/z515tQ84jT1asGmRBAoNR6&#xA;ktHcj/Y8RlXaWS58P839P4DkdiYeHEZ9ZH7B+23mua13TsVdirsVcCQajYjFX6K/kV5mv/M35S+X&#xA;NY1BzJey27wTysatI1rM9t6jHuX9HkfnhVneKuxV2Kvmj/nM7z89no+meSbOXjJqR+vamoO/1eJu&#xA;MCEeDyqzf7AYq+RsCuxVnf5J+fpPI/5jaVrDScNPkkFpqo7G0nIWQn/jGaSD3XCr9FQQwBBqDuCO&#xA;hGKuxV2KuxV2KuxV4T/zln+Zg8t+Sl8sWMtNW8yK0cvE/FFYrtMx/wCMv92PEcvDFXxLgV2KuxV+&#xA;k/5VMzflf5PZiWZtE00knckm0jwq8n/5y7/M0aH5Ui8nafKBqevqWveJ+KOxRqGvh67jh/qhxir4&#xA;wwK7FXYq/TLyA7v5E8tu7FnbS7IsxNSSbdKknCr5f/5y4/NufUta/wAAaRMRp2nMr6yyHaa6NGSE&#xA;06rCCCR/P13UYqyryPpK6L5L0yzVQHitlkk93cc2qfmc6bS4+HGA8Nr83HmlLz+58p+YdSOp69qG&#xA;oE1F1cSyr7KzkqPoWgznc0+KZl3l7LTYvDxxj3AIew0+/wBRvIrLT7aW8vJjxhtrdGlldvBUQFif&#xA;kMqb3qOjf84ufnPqduLg6MlhGwqgvLiKJz84wzOv+yAwqp67/wA4xfnNpFubg6H9fhUVc2E0U7j2&#xA;EQYSt/sVOKvL7q1urS4ktrqF7e4iYrLDKpR1YdQysAQfngVH+WfLGu+Z9attF0O0kvdQumCxxRgm&#xA;gru7noqL1ZjsBir9FPI/lmHyN5D0jy/Ej3S6XbrHO8C1LSsTJNIEJDUaRmagqcnCPEaumGSfCLon&#xA;3MgsNRsdQtxc2Uyzwkkcl7EdQQdwfY4cmOUDUhRY4s0MkeKJsIjINrTMqqWYhVUVZjsABir84/zh&#xA;87Hzp+Y2ta8jlrOWYw6eN6C1gHpwkA9OSrzI8ScVYZgV2KuxV+gX/OOPnoebvys0yWaTnqOkj9GX&#xA;4Jqxa3UCNz3POEoxPjXCr07FXYq7FXYqo317aWFlcX15KsFpaxvPcTPsqRxqWdm9lUVxV+cf5ref&#xA;rvz5551LzFMGSCZ/SsIGNfStYvhiT50+Jv8AKJxViOBXYq7FX6Ofl7qlhpP5NeWNT1CZbexsvL1h&#xA;PczvsEjjso2Y/cMKvgr8yfPF95486an5kuwU+uSUtoCa+lboOMMfh8KAVp1NT3wKxjFXYq7FX6Jw&#xA;+aIfKv5H2fmKUAjTPL9tPGjdHlFqgiT/AGchVfpwq+BdIF1r3m61N3I091qd8r3MrVLPJNLydj7s&#xA;ScljjxSA7y15p8MDLuBL6q85XX1Hyjq90h4G3s5nSm26oeIH6s6fKagT3AvCaePFkiO+Q+98t+Rf&#xA;JWt+dfNFl5d0eMNd3bfFI393FEu8ksh7Ki7+/QbnOVe/fff5YflF5R/LvSVtNHtxLfyKBfatMoNz&#xA;O3U1b9hK/ZRdh7mpJVm2KuxVj3mX8vfI/md1k8waFZalMoCrPPChlAHYSgBwPauKory75Q8reWoH&#xA;g0DSbTS4pKGUWkKRFyOhdlALkf5RxVN8VYddMuk/mBaC1PCLWI2+uwCtC614yU6VJA/HxzZR/eaY&#xA;3zhy/U6aZ8LWR4eWQbjz7/x5sxzWu5eW/wDOSnngeVPyq1IwycNR1n/cZZAH4qzg+s47jjCH38aY&#xA;q+AcCr4YZZ5khhQvLKwSNF3LMxoAB7nFWafm9+Wl5+XnmmHRbhjIs1ja3UcxpRmeMLOBTai3CSAe&#xA;1MKsIwK96/5xA89DRPP8/ly6k42PmOLhECaKLu3BeL/g0Lr7njhV9rYq7FXYq7FXzp/zmF+Zf6K8&#xA;u23kiwkpfa0BPqRU7pZxv8Kf89pF+5SO+KvjrAqra2tzd3MdtbRtNcTMEjjQVLE9hiqlirsVfSH5&#xA;3fmZ9S/JfyH5C0+X/SdR0LS7vWCp3W3S2jMMRp/vyReR9lHZsKvm/Aqta2lzdzrBbRNNMwJCIKmi&#xA;qWY/IKCT7Yqo4q7FX1//AM5A6y1j/wA4z+WLFHodWj0m2kSoq0cdr9YJp4B4E/DJVtaOIXXV82/l&#xA;Pbif8w9EUioSf1KUruilh91K5fpBeWPvcTtGVYJ+59Afm7O0P5e6uy1+OMRmhps7BT+vN5rDWKXu&#xA;eU7OjeePvTb/AJww8mW9n5T1PzbNGDe6pcGztpCN1tbehbie3OYnl/qDObe3fRuKuxV2KuxV2KoT&#xA;VdWsNKs3u72QRxL0HVmbsqjuTlmLFLJKotOfUQxR4pGgwTyo175l84Sa/OnC0sQVhXqAzKVSP3or&#xA;F296eObbV8ODD4Y5y/H7HQ6Ay1OpOY/THl+gfpejZpXpHxR/zl/54GtfmDB5dtpOVl5ch9OQA/Cb&#xA;u4AklP8AsUEa+xBxV4NgV6v/AM4yeTP8TfmzprTR87HRQdUuqjasBAhHh/fshp4A4Ve6/wDOZXkv&#xA;9JeSbDzRbx1udCn9K5YDf6rdkIST/kzKlP8AWOKvjPAqK0rU73StTtNTsZDFe2M0dzbSjqssTB0b&#xA;6GXFX6W+TfM9l5p8q6V5hstrfU7aO4CVrwZh8cZPjG9VPuMKpzirsVQWua1p+h6Ne6xqMno2GnwS&#xA;XNzJ4JGpY0Hc7bDucVfm75/85ah5z84ap5kvqrLqExeOKtRFCvwxRA/5EYC+/XFWPYFfQ3/OMf5a&#xA;fWtH8yeftQj/AHNlY3llo6sOs727CeYf6iNwH+s3hhV884FdiqIvtQvL+ZJruVppUiht0Zuoit4l&#xA;hiX5JHGqj5Yqh8VfQ/8Azjx+WYPkPzj+YGoRH4dK1Gx0QMNqm2cXM6/8mlI/yxhV88YFbAJNB1OK&#xA;vpP/AJyDguf+VOeWpLhi72t7aaeoH2VW209xt/rEk5m6qPBGMPKz73WaCXiynlPfwjyA/W8h/Jmn&#xA;/KxtJr1rLT5+k2R0X97Fs7U/xeX46h7Z+d5I/LbUyDT47cffOgzca/8Auj8Pveb7J/xiPx+4vVf+&#xA;cV5oJPyP0BI6c4pL1Jqfzm9mcV/2DLnOvZvWcVdirsVWyyxRRtJK6xxqKs7EBQPcnCASaCJSAFnY&#xA;MQ178ydLsg0OnL9duBUcxtCp/wBbq30ffmxwdmzlvL0j7XTartrHDaHql9n7fxuxCxsPMXnTVPVu&#xA;JG+rxmklwRSKJTvxjXoWp2+/NlkyYtNChz+90+LFm1uS5H0jr0Hu/Hveq6VpdlpdjHZWacIYxt3L&#xA;E7lmPcnOfy5ZZJcUub1mDBHFARiNghPNvmSy8s+WNU8wXv8AvNpltJcutaFyi1VB7u1FHucrbn5o&#xA;avqt7q+q3mq30nq3t/PJc3Mh/aklYu5+84FQmKvtD/nDfyZ+i/Id75lnj43PmC44wMRv9VtC0akd&#xA;xylMlfGgwq9r81+XrPzJ5a1TQb0f6NqdtLbO1KlfUUqHAPdDRh7jFX5n6tpd7pOq3ml3yene2E8l&#xA;tcx/yywuUcfQy4FQmKvrn/nC/wA9fWtF1XyXdSVm05/r+nKxr/o8x4zIo7BJaN83wq+l8Vdir5f/&#xA;AOcyPzLENpaeQNPk/eXHC+1kqekakmCE/wCsw9Qj2XxxV8n4FTXyr5b1LzN5j07QNNTne6lOkEXg&#xA;vI/E7U/ZRas3sMVfoenlfTfKv5XzeXtNWlnpulTwI1KFyIWLyNT9qRyXb3OFX5t4FdirsVTvyV5T&#xA;1Lzb5q0zy7pwrc6jOsXOlRGnWSVv8mNAWPyxV+geu+X9N8uflDquhaanp2Om6HdW8C9yEtXHJvFm&#xA;PxMe5wq/OHArYJBBHUbjFX1x+Y/lXWvNP5XWWlR8EkvFstasTJUIZTb0I5AHrHMVPuBm4liGogJA&#xA;+oPNY88tFllCQvHI3+39bxLyB5M83eXfzG0htS0ueGJZSr3AQyRAOjKD6ickHXucx9Pp8kMosOdr&#xA;NZhy6eQjIcvcXr/5wwGb8utXAAPBEc18FkU5tdYLxSdB2aazx96h/wA4afmJZ20eq+SdRnWEyP8A&#xA;pHS2kICsxUJcR8j3oiOo/wBbOcjEnk9pKQjzNPpyfzDoUArJqFuPYSKx+5STlsdNkPKJaJ63DHnO&#xA;PzSi8/MXy5ACImkum7emhAr834Zkw7OynnQcLJ21gjyuXuH62O6j+aGoyArY20duP55CZG+j7Kj8&#xA;czcfZcR9Rt1mbt2Z+iIH2sbkn8x+YbkRlp76WtQgqUWp60FFUe+Zojiwi9outM8+plW8j+PgHn35&#xA;jfmboPkPUTpEtuNa1+IA3VhFL6dvbFhUJPMoZmffdI/+DB2zX6jtTpj+buNJ2H1yn4D9J/V80p8v&#xA;f85oeZ7KeOHUfLemvpSHisFh61tIiV7NI86Ej/VFfbNPKRkbO5ehhARFRFAPqPyH588ueePLkGva&#xA;DOZbSUlJYnAWWGVQC0Uqgni61HehFCCQQcDJ4h/zmd54+peWdM8nW0lJ9Wl+uX6g7/Vrc/u1YeDz&#xA;fEP9TFXx/gV2Kvd/Lf8Azlz5v8vaBp2h6foOlrZabbx20HIXBYrGoXkx9XdmpUnxwqmX/Q6/n7/q&#xA;xaV91z/1VxV4r5783T+cPNd/5kuLOCxudRZZJ7e1DCLmqKjMA5Y1fjybfqTgVIMVZn+T/nh/JP5i&#xA;aPrxYrZxTCHUVFd7Wf8AdzbDrxU8wP5gMKv0cR0dFdGDIwBVgagg9CDiqU+bvM+m+VvLOpeYdSbj&#xA;ZabA08gBALkbJGtf2pHIRfc4q/NvzV5k1LzN5j1HX9Sfne6lO88vgvI/Ci1/ZRaKvsMCpVir6w/5&#xA;w2/LT0bW7/MDUI/3lxzsdFVh0jU0uJx/rMPTB9m8cKvovzZ/yi2s/wDMDc/8mWxV+YmBXYq7FX13&#xA;/wA4dfln9R0i68+ahFS61INaaQrD7NsjD1ZRX/fki8R7L4NhV7t+YX/KA+Zf+2Vff9Qz4q/M7Ars&#xA;VfpL5S0u11L8tfL1rcKCG0izCSUBZGNsgDrXuMtx5ZQNxLTmwQyx4Ziw+Zbn86bry75kvfLPm/Sm&#xA;g1DT7g209zaGqNQ0EgjkoeLrRh8R2ObLH2n/ADh8nR5+wuuOXwP6/wBj0+aSJYHkkIMSqXY0qOIF&#xA;a7Zt3nQGIn81Py5jUldZtwO4VZP1BcxvzuL+c538maj+afsVNF/M78v9Z1JNOtdct4p5No3uxJax&#xA;E+HqzIiA/M79sie0MPf9hbB2PqD/AA18Q9XsPy0vbhUllvoFgkUMrwVlqDuKfYB+dcol2pEcgS5W&#xA;PsGZ+qQHu3/Unlv5B8r6bC1zqEhmSJeUstw4jiWm5Y04gD/WJzEydpZJcvS7HD2LhhzuR83kf5t/&#xA;85R+VvLenzaH+XzQahqzBkN/Aq/UrUnYuhA4zSdxxqniT9nMGUzI2TbtYY4xFRFB8e3d3dXl1Nd3&#xA;Urz3Vw7SzzyEs7u55MzMdySTU5BkpYq+kP8AnCbWb6Pzhr+igsbC508XjrvxE1vPHEhHYFluG+dP&#xA;bCryv88fPH+M/wAzNZ1eKT1dPjl+p6aa1X6tb/AjL7SGsn+yxVgeBXYq7FXYq7FXYq7FX31/zjP5&#xA;7Hmv8rNPSeX1NT0T/cZe1+0RCB6Dmu55QlanuwOFXkP/ADmP+Zn1nULTyDp8v7my4XmslTs0zrWC&#xA;E0/kRuZH+UvcYq+Y8Csg8g+TdQ85+b9M8t2HwzahMEkmpyEUS/FLKRtsiAt79MVfpFoWi6doejWW&#xA;j6bEIbDT4Ut7aMdkjUKKnuTSpPc4VUPNn/KLaz/zA3P/ACZbFX5iYFdirJ/y18j3vnjzrpnlu1LI&#xA;LyWt1Oor6VunxTSb7fCgNK9TQd8Vfo/pemWOlaZaaZYRCCxsoUt7WFeiRxKERR8gMKpV+YX/ACgP&#xA;mX/tlX3/AFDPir8zsCuxV+mP5e/8oD5a/wC2VY/9QyYVeIf85Y/kzLrdh/jvQoC+p6dFw1m3jFWm&#xA;tU+zMAOrwj7Xin+riqH8g60mveSdMvWPN5LcQ3H/ABkjHpyfeVrnS6XJx4wXhtdh8PNKPn975W8x&#xA;aU2k69qGmMpX6pcSRLy6lVYhT9K0Oc7lhwzI7i9np8viY4y7wl2Vtya6T5s806OgTSNZvtOQHkFt&#xA;LmaAcutaRsu+KrNW8yeYtYIOr6peaiVNQbueWeh6/wC7GbxxVLcVdirsVfSnlzy3efk9+RGveatV&#xA;BtfNnm6OPTtMtnHGW3imDUqDQrJ6fOUjtxUda4VfNeBXYq+n/wAn/wDnFPyt5q8gab5i8y3up2t/&#xA;qYeeG3s5II0W3LEQkiWCVquo515UoRhVmf8A0JZ+Vv8A1dNc/wCR9p/2S4q7/oSz8rf+rprn/I+0&#xA;/wCyXFXf9CWflb/1dNc/5H2n/ZLir5J87+V7vyp5u1by7dVMumXMkAc/txg1jk7bPGVYfPAqR4q9&#xA;y/5xH88/oH8xzodxJw0/zJF9XoT8Iuoavbt9Pxxj3YYVeN63q9/rOsXurahIZb6/nkuLlzWpeRiz&#xA;dfntgVA4q+xP+cPfyz/RXl64876hFS+1oGDTAw+KOzjb43H/ABmkX/gVB74VfRmKpZ5pR38sauiK&#xA;WdrK4CqBUkmJqADFX5hYFdir7Q/5xE/LQaF5Sl84X0dNT8wKFtAwoY7FGqtP+Mzjn/qhMKvoDFUh&#xA;8/o7+RPMiIpZ20u9CqBUkm3egAxV+ZuBXYq/TLyCjx+RPLkbgq6aXZKynqCLdAQcKp8QCKHcHqMV&#xA;eS61+WGn+V5b7UdBUQaPfTfWJ9NUUS2neiu8NPsxyUHwfst02NF2vZuaiYHryef7c01gZB02P6Hz&#xA;B/zkD5Xey8wQ69Cn+jamojnYVoLiIU3/ANaMCnyOQ7Sw1Li72zsTUcUDjPOP3f2/e8ozWO8dirsV&#xA;diqtZ2V5fXcVnZQSXN3Owjgt4VLyO7bBVVQSSfbFX1p+Qf8Azi8dIntvNXnqFJNRjpLp2iGjpA3V&#xA;ZbjqrSD9lBsvU77Aqkn/ADm7ql2dS8r6VypaJDc3RQdGkZ0jBP8Aqqu3zOKvmDAqd+SfK155r826&#xA;T5dtKibU7mOAuBXhGTWSQjwjjDOfYYq/S7T7G10+wtrCzjEVpaRJBbxL0WOJQiKPkophVXxV2Kux&#xA;V8i/85oeRTa65pfnS1jpBqKfUNRYdBcQgtCx93iqv+wxV804FRek6nc6Vqtlqdq3G6sJ4rmBulJI&#xA;XDqfvXFX0d+c/wDzil5mfzDea75EhjvrC/laeXSDIkM0Ejnk4jMrJG8ZapA5Aj7NDhVj35e/84kf&#xA;mBq+rQP5shXQdERw1zWWKW6lRTukSRNIFLdOTnbrRuhVfaNjY2lhZW9jZxLBaWsaQ28CCipHGoVV&#xA;A8ABTFVfFXYq+Pfzb/5xL81wa7dap5Fgj1HSLuRpl0z1I4Z7Yt8TIvqlEeMfsUblTah6lVAflr/z&#xA;iR531TWbefznAujaFEwe4h9aOS6nVT/doImcJy6FmII7A4q+zbe3gtreK3t41ighRY4okFFVEFFV&#xA;QOgAGKqmKtOiOjI6hkYEMpFQQeoIxV8bfmj/AM4kecbHWrm98kQpquiTu0kNj6scVzbg7mM+qUWR&#xA;V6KQ3KnUdyq3+Vn/ADiT5wvdbtr7zxAmlaJbusstj6sctxchTUR/umdY0boxLcqdB3Cr7IVVVQqg&#xA;KqiiqNgAMVbxVZcQQ3EEkEyh4pVKOp6EEUOGMiDY5sZwEgYnkXiP5k/lva3VnPpOqRPNpNyawXKG&#xA;jowNVIahCyL7ih8CNs3+PJDUQ4TzeRzYMmjyiUfp6H9BeLat/wA4uXUsT3PlvzLYzoKs1lqnKynU&#xA;fyq6iWKQ+9V+Q6ZqcuiyQNVfuegwdp4ckb4hE9x2Ycn/ADj/APmpPK0VjpAv3Q/H9WnhYAfzEsyi&#xA;hyGTTTgLkKbcGuxZZcMDfwKY2H/OLv53XbqG8vi1jOxluLu0UD5qsrP/AMLlDlvQvKn/ADhRrk0i&#xA;S+ategs4erW2nI08hHh6soiRD/sWxV9Cfl/+T3kDyFF/uA01VvWXjLqdwfWu32of3jfYB7rGFX2x&#xA;VmmKvK/+cgfyZ/5WT5bt/qEqW/mDSWeTTZJKiORZAPUgcj7PPgpVuxHgTir43v8A8l/zasb17Oby&#xA;jqzyxtxL29pNcRE1p8M0KyRsPcNir6S/5xg/IXWPKdzN5u8124ttXmiMGmaexVpII3/vJZKEhXcf&#xA;CF6ha13NAq+isVdirsVdirGvzG8jad548naj5bvj6aXiVguKVMM6HlFKP9Vhv4io74q+FPMv5C/m&#xA;zoGpyWEvlq+1AISI7vTYJbyCRR0ZXhVqV8GAPtir0X8jf+cZPNWo+YbLXfOVg+laHYyLcLY3I4XN&#xA;1Ih5JGYvtRx1Hxl6E9AN6hV9l4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqsmhhmiaKZFkicU&#xA;ZHAZSPcHDGRBsMZREhRFhJH8jeV3l9Q2dO5USSBT9AbMoa/LVX9zgHsnTk3w/aU3s7GzsoRDaQpB&#xA;EP2UAFT4nxOY88kpG5G3NxYo4xURQV8g2ITUtX0zTI1kv7hLdXNE5HdiOtAKk0y3FhnkNRFtGfU4&#xA;8IuZEUt/x15T/wCrgn/Ayf8ANOX/AJDN/N+5xP5X0388fb+pr/HflL/q4p/wMn/NOP5DN/N+5f5X&#xA;0388fb+pr/HvlH/q4p/wEn/NOP8AJ+b+b9y/yvpv54+39Tv8feUP+rkn/ASf804/yfm/m/cv8r6b&#xA;+ePt/U1/j/yf/wBXJP8AgJP+acP8n5/5v3L/ACvpv54+39TX/KwPJ/8A1ck/4CT/AJpx/k/P/N+5&#xA;f5X0388fb+p3/KwvJ3/VzT/gJP8AmnH+Ts/837l/lfTfzx9v6mv+VheTf+rmn/ASf804/wAnZ/5v&#xA;3L/K+m/nj7f1O/5WJ5M/6uaf8BJ/zTj/ACdn/m/cv8r6b+ePt/U1/wArF8l/9XRP+Ak/5px/k7P/&#xA;ADfuX+V9N/PH2/qa/wCVjeSv+ron/AS/804/ydn/AJv3L/K+m/nj7f1K1n578o3lyltb6nE08p4x&#xA;owZKk7AAuFFTkZ6HNEWYmmePtPTzlwiYsp9mI57sVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirzH81mb9L2a1+EW9QO1S7V/Vm/wCyPoPveP8AaM/vY/1f0oIeW/LWnadZ3GvXlwtzfIJY&#xA;oLUL8KGhBYsreOW/mcs5EYwKj3tA0OnxY4yzylxTF1HuQ9noPli78z22nW9/LcWF1GSsqgRyJJQk&#xA;IxZSD0/l75OeoyxxGRiBIMMWj089RHHGZlCQ9xB7uX6FLQPKS6h5quNHuWdYLQy+u8ZAekZ4KQSG&#xA;G7EdslqNZwYRMczTHR9neJqTildRu/hss0nyit35xm0O4aRbe3eX1ZEoH9NK8GFQR8VV7d8c2s4c&#xA;AyDmaRpuzuPVHDK6F/Icv0InSfLPlWfTNV1W+uLtLGxujDE0JjLGIlVQsChqTzHTIZtVmE4wiI8U&#xA;o3v3/Nu0+h08sc8kzLghKhVcunRLtYt/ISafK2lXV9Jfjj6KThPTPxDlyoin7Ne+XYZagyHGI8Pl&#xA;/a4+ohoxA+GZmfS6r7kzfyx5IsdF0q+1e6vo5dSh9QCH02UFQpbYxkgfGO+UDVZ55JRgI1E9b/W5&#xA;Z0Olx4oTyGdzF7V+rzSjzT5VtNOsbTVtKuze6RekpHKw4ujgH4W6fynsOmZGl1cpyMJjhnFxNdoI&#xA;44RyY5cWOSbX3lfyDpdnp0mq3eoJPfW6XHGL02X4lBP+69tzmPDVajJKQgI1E11/W5mTRaTFGByS&#xA;ncog7V+pKI9H8pah5k0zTtJuLt7O6bhdPNwWQHtwogHTxGZBzZoYpSmI8Q5U4g0+nyZoQxmXDLnd&#xA;X8NkN558pSeW9VEKFpLGcc7SZ6ciB9pWoAOSn+GT0OrGaF/xDmx7S0B02SucTyK3zp5ds9CuNOWz&#xA;klb61aR3LmVlJDsT9niq0G2Oi1EsolxVtKkdoaSOAx4SfVEF9B5x76C7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq8w/Nb/jsWn/MP/xu2b/sj6D73j/aP+9j/V/SUJB5u0W7061sfMGm&#xA;G6NoojiuYW4uEAAG1V7AftUOWy0eSMjLFKr6NEO0sU8cYZ4cXDsCOf4+Klr+nafoN7o2taS7tZ3X&#xA;G5iikNWX0yjEV9w2HT5JZozxz+obI1mCGnnjy4r4ZeoX5UyrX1XQoNc8wWzgTaksEdkw6gsoDkfP&#xA;7X0Zr9OfFMMR5Ru3c6wflxlzxO+ThEf0/rXX6wWkGq+b4SAL7TYRAa7iSUcf4R4MdyMcB/hmfs/B&#xA;TmAgJ6ofx4xXvP4ix3ylNp0HkHWZdSt2u7JbmP1bdWKFqmIL8QIIo1DmbrIyOpgImpVz+brezpQj&#xA;o8hmOKPENuXcxvXtQ8p3NmiaRpUljciQM8zzPICnEgrRmbuQcztPjzRl65cQ9zrdXm08o1igYSvn&#xA;ZOyaeef+UV8o/wDMNJ/xGHMbQ/32X3j9Lmdqf4vg/qn/AHrV4GT8p7P1NvU1AmKvcUk6fccMN9Yf&#xA;6v6lybdnRvrP9ac+aNQ8q2un6CutaXJqErWERidJXi4rxWoorLXfMXS480pT8OXD6j0c3W5dPGGL&#xA;xYGZ4B1IYv5euNKuPzA06XS7VrOyMyenbs5kIIWjfExY7nfM/URmNPITPFKnWaSeOWrgcY4Y2Nub&#xA;Kp7q380XeueUtQcLewXM0ujXDdQVYnh9H/EflmvjA4IwzR+kgcQ/H4t20pjVSyaeZ9QkTA/o/HT3&#xA;Me/NuKSHUNIhkFJI9PjRx1oVZgemZnZJuMiP5xcDt2JjOAPMQH6Xtmcu9q7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq80/Ne3mGoWVxwPotCYw/bkGJp9xzfdkSHCR1t5H2jgfEjLpVJ&#xA;ZF52tHtoYtR0S0vZLdBHHLQRnivQEcW+4bZedCQSYzlG3Ej2rExAyYoSMRV8kn8xeYrzW54nmRIY&#xA;LdfTtraIURF9vuGZOm00cQNbk8y4et1stRIEgAR5Acgq6z5ru9T0Ww0uSMJHYgAycqmQqvBSRTag&#xA;rkcGkGPJKY/iZ6ntCWXFDGRtD7eiy582Xc3laDQDGBHC/Iz8jVlBZghWnYsO/bDHSAZjk71n2hKW&#xA;nGGtgef6F/l/zfFpOlXOmz6dHf29zIJZFlai7BaDjxau61yOo0ZyTExLhIZ6PtEYcZxmAnGRvdZq&#xA;/mfSL3T5bW30C2sppOPG6jPxpxYMafCOoFMOHSzjIEzMh3LqNdiyQMY4oxJ6j+xFxefrL9GWNhe6&#xA;Hb3wsIxFFJM9T0AJAKmleIyuXZ8uOUozMeIt8e1o+HGE8cZcArf+xKfM/m2+130InijtLG1FLazh&#xA;FEXtU+Jpt4ZkaXSRxWbuR5kuJre0J56BAjGPIBNm/MOwmtLSC+8v2161nCkEckr1NEUDuhpWmY/8&#xA;nSEiYzMbNuZ/K8DGInijLhFb/wBiVzebLNdcsNVsdIhsRZHk1vC1FkNepIUU+7LxpJeHKEpGXF1c&#xA;aWvj4sckICPD0HVKrzXbqXX5dat/9GuXuDcxhTXgxblSvfL4YAMYxncVTjT1MjlOUbS4rR3mjzJe&#xA;+btVtHW0EdyI1t0hiJfmxYmoqPFsq0umjp4Hfbm5Gt1ctXkieH1VWz//2Q=="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpMM:DerivedFrom
    stRef:instanceID="xmp.iid:d09dd64a-2e90-4c2b-8c60-2be2c9e6bf3f"
    stRef:documentID="xmp.did:d09dd64a-2e90-4c2b-8c60-2be2c9e6bf3f"
    stRef:originalDocumentID="uuid:5D20892493BFDB11914A8590D31508C8"
    stRef:renditionClass="proof:pdf"/>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:53767c5f-5ce7-4e47-a14f-5f7b1c620460"
      stEvt:when="2013-12-03T13:07:19+01:00"
      stEvt:softwareAgent="Adobe Illustrator CC (Macintosh)"
      stEvt:changed="/"/>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:3fcd56ec-b898-4004-bb47-c87871940bb8"
      stEvt:when="2014-01-14T15:13:37+01:00"
      stEvt:softwareAgent="Adobe Illustrator CC (Macintosh)"
      stEvt:changed="/"/>
    </rdf:Seq>
   </xmpMM:History>
   <xmpTPg:MaxPageSize
    stDim:w="270.332825"
    stDim:h="158.566679"
    stDim:unit="Millimeters"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Groupe de nuances par défaut"
       xmpG:groupType="0">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="Blanc"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="255"
         xmpG:blue="255"/>
        <rdf:li
         xmpG:swatchName="Noir"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="Rouge CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="227"
         xmpG:green="6"
         xmpG:blue="19"/>
        <rdf:li
         xmpG:swatchName="Jaune CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="237"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="Vert CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="150"
         xmpG:blue="64"/>
        <rdf:li
         xmpG:swatchName="Cyan CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="159"
         xmpG:blue="227"/>
        <rdf:li
         xmpG:swatchName="Bleu CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="49"
         xmpG:green="39"
         xmpG:blue="131"/>
        <rdf:li
         xmpG:swatchName="Magenta CMJN"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="230"
         xmpG:green="0"
         xmpG:blue="126"/>
        <rdf:li
         xmpG:swatchName="C=15 M=100 J=90 N=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="190"
         xmpG:green="22"
         xmpG:blue="34"/>
        <rdf:li
         xmpG:swatchName="C=0 M=90 J=85 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="230"
         xmpG:green="51"
         xmpG:blue="42"/>
        <rdf:li
         xmpG:swatchName="C=0 M=80 J=95 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="233"
         xmpG:green="78"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=50 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="243"
         xmpG:green="146"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="C=0 M=35 J=85 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="249"
         xmpG:green="178"
         xmpG:blue="51"/>
        <rdf:li
         xmpG:swatchName="C=5 M=0 J=90 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="252"
         xmpG:green="234"
         xmpG:blue="16"/>
        <rdf:li
         xmpG:swatchName="C=20 M=0 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="222"
         xmpG:green="220"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="C=50 M=0 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="149"
         xmpG:green="193"
         xmpG:blue="31"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="58"
         xmpG:green="170"
         xmpG:blue="53"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 J=100 N=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="141"
         xmpG:blue="54"/>
        <rdf:li
         xmpG:swatchName="C=90 M=30 J=95 N=30"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="102"
         xmpG:blue="51"/>
        <rdf:li
         xmpG:swatchName="C=75 M=0 J=75 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="47"
         xmpG:green="172"
         xmpG:blue="102"/>
        <rdf:li
         xmpG:swatchName="C=80 M=10 J=45 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="161"
         xmpG:blue="154"/>
        <rdf:li
         xmpG:swatchName="C=70 M=15 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="54"
         xmpG:green="169"
         xmpG:blue="225"/>
        <rdf:li
         xmpG:swatchName="C=85 M=50 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="113"
         xmpG:blue="184"/>
        <rdf:li
         xmpG:swatchName="C=100 M=95 J=5 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="45"
         xmpG:green="46"
         xmpG:blue="131"/>
        <rdf:li
         xmpG:swatchName="C=100 M=100 J=25 N=25"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="41"
         xmpG:green="35"
         xmpG:blue="92"/>
        <rdf:li
         xmpG:swatchName="C=75 M=100 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="102"
         xmpG:green="36"
         xmpG:blue="131"/>
        <rdf:li
         xmpG:swatchName="C=50 M=100 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="149"
         xmpG:green="27"
         xmpG:blue="129"/>
        <rdf:li
         xmpG:swatchName="C=35 M=100 J=35 N=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="163"
         xmpG:green="25"
         xmpG:blue="91"/>
        <rdf:li
         xmpG:swatchName="C=10 M=100 J=50 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="214"
         xmpG:green="11"
         xmpG:blue="82"/>
        <rdf:li
         xmpG:swatchName="C=0 M=95 J=20 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="231"
         xmpG:green="29"
         xmpG:blue="115"/>
        <rdf:li
         xmpG:swatchName="C=25 M=25 J=40 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="203"
         xmpG:green="187"
         xmpG:blue="160"/>
        <rdf:li
         xmpG:swatchName="C=40 M=45 J=50 N=5"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="164"
         xmpG:green="138"
         xmpG:blue="123"/>
        <rdf:li
         xmpG:swatchName="C=50 M=50 J=60 N=25"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="123"
         xmpG:green="106"
         xmpG:blue="88"/>
        <rdf:li
         xmpG:swatchName="C=55 M=60 J=65 N=40"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="99"
         xmpG:green="78"
         xmpG:blue="66"/>
        <rdf:li
         xmpG:swatchName="C=25 M=40 J=65 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="202"
         xmpG:green="158"
         xmpG:blue="103"/>
        <rdf:li
         xmpG:swatchName="C=30 M=50 J=75 N=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="177"
         xmpG:green="127"
         xmpG:blue="74"/>
        <rdf:li
         xmpG:swatchName="C=35 M=60 J=80 N=25"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="147"
         xmpG:green="96"
         xmpG:blue="55"/>
        <rdf:li
         xmpG:swatchName="C=40 M=65 J=90 N=35"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="125"
         xmpG:green="78"
         xmpG:blue="36"/>
        <rdf:li
         xmpG:swatchName="C=40 M=70 J=100 N=50"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="104"
         xmpG:green="60"
         xmpG:blue="17"/>
        <rdf:li
         xmpG:swatchName="C=50 M=70 J=80 N=70"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="67"
         xmpG:green="41"
         xmpG:blue="24"/>
        <rdf:li
         xmpG:swatchName="PANTONE P Process Cyan C"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="0"
         xmpG:green="158"
         xmpG:blue="227"/>
        <rdf:li
         xmpG:swatchName="PANTONE P 115-6 C"
         xmpG:type="PROCESS"
         xmpG:tint="100.000000"
         xmpG:mode="RGB"
         xmpG:red="41"
         xmpG:green="189"
         xmpG:blue="239"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Gris"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=100"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="29"
         xmpG:green="29"
         xmpG:blue="27"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=90"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="60"
         xmpG:green="60"
         xmpG:blue="59"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=80"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="87"
         xmpG:green="87"
         xmpG:blue="86"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=70"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="112"
         xmpG:green="111"
         xmpG:blue="111"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=60"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="135"
         xmpG:green="135"
         xmpG:blue="135"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=50"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="157"
         xmpG:green="157"
         xmpG:blue="156"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=40"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="178"
         xmpG:green="178"
         xmpG:blue="178"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=30"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="198"
         xmpG:green="198"
         xmpG:blue="198"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=20"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="218"
         xmpG:green="218"
         xmpG:blue="218"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=10"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="237"
         xmpG:green="237"
         xmpG:blue="237"/>
        <rdf:li
         xmpG:swatchName="C=0 M=0 J=0 N=5"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="246"
         xmpG:green="246"
         xmpG:blue="246"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
     <rdf:li>
      <rdf:Description
       xmpG:groupName="Couleurs vives"
       xmpG:groupType="1">
      <xmpG:Colorants>
       <rdf:Seq>
        <rdf:li
         xmpG:swatchName="C=0 M=100 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="227"
         xmpG:green="6"
         xmpG:blue="19"/>
        <rdf:li
         xmpG:swatchName="C=0 M=75 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="234"
         xmpG:green="91"
         xmpG:blue="12"/>
        <rdf:li
         xmpG:swatchName="C=0 M=10 J=95 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="255"
         xmpG:green="222"
         xmpG:blue="0"/>
        <rdf:li
         xmpG:swatchName="C=85 M=10 J=100 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="0"
         xmpG:green="152"
         xmpG:blue="58"/>
        <rdf:li
         xmpG:swatchName="C=100 M=90 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="39"
         xmpG:green="52"
         xmpG:blue="139"/>
        <rdf:li
         xmpG:swatchName="C=60 M=90 J=0 N=0"
         xmpG:mode="RGB"
         xmpG:type="PROCESS"
         xmpG:red="130"
         xmpG:green="54"
         xmpG:blue="140"/>
       </rdf:Seq>
      </xmpG:Colorants>
      </rdf:Description>
     </rdf:li>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -449.48 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 449.48 li
766.298 449.48 li
766.298 0 li
cp
clp
gsave
0 449.48 mo
767 449.48 li
767 -.519964 li
0 -.519964 li
0 449.48 li
clp
303.473 132.919 mo
303.34 125.111 302.935 101.351 283.294 94.747 cv
274.27 91.7128 260.795 93.3499 250.038 107.045 cv
247.959 110.239 li
204.663 191.813 li
204.676 167.645 204.623 144.76 204.421 132.919 cv
204.288 125.111 203.883 101.352 184.242 94.747 cv
175.219 91.7128 161.744 93.349 150.986 107.044 cv
148.907 110.239 li
65.205 267.94 li
59.6502 278.407 63.6311 291.395 74.097 296.95 cv
77.303 298.652 80.7452 299.458 84.1371 299.458 cv
91.8221 299.458 99.2531 295.319 103.107 288.057 cv
161.75 177.57 li
161.779 221.338 161.518 277.102 161.514 277.898 cv
161.46 289.243 170.229 298.549 181.376 299.372 cv
181.8 299.408 182.223 299.431 182.646 299.442 cv
182.867 299.454 li
182.971 299.454 li
183.003 299.453 li
183.189 299.458 li
190.874 299.458 198.305 295.319 202.159 288.057 cv
260.802 177.571 li
260.831 221.339 260.57 277.102 260.566 277.898 cv
260.51 289.747 270.07 299.397 281.919 299.454 cv
282.023 299.454 li
293.825 299.454 303.42 289.916 303.476 278.101 cv
303.498 273.471 304.008 164.332 303.473 132.919 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
.743679 .675013 .671199 .885771 cmyk
f
513.134 234.151 mo
511.915 227.245 508.079 221.227 502.333 217.208 cv
497.897 214.107 492.7 212.466 487.303 212.466 cv
478.731 212.466 470.682 216.655 465.775 223.671 cv
455.57 238.258 438.804 246.965 420.927 246.965 cv
417.945 246.965 414.946 246.717 412.013 246.224 cv
397.648 243.808 385.082 235.947 376.63 224.088 cv
368.178 212.221 364.851 197.775 367.264 183.411 cv
369.676 169.047 377.537 156.481 389.401 148.027 cv
401.209 139.613 415.766 136.259 430.077 138.663 cv
436.198 139.689 442.022 141.711 447.386 144.667 cv
451.261 146.804 455.637 147.934 460.039 147.934 cv
469.613 147.934 478.428 142.728 483.047 134.354 cv
486.434 128.212 487.226 121.122 485.279 114.386 cv
483.33 107.649 478.875 102.073 472.734 98.6909 cv
462.174 92.867 450.747 88.8958 438.769 86.8828 cv
432.831 85.888 426.795 85.3809 420.829 85.3809 cv
398.6 85.3809 377.198 92.2589 358.938 105.27 cv
335.652 121.858 320.221 146.522 315.487 174.718 cv
310.751 202.914 317.281 231.265 333.871 254.547 cv
338.252 260.701 343.273 266.392 348.789 271.457 cv
363.955 285.376 382.812 294.557 403.319 298.001 cv
409.087 298.968 414.983 299.458 420.842 299.458 cv
455.895 299.458 488.775 282.38 508.793 253.769 cv
512.813 248.022 514.355 241.057 513.134 234.151 cv
f
gsave
402.552 64.892 mo
402.352 64.897 li
401.951 64.9061 li
401.184 64.9001 400.403 64.9431 399.615 65.008 cv
399.745 65.009 399.845 65.0099 399.721 65.013 cv
399.805 65.0211 li
400.472 65.0919 li
401.79 65.23 li
402.641 65.3091 403.497 65.388 404.556 65.6791 cv
405.535 65.931 406.496 66.176 407.439 66.4179 cv
408.289 66.739 409.038 67.119 409.806 67.4569 cv
412.835 68.8409 415.121 70.6021 416.994 72.2601 cv
419.436 74.4399 421.14 76.535 422.418 78.3161 cv
424.007 79.558 425.292 80.7129 426.268 81.6549 cv
428.089 83.4491 429.059 84.4061 429.059 84.4061 cv
429.059 84.4061 428.403 83.245 427.171 81.068 cv
425.819 78.9539 423.835 75.7691 420.137 72.3789 cv
418.287 70.6959 416.023 68.9041 413.014 67.48 cv
412.25 67.1311 411.507 66.7409 410.661 66.4089 cv
409.721 66.156 408.764 65.8961 407.788 65.633 cv
406.733 65.326 405.878 65.2359 405.028 65.1461 cv
403.712 64.989 li
403.046 64.9101 li
402.962 64.9001 li
403.191 64.899 402.672 64.892 402.568 64.892 cv
402.552 64.892 li
clp
429.059 84.4061 mo
429.059 84.4061 428.089 83.4491 426.268 81.6549 cv
425.292 80.7129 424.007 79.558 422.418 78.3161 cv
422.418 78.3155 422.417 78.315 422.417 78.3145 cv
422.417 78.3146 422.417 78.3148 422.417 78.3149 cv
422.417 78.3149 li
422.417 78.3149 li
422.332 78.1966 422.245 78.0767 422.156 77.9556 cv
420.909 76.2551 419.273 74.2945 416.994 72.2601 cv
415.121 70.6021 412.835 68.8409 409.806 67.4569 cv
409.644 67.3855 409.482 67.3122 409.32 67.238 cv
408.879 67.0352 408.435 66.8254 407.965 66.6282 cv
407.793 66.5561 407.618 66.4857 407.439 66.4179 cv
406.496 66.176 405.535 65.931 404.556 65.6791 cv
404.292 65.6065 404.04 65.5471 403.798 65.4976 cv
403.08 65.35 402.446 65.2901 401.815 65.2323 cv
401.806 65.2315 401.798 65.2307 401.79 65.23 cv
401.263 65.1748 li
400.473 65.0919 li
399.805 65.0209 li
399.73 65.0128 li
399.763 65.0119 399.777 65.0112 399.778 65.0106 cv
399.778 65.0106 399.777 65.0105 399.777 65.0104 cv
399.779 65.0101 399.773 65.0099 399.761 65.0097 cv
399.734 65.0089 399.678 65.0085 399.615 65.008 cv
399.615 65.008 li
400.354 64.9471 401.087 64.9055 401.809 64.9055 cv
401.856 64.9055 401.904 64.9057 401.951 64.9061 cv
402.352 64.897 li
402.552 64.892 li
402.568 64.892 li
402.672 64.892 403.191 64.899 402.962 64.9001 cv
403.046 64.9101 li
403.712 64.989 li
405.028 65.1461 li
405.878 65.2359 406.733 65.326 407.788 65.633 cv
408.764 65.8961 409.721 66.156 410.661 66.4089 cv
411.507 66.7409 412.25 67.1311 413.014 67.48 cv
416.023 68.9041 418.287 70.6959 420.137 72.3789 cv
423.835 75.7691 425.819 78.9539 427.171 81.068 cv
428.403 83.245 429.059 84.4061 429.059 84.4061 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 74.6487 ]ct
/0 
<<
/ShadingType 2 
/BBox [.451682 -.0455466 .589134 .0455495 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /0 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 74.6487 ]ct
clp
/0 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.451682 -.0455466 .589134 .0455495 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /0 /Gradient get_res exec grestore
}if
np
grestore
gsave
313.409 182.867 mo
313.183 183.068 312.958 183.296 312.732 183.52 cv
312.648 184.427 312.57 185.407 312.512 186.443 cv
311.788 187.646 311.071 188.985 310.285 190.48 cv
308.46 194.298 306.71 199.387 307.157 204.66 cv
307.74 209.947 311.16 214.609 316.645 217.888 cv
322.112 221.172 329.162 223.067 336.693 224.332 cv
337.218 224.417 337.77 224.462 338.303 224.537 cv
338.289 224.433 338.27 224.332 338.256 224.227 cv
338.219 223.957 338.197 223.683 338.161 223.413 cv
338.044 223.395 337.923 223.383 337.808 223.362 cv
330.295 221.997 323.271 220.007 317.848 216.65 cv
312.408 213.298 309.05 208.591 308.539 203.298 cv
308.162 198.019 309.98 192.953 311.855 189.16 cv
312.661 187.675 313.396 186.346 314.137 185.154 cv
314.217 183.986 314.322 182.873 314.432 181.877 cv
314.096 182.2 313.777 182.501 313.409 182.867 cv
clp
338.302 224.537 mo
337.819 224.469 337.32 224.425 336.838 224.354 cv
336.789 224.347 336.741 224.34 336.693 224.332 cv
335.764 224.176 334.843 224.01 333.931 223.834 cv
327.448 222.578 321.438 220.766 316.645 217.888 cv
315.447 217.172 314.347 216.39 313.354 215.549 cv
310.521 213.152 308.555 210.281 307.644 207.121 cv
307.413 206.319 307.25 205.497 307.157 204.66 cv
306.709 199.388 308.461 194.298 310.285 190.48 cv
310.446 190.175 310.603 189.876 310.759 189.583 cv
311.206 188.742 311.634 187.953 312.059 187.213 cv
312.211 186.95 312.361 186.694 312.513 186.443 cv
312.569 185.407 312.648 184.427 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.958 183.296 313.183 183.068 313.409 182.867 cv
313.777 182.501 314.096 182.2 314.432 181.877 cv
314.432 181.877 li
314.322 182.873 314.217 183.986 314.137 185.154 cv
313.396 186.346 312.661 187.675 311.855 189.16 cv
309.98 192.953 308.162 198.019 308.539 203.298 cv
309.007 208.147 311.865 212.504 316.524 215.779 cv
316.95 216.078 317.392 216.369 317.848 216.65 cv
323.271 220.007 330.295 221.997 337.808 223.362 cv
337.923 223.383 338.044 223.395 338.161 223.413 cv
338.161 223.413 li
338.161 223.413 li
338.197 223.683 338.219 223.957 338.256 224.227 cv
338.259 224.248 338.262 224.268 338.265 224.289 cv
338.277 224.371 338.291 224.453 338.302 224.537 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 203.207 ]ct
/1 
<<
/ShadingType 2 
/BBox [.0179794 -.0995731 .165463 .0995737 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /1 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 203.207 ]ct
clp
/1 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.0179794 -.0995731 .165463 .0995737 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /1 /Gradient get_res exec grestore
}if
np
grestore
gsave
408.358 305.026 mo
411.237 303.293 413.54 301.313 415.432 299.416 cv
415.259 299.408 li
413.411 301.303 411.166 303.279 408.358 305.026 cv
clp
408.358 305.026 mo
409.022 304.613 409.654 304.187 410.257 303.753 cv
411.519 302.844 412.653 301.897 413.678 300.949 cv
414.236 300.433 414.762 299.918 415.259 299.408 cv
415.259 299.408 li
415.259 299.408 li
415.432 299.416 li
415.432 299.416 li
413.54 301.313 411.237 303.293 408.358 305.026 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 302.217 ]ct
/2 
<<
/ShadingType 2 
/BBox [.492497 -.0131124 .525519 .013114 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /2 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 302.217 ]ct
clp
/2 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.492497 -.0131124 .525519 .013114 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /2 /Gradient get_res exec grestore
}if
np
grestore
gsave
401.098 71.228 mo
399.758 71.282 li
399.08 71.309 li
398.994 71.3131 li
398.853 71.315 398.905 71.314 398.997 71.314 cv
399.11 71.3131 399.285 71.3131 399.236 71.3171 cv
399.095 71.3449 li
398.815 71.402 li
392.793 72.3121 386.936 76.514 382.032 82.4591 cv
377.133 88.439 373.175 96.0231 369.766 104.268 cv
366.396 112.548 363.82 121.627 361.663 131.084 cv
359.496 140.55 358.007 150.453 356.872 160.527 cv
356.349 165.57 355.971 170.656 355.667 175.765 cv
355.499 178.33 355.435 180.807 355.328 183.368 cv
355.291 186.05 355.196 188.583 355.221 191.125 cv
355.125 202.775 355.719 214.379 356.992 225.625 cv
358.322 225.618 359.645 225.62 360.989 225.591 cv
371.902 225.277 383.305 224.01 394.787 221.959 cv
383.666 223.743 372.64 224.783 362.085 224.946 cv
360.741 224.958 359.418 224.937 358.088 224.926 cv
356.966 213.665 356.527 202.054 356.779 190.406 cv
356.787 187.864 356.917 185.333 356.99 182.652 cv
357.132 180.092 357.228 177.616 357.43 175.053 cv
357.802 169.949 358.249 164.869 358.839 159.833 cv
360.109 149.776 361.731 139.893 364.024 130.458 cv
366.307 121.029 369.004 111.985 372.485 103.752 cv
376.004 95.553 380.063 88.023 385.042 82.109 cv
390.025 76.2301 395.938 72.1061 401.971 71.2779 cv
402.251 71.224 li
402.393 71.1971 li
402.484 71.1921 401.836 71.1909 402.151 71.1909 cv
402.237 71.1881 li
402.404 71.184 li
402.354 71.184 li
401.965 71.184 401.535 71.204 401.098 71.228 cv
clp
356.993 225.625 mo
355.72 214.379 355.124 202.775 355.221 191.125 cv
355.215 190.487 355.216 189.849 355.222 189.21 cv
355.225 188.917 355.229 188.623 355.233 188.329 cv
355.258 186.708 355.305 185.068 355.328 183.368 cv
355.418 181.222 355.478 179.135 355.593 177.006 cv
355.615 176.595 355.64 176.181 355.667 175.765 cv
355.971 170.656 356.349 165.57 356.872 160.527 cv
357.403 155.817 358.01 151.145 358.729 146.537 cv
359.548 141.29 360.51 136.125 361.663 131.085 cv
363.175 124.457 364.892 118.015 366.944 111.904 cv
367.82 109.295 368.758 106.745 369.766 104.268 cv
370.792 101.786 371.869 99.3627 373.005 97.0258 cv
375.644 91.6012 378.608 86.6384 382.032 82.4589 cv
383.584 80.5778 385.231 78.8713 386.949 77.3883 cv
390.659 74.1843 394.698 72.0241 398.815 71.402 cv
398.955 71.3735 li
399.095 71.3449 li
399.123 71.3394 li
399.236 71.3171 li
399.242 71.3166 399.244 71.3162 399.244 71.3159 cv
399.244 71.3158 399.244 71.3157 399.244 71.3156 cv
399.244 71.3152 399.239 71.3149 399.231 71.3146 cv
399.209 71.3138 399.166 71.3135 399.118 71.3135 cv
399.096 71.3135 399.073 71.3136 399.05 71.3137 cv
399.031 71.3137 399.011 71.3138 398.994 71.3138 cv
398.955 71.314 398.925 71.3142 398.913 71.3142 cv
398.912 71.3142 398.913 71.3142 398.912 71.3142 cv
398.923 71.314 398.948 71.3137 398.994 71.3131 cv
399.08 71.309 li
399.758 71.282 li
401.098 71.228 li
401.165 71.2243 401.231 71.2208 401.297 71.2174 cv
401.665 71.1984 402.024 71.184 402.354 71.184 cv
402.404 71.184 li
402.404 71.184 li
402.237 71.1881 li
402.151 71.1909 li
401.836 71.1909 402.484 71.1921 402.393 71.1971 cv
402.251 71.224 li
401.971 71.2779 li
395.938 72.1061 390.025 76.2301 385.042 82.109 cv
381.893 85.8496 379.112 90.2366 376.602 95.0306 cv
375.144 97.816 373.778 100.739 372.485 103.752 cv
369.004 111.985 366.307 121.029 364.024 130.458 cv
361.731 139.893 360.109 149.776 358.839 159.833 cv
358.249 164.869 357.802 169.949 357.43 175.053 cv
357.228 177.616 357.132 180.092 356.99 182.652 cv
356.917 185.333 356.787 187.864 356.779 190.406 cv
356.527 202.054 356.966 213.665 358.088 224.926 cv
359.137 224.935 360.182 224.95 361.236 224.95 cv
361.518 224.95 361.801 224.949 362.085 224.946 cv
366.874 224.872 371.759 224.618 376.706 224.195 cv
382.664 223.686 388.711 222.934 394.787 221.959 cv
388.482 223.085 382.202 223.975 376.013 224.6 cv
371.137 225.093 366.32 225.422 361.592 225.573 cv
361.391 225.579 361.19 225.585 360.989 225.591 cv
360.829 225.594 360.669 225.597 360.51 225.6 cv
359.337 225.619 358.177 225.619 357.014 225.625 cv
357.007 225.625 357 225.625 356.993 225.625 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 148.404 ]ct
/3 
<<
/ShadingType 2 
/BBox [.243992 -.360481 .465076 .360486 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /3 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 148.404 ]ct
clp
/3 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.243992 -.360481 .465076 .360486 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /3 /Gradient get_res exec grestore
}if
np
grestore
gsave
361.095 250.441 mo
363.237 259.627 365.761 268.408 369.241 276.198 cv
372.756 283.927 376.851 290.959 382.079 295.885 cv
387.307 300.832 393.529 303.16 399.672 302.254 cv
402.134 301.832 404.456 301.027 406.607 300.018 cv
404.47 300.977 402.17 301.737 399.739 302.121 cv
393.584 302.944 387.394 300.533 382.233 295.516 cv
377.071 290.52 373.07 283.434 369.66 275.659 cv
366.284 267.823 363.877 259.009 361.858 249.795 cv
361.183 246.592 360.603 243.312 360.066 240.001 cv
359.723 239.976 359.381 239.954 359.036 239.936 cv
359.654 243.491 360.322 247.009 361.095 250.441 cv
clp
397.054 302.446 mo
397.05 302.446 397.047 302.446 397.043 302.446 cv
393.866 302.444 390.707 301.6 387.718 300 cv
385.751 298.948 383.858 297.568 382.079 295.885 cv
378.853 292.844 376.057 289.002 373.564 284.688 cv
372.017 282.013 370.587 279.157 369.241 276.198 cv
366.476 270.008 364.314 263.193 362.469 256.047 cv
361.991 254.199 361.535 252.328 361.095 250.441 cv
360.974 249.901 360.855 249.359 360.738 248.816 cv
360.113 245.901 359.557 242.932 359.036 239.936 cv
359.361 239.953 359.683 239.973 360.007 239.997 cv
360.026 239.998 360.046 240 360.065 240.001 cv
360.065 240.001 li
360.065 240.001 li
360.065 240.001 360.065 240.001 360.065 240.001 cv
360.066 240.001 360.066 240.001 360.066 240.001 cv
360.066 240.001 li
360.066 240.001 li
360.066 240.001 li
360.066 240.001 li
360.603 243.312 361.183 246.592 361.858 249.795 cv
363.877 259.009 366.284 267.823 369.66 275.659 cv
372.03 281.062 374.685 286.133 377.817 290.4 cv
379.192 292.274 380.658 293.992 382.233 295.516 cv
386.729 299.887 392.005 302.28 397.36 302.279 cv
398.152 302.279 398.946 302.227 399.739 302.121 cv
402.163 301.738 404.457 300.981 406.589 300.026 cv
405.799 300.396 404.986 300.739 404.151 301.045 cv
402.719 301.57 401.223 301.988 399.672 302.254 cv
399.655 302.257 399.637 302.259 399.62 302.262 cv
398.766 302.385 397.91 302.446 397.056 302.446 cv
397.055 302.446 397.054 302.446 397.054 302.446 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 271.191 ]ct
/4 
<<
/ShadingType 2 
/BBox [.262249 -.145906 .484322 .149238 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /4 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 271.191 ]ct
clp
/4 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.262249 -.145906 .484322 .149238 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /4 /Gradient get_res exec grestore
}if
np
grestore
gsave
504.004 141.23 mo
505.869 142.429 507.918 143.95 509.802 146.166 cv
510.268 146.73 510.767 147.27 511.237 147.906 cv
511.658 148.636 512.087 149.38 512.525 150.138 cv
513.016 150.955 513.276 151.648 513.535 152.337 cv
513.95 153.4 li
514.16 153.938 li
514.187 154.006 li
514.156 153.883 514.193 154.018 514.229 154.152 cv
514.257 154.255 514.284 154.357 514.281 154.345 cv
514.319 154.512 li
514.396 154.848 li
515.34 158.426 515.35 162.565 514.485 166.543 cv
513.631 170.543 511.92 174.343 509.839 177.928 cv
505.641 185.119 499.797 191.488 493.09 197.167 cv
486.406 202.902 478.904 208.149 470.794 212.725 cv
462.706 217.356 454.06 221.427 445.089 224.933 cv
440.595 226.652 436.051 228.348 431.416 229.768 cv
429.117 230.511 426.712 231.192 424.383 231.883 cv
420.963 232.823 li
419.179 233.31 li
417.413 233.75 li
411.165 235.286 404.865 236.575 398.563 237.595 cv
405.189 236.644 411.818 235.384 418.395 233.86 cv
420.166 233.443 li
421.958 232.981 li
425.389 232.086 li
427.728 231.427 430.142 230.777 432.45 230.066 cv
437.103 228.707 441.67 227.072 446.187 225.413 cv
455.204 222.028 463.903 218.073 472.053 213.55 cv
480.223 209.085 487.795 203.937 494.555 198.293 cv
501.338 192.704 507.265 186.413 511.56 179.279 cv
513.688 175.723 515.45 171.946 516.358 167.957 cv
517.275 163.991 517.321 159.853 516.424 156.263 cv
516.352 155.925 li
516.316 155.757 li
516.32 155.77 516.295 155.667 516.268 155.563 cv
516.234 155.429 516.198 155.295 516.227 155.417 cv
516.202 155.349 li
515.999 154.808 li
515.597 153.74 li
515.349 153.047 515.098 152.35 514.617 151.528 cv
514.19 150.765 513.77 150.015 513.359 149.279 cv
512.898 148.636 512.407 148.09 511.948 147.519 cv
510.093 145.278 508.065 143.73 506.217 142.506 cv
505.193 141.834 504.213 141.275 503.28 140.792 cv
503.521 140.938 503.758 141.072 504.004 141.23 cv
clp
398.563 237.595 mo
404.865 236.575 411.165 235.286 417.413 233.75 cv
419.179 233.31 li
420.963 232.823 li
421.791 232.596 li
424.383 231.883 li
426.712 231.193 429.117 230.511 431.415 229.769 cv
432.924 229.307 434.422 228.815 435.912 228.303 cv
439.003 227.242 442.057 226.093 445.089 224.933 cv
454.06 221.427 462.706 217.356 470.794 212.725 cv
478.443 208.409 485.551 203.497 491.942 198.141 cv
492.327 197.818 492.71 197.493 493.091 197.167 cv
495.157 195.417 497.141 193.602 499.02 191.718 cv
502.781 187.947 506.122 183.9 508.86 179.543 cv
509.196 179.009 509.522 178.471 509.839 177.928 cv
511.92 174.343 513.63 170.543 514.485 166.543 cv
514.692 165.592 514.848 164.633 514.954 163.674 cv
515.065 162.673 515.12 161.673 515.119 160.685 cv
515.118 158.657 514.879 156.679 514.396 154.848 cv
514.35 154.646 li
514.319 154.512 li
514.282 154.345 li
514.282 154.346 514.282 154.346 514.282 154.346 cv
514.282 154.346 li
514.282 154.346 li
514.282 154.346 514.256 154.249 514.23 154.152 cv
514.204 154.054 514.177 153.957 514.176 153.957 cv
514.175 153.957 514.175 153.957 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.175 153.958 514.176 153.96 514.177 153.965 cv
514.178 153.972 514.182 153.985 514.186 154.004 cv
514.181 153.991 li
514.16 153.938 li
513.951 153.4 li
513.535 152.337 li
513.336 151.804 513.135 151.269 512.827 150.678 cv
512.737 150.504 512.637 150.324 512.525 150.138 cv
512.344 149.826 512.166 149.516 511.988 149.208 cv
511.814 148.905 511.64 148.605 511.468 148.306 cv
511.391 148.173 511.314 148.039 511.237 147.906 cv
511.168 147.813 511.099 147.722 511.029 147.633 cv
510.623 147.112 510.201 146.648 509.803 146.166 cv
507.918 143.95 505.869 142.429 504.004 141.23 cv
503.761 141.074 503.526 140.939 503.286 140.796 cv
503.284 140.795 503.282 140.793 503.28 140.792 cv
503.28 140.792 li
504.213 141.275 505.193 141.834 506.217 142.506 cv
508.065 143.73 510.093 145.278 511.948 147.519 cv
512.407 148.09 512.898 148.636 513.359 149.279 cv
513.77 150.015 514.19 150.765 514.617 151.528 cv
515.098 152.35 515.349 153.047 515.597 153.74 cv
515.999 154.808 li
516.202 155.349 li
516.227 155.417 li
516.219 155.383 516.216 155.369 516.216 155.369 cv
516.218 155.369 516.243 155.466 516.268 155.563 cv
516.293 155.661 516.317 155.758 516.316 155.758 cv
516.316 155.758 516.316 155.758 516.316 155.757 cv
516.352 155.925 li
516.424 156.263 li
517.321 159.853 517.275 163.991 516.358 167.957 cv
515.45 171.946 513.688 175.723 511.56 179.279 cv
507.265 186.413 501.338 192.704 494.555 198.293 cv
487.795 203.937 480.223 209.085 472.053 213.55 cv
463.903 218.073 455.204 222.028 446.187 225.413 cv
441.67 227.072 437.103 228.707 432.45 230.066 cv
430.142 230.777 427.728 231.427 425.389 232.086 cv
421.958 232.981 li
420.166 233.443 li
418.395 233.86 li
411.818 235.384 405.189 236.644 398.563 237.595 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 189.193 ]ct
/5 
<<
/ShadingType 2 
/BBox [.446771 -.225948 1.00116 .225951 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /5 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 189.193 ]ct
clp
/5 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.446771 -.225948 1.00116 .225951 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /5 /Gradient get_res exec grestore
}if
np
grestore
gsave
408.745 298.969 mo
409.226 299.013 409.761 299.056 410.327 299.098 cv
409.775 299.049 409.253 298.999 408.784 298.95 cv
408.745 298.969 li
clp
410.324 299.098 mo
409.765 299.056 409.236 299.013 408.759 298.97 cv
408.754 298.97 408.749 298.969 408.745 298.969 cv
408.745 298.969 li
408.784 298.95 li
409.252 298.999 409.773 299.049 410.324 299.098 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 299.024 ]ct
/6 
<<
/ShadingType 2 
/BBox [.494303 -.000343635 .501688 .0003466 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /6 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 299.024 ]ct
clp
/6 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [.494303 -.000343635 .501688 .0003466 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /6 /Gradient get_res exec grestore
}if
np
grestore
415.259 299.408 mo
413.475 299.345 411.777 299.227 410.327 299.098 cv
411.804 299.208 413.521 299.305 415.328 299.34 cv
415.259 299.408 li
/0 
<<
/Name (Black)
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
gsave
394.787 221.96 mo
510.886 221.96 li
510.886 136.24 li
394.787 136.24 li
394.787 221.96 li
clp
394.803 221.956 mo
401.224 220.81 407.668 219.424 414.066 217.806 cv
416.291 217.285 418.479 216.665 420.811 216.062 cv
423.022 215.427 425.169 214.846 427.371 214.16 cv
431.761 212.818 436.115 211.419 440.4 209.91 cv
448.938 206.82 457.248 203.472 465.024 199.656 cv
472.797 195.85 480.144 191.777 486.617 187.217 cv
493.052 182.631 498.786 177.731 502.91 172.394 cv
507.005 167.059 509.365 161.307 508.813 156.12 cv
508.8 155.875 li
508.794 155.753 li
508.793 155.748 508.792 155.746 508.793 155.746 cv
508.794 155.746 508.813 155.815 508.832 155.885 cv
508.851 155.955 508.869 156.025 508.869 156.025 cv
508.869 156.025 508.864 156.004 508.851 155.952 cv
508.834 155.88 li
508.707 155.312 li
508.454 154.19 li
508.295 153.424 508.13 152.693 507.894 152.258 cv
507.688 151.724 507.487 151.2 507.289 150.685 cv
507.034 150.153 506.704 149.631 506.424 149.108 cv
505.265 147.016 503.746 145.3 502.276 143.87 cv
499.288 141.04 496.509 139.163 494.585 138.005 cv
492.629 136.854 491.586 136.24 491.586 136.24 cv
491.586 136.24 492.741 136.551 494.908 137.136 cv
496.905 137.787 499.841 138.723 503.275 140.789 cv
500.976 139.599 498.983 138.906 497.473 138.392 cv
497.372 138.358 497.273 138.324 497.176 138.291 cv
496.242 138.025 495.496 137.814 494.95 137.659 cv
494.236 137.456 493.866 137.35 493.866 137.35 cv
493.866 137.35 493.867 137.351 493.868 137.351 cv
493.867 137.351 493.866 137.351 493.866 137.351 cv
493.866 137.351 493.867 137.351 493.867 137.351 cv
493.866 137.351 493.866 137.351 493.866 137.351 cv
493.866 137.351 494.394 137.671 495.402 138.283 cv
495.805 138.528 496.286 138.82 496.84 139.156 cv
496.856 139.166 496.872 139.176 496.888 139.186 cv
497.878 139.802 499.09 140.611 500.437 141.645 cv
501.271 142.286 502.156 143.013 503.072 143.833 cv
503.526 144.24 503.987 144.67 504.453 145.123 cv
504.967 145.637 505.487 146.187 505.994 146.776 cv
506.918 147.85 507.8 149.056 508.53 150.417 cv
508.615 150.58 508.705 150.743 508.796 150.906 cv
508.901 151.096 509.007 151.286 509.109 151.477 cv
509.203 151.652 509.294 151.828 509.375 152.005 cv
509.565 152.522 509.76 153.049 509.957 153.586 cv
509.99 153.648 510.021 153.716 510.051 153.789 cv
510.077 153.851 510.101 153.918 510.125 153.988 cv
510.27 154.412 510.384 154.959 510.493 155.526 cv
510.73 156.651 li
510.786 156.916 li
510.851 157.22 li
510.858 157.259 li
510.865 157.292 li
510.869 157.311 510.873 157.325 510.876 157.336 cv
510.869 157.309 510.858 157.267 510.848 157.224 cv
510.83 157.154 510.812 157.084 510.811 157.084 cv
510.811 157.084 510.811 157.085 510.811 157.085 cv
510.811 157.086 510.811 157.088 510.812 157.092 cv
510.812 157.095 li
510.811 157.093 li
510.814 157.167 li
510.816 157.215 li
510.826 157.459 li
510.865 157.885 510.885 158.315 510.886 158.747 cv
510.887 159.327 510.854 159.913 510.789 160.502 cv
510.308 164.833 508.071 169.387 504.706 173.653 cv
503.924 174.638 503.086 175.607 502.198 176.56 cv
501.18 177.654 500.096 178.728 498.954 179.784 cv
495.755 182.744 492.11 185.558 488.216 188.256 cv
481.682 192.729 474.28 196.704 466.458 200.405 cv
460.423 203.268 454.073 205.847 447.549 208.243 cv
445.613 208.954 443.662 209.648 441.698 210.329 cv
437.784 211.65 433.812 212.878 429.808 214.055 cv
429.41 214.172 429.012 214.289 428.613 214.405 cv
427.995 214.588 427.381 214.764 426.768 214.935 cv
425.262 215.355 423.766 215.746 422.242 216.161 cv
422.171 216.18 422.101 216.2 422.03 216.219 cv
421.524 216.343 421.025 216.467 420.531 216.591 cv
420.264 216.658 419.999 216.725 419.736 216.792 cv
418.597 217.079 417.48 217.361 416.361 217.623 cv
415.995 217.709 415.629 217.792 415.261 217.873 cv
414.329 218.096 413.396 218.313 412.462 218.526 cv
407.216 219.722 401.947 220.765 396.695 221.646 cv
396.064 221.752 395.434 221.855 394.803 221.956 cv
f
grestore
406.606 300.018 mo
407.314 299.686 408.004 299.333 408.673 298.963 cv
408.745 298.969 li
408.745 298.969 408.745 298.969 408.745 298.969 cv
408.745 298.969 408.745 298.969 408.745 298.969 cv
408.668 299.01 408.591 299.05 408.515 299.09 cv
408.388 299.156 408.262 299.222 408.134 299.287 cv
407.686 299.515 407.229 299.735 406.765 299.946 cv
406.712 299.97 406.659 299.994 406.606 300.018 cv
f
gsave
336.253 223.589 mo
399.615 223.589 li
399.615 65.008 li
336.253 65.008 li
336.253 223.589 li
clp
351.597 110.985 mo
353.176 107.283 354.886 103.679 356.716 100.19 cv
361.287 91.335 366.878 83.2089 373.853 76.6129 cv
377.334 73.338 381.161 70.3989 385.451 68.3219 cv
389.714 66.2409 394.4 65.0529 398.71 65.0318 cv
399.112 65.0168 li
399.311 65.009 li
399.293 65.008 399.472 65.008 399.615 65.008 cv
398.706 65.0837 397.787 65.2057 396.865 65.372 cv
396.864 65.3721 396.864 65.3721 396.864 65.3722 cv
396.859 65.3731 396.854 65.374 396.849 65.3749 cv
395.551 65.6097 394.246 65.9323 392.953 66.3375 cv
391.494 66.7949 390.05 67.3577 388.65 68.018 cv
387.506 68.5528 386.394 69.1486 385.312 69.7953 cv
384.067 70.5394 382.86 71.3517 381.691 72.2164 cv
380.348 73.2084 379.054 74.2698 377.802 75.3781 cv
377.513 75.634 377.226 75.8922 376.941 76.1529 cv
372.601 80.1494 368.776 84.7299 365.383 89.7085 cv
363.255 92.831 361.297 96.1104 359.49 99.5 cv
357.986 102.276 356.559 105.127 355.214 108.044 cv
353.984 109 352.778 109.982 351.597 110.985 cv
f
339.415 223.589 mo
339.25 223.563 339.083 223.54 338.916 223.517 cv
338.699 223.487 338.48 223.458 338.263 223.426 cv
338.229 223.422 338.195 223.417 338.162 223.412 cv
336.804 213.163 336.239 202.664 336.254 192.142 cv
336.264 190.117 li
336.321 188.057 li
336.438 184.108 li
336.576 181.405 336.681 178.621 336.885 175.935 cv
337.211 170.541 337.873 165.164 338.575 159.835 cv
340.06 149.175 342.276 138.701 345.279 128.665 cv
347.055 122.582 349.173 116.668 351.597 110.985 cv
352.778 109.982 353.984 109 355.214 108.044 cv
354.48 109.633 353.771 111.242 353.087 112.869 cv
351.055 117.704 349.243 122.7 347.673 127.819 cv
347.426 128.608 347.183 129.399 346.945 130.193 cv
345.108 136.326 343.56 142.618 342.289 149.012 cv
341.638 152.283 341.06 155.58 340.552 158.896 cv
340.492 159.312 340.432 159.727 340.372 160.144 cv
339.667 165.055 339.015 170.004 338.648 174.972 cv
338.548 176.081 338.466 177.206 338.391 178.336 cv
338.285 179.941 338.193 181.554 338.091 183.139 cv
337.958 186.218 li
337.921 187.086 li
337.853 188.733 li
337.836 189.145 li
337.8 191.169 li
337.787 192.016 337.778 192.864 337.773 193.711 cv
337.734 200.307 337.924 206.891 338.406 213.406 cv
338.65 216.717 338.97 220.011 339.372 223.279 cv
339.384 223.383 339.402 223.485 339.415 223.589 cv
.00392157 .00392157 .00784314 .796078 cmyk
f
grestore
gsave
359.94 240.198 mo
398.563 240.198 li
398.563 237.594 li
359.94 237.594 li
359.94 240.198 li
clp
391.915 238.578 mo
391.858 238.542 391.802 238.507 391.745 238.47 cv
392.671 238.369 393.597 238.258 394.524 238.141 cv
395.862 237.973 397.201 237.79 398.54 237.598 cv
396.331 237.955 394.122 238.289 391.915 238.578 cv
f
368.137 240.198 mo
367.509 240.198 li
365.299 240.194 363.102 240.146 360.921 240.055 cv
360.634 240.044 360.351 240.021 360.066 240.001 cv
360.025 239.754 359.98 239.511 359.941 239.264 cv
360.571 239.305 361.191 239.375 361.824 239.408 cv
364.335 239.547 366.868 239.628 369.419 239.652 cv
369.95 239.657 370.48 239.659 371.012 239.659 cv
376.388 239.659 381.836 239.407 387.312 238.913 cv
388.167 238.836 389.024 238.753 389.88 238.664 cv
390.502 238.604 391.123 238.539 391.745 238.47 cv
391.802 238.507 391.858 238.542 391.915 238.578 cv
390.931 238.707 389.948 238.826 388.965 238.935 cv
381.962 239.757 374.988 240.185 368.137 240.198 cv
.00392157 .00392157 .00784314 .796078 cmyk
f
grestore
gsave
301.483 309.572 mo
408.358 309.572 li
408.358 183.163 li
301.483 183.163 li
301.483 309.572 li
clp
393.103 309.572 mo
393.001 309.572 li
392.974 309.572 392.947 309.572 392.919 309.571 cv
391 309.463 li
389.639 309.412 388.545 309.163 387.343 308.954 cv
382.615 308.007 378.278 305.822 374.488 303.128 cv
366.858 297.683 361.046 290.198 356.306 281.901 cv
354.96 279.567 353.689 277.164 352.491 274.699 cv
352.932 275.068 353.375 275.433 353.822 275.794 cv
354.722 277.628 355.664 279.428 356.648 281.189 cv
359.293 285.964 362.29 290.48 365.783 294.508 cv
368.405 297.531 371.305 300.279 374.546 302.658 cv
378.299 305.401 382.606 307.645 387.322 308.655 cv
387.322 308.655 li
388.026 308.787 388.693 308.933 389.4 309.044 cv
389.895 309.122 390.411 309.184 390.971 309.213 cv
392.889 309.347 li
392.945 309.349 393 309.349 393.053 309.35 cv
393.188 309.35 li
393.304 309.349 393.415 309.346 393.522 309.341 cv
393.823 309.328 394.099 309.306 394.407 309.297 cv
396.127 309.217 li
397.814 308.924 li
398.922 308.713 400.018 308.549 401.055 308.283 cv
402.563 307.822 403.952 307.281 405.239 306.684 cv
406.35 306.169 407.386 305.611 408.358 305.026 cv
408.358 305.026 li
406.27 306.324 403.881 307.498 401.07 308.398 cv
400.037 308.678 398.943 308.856 397.838 309.083 cv
396.155 309.398 li
394.436 309.501 li
393.983 309.52 393.598 309.569 393.103 309.572 cv
321.359 231.539 mo
318.027 229.934 314.887 228.022 312.019 225.727 cv
308.822 223.159 305.946 220.03 304.064 216.311 cv
303.937 216.043 303.809 215.782 303.684 215.522 cv
303.687 213.954 303.69 212.369 303.692 210.787 cv
304.068 211.966 li
304.068 211.966 li
304.401 213.088 304.852 213.948 305.289 214.906 cv
305.346 215.023 305.404 215.138 305.463 215.254 cv
305.463 215.254 305.463 215.255 305.464 215.255 cv
305.464 215.256 305.464 215.256 305.464 215.256 cv
306.251 216.797 307.209 218.239 308.287 219.583 cv
309.721 221.37 311.368 222.984 313.117 224.427 cv
315.424 226.324 317.915 227.97 320.544 229.406 cv
320.807 230.118 321.08 230.831 321.359 231.539 cv
303.71 198.397 mo
303.71 197.476 303.711 196.558 303.712 195.638 cv
304.944 192.836 306.485 190.56 307.837 188.669 cv
309.235 186.888 310.48 185.332 311.754 184.166 cv
312.117 183.796 312.433 183.49 312.764 183.163 cv
312.753 183.276 312.743 183.404 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 li
312.479 183.772 312.226 184.036 311.971 184.313 cv
311.904 184.386 311.838 184.459 311.771 184.534 cv
311.155 185.216 310.527 185.968 309.869 186.777 cv
309.725 186.954 309.579 187.134 309.432 187.317 cv
308.903 188.036 308.345 188.812 307.787 189.652 cv
306.228 192 304.664 194.854 303.71 198.397 cv
f
303.684 215.522 mo
303.363 214.857 303.054 214.19 302.803 213.388 cv
302.28 211.82 li
302.14 211.334 302.098 210.972 302.003 210.547 cv
301.709 209.1 li
301.608 207.637 li
301.564 206.775 301.488 205.928 301.483 205.103 cv
301.483 204.917 li
301.483 204.882 301.483 204.847 301.484 204.811 cv
301.708 201.235 302.579 198.214 303.712 195.638 cv
303.711 196.558 303.71 197.476 303.71 198.397 cv
303.665 198.564 303.621 198.731 303.579 198.901 cv
303.235 200.286 302.985 201.773 302.863 203.373 cv
302.861 203.449 302.86 203.525 302.859 203.602 cv
302.859 203.631 li
302.858 203.726 302.858 203.82 302.859 203.916 cv
302.859 203.929 li
302.867 204.67 302.921 205.429 302.949 206.2 cv
303.03 207.664 li
303.191 208.512 li
303.305 209.115 li
303.395 209.541 303.432 209.904 303.566 210.391 cv
303.692 210.787 li
303.69 212.369 303.687 213.954 303.684 215.522 cv
.00392157 .00392157 .00784314 .796078 cmyk
f
353.822 275.794 mo
353.375 275.433 352.932 275.068 352.491 274.699 cv
349.428 268.399 346.847 261.695 344.747 254.702 cv
343.061 249.174 341.664 243.461 340.495 237.64 cv
338.506 237.232 336.537 236.785 334.603 236.274 cv
329.991 235.074 325.525 233.546 321.359 231.539 cv
321.08 230.831 320.807 230.118 320.544 229.406 cv
320.72 229.502 320.896 229.596 321.073 229.691 cv
325.577 232.085 330.477 233.88 335.559 235.276 cv
336.346 235.495 337.139 235.703 337.936 235.903 cv
337.955 235.908 337.974 235.912 337.992 235.917 cv
338.865 236.135 339.743 236.342 340.626 236.541 cv
340.895 236.601 341.163 236.661 341.432 236.72 cv
341.432 236.72 li
341.432 236.72 li
342.523 242.557 343.843 248.288 345.455 253.837 cv
345.455 253.837 li
346.514 257.544 347.709 261.172 349.039 264.704 cv
349.4 265.662 349.77 266.612 350.15 267.556 cv
351.285 270.37 352.509 273.119 353.822 275.794 cv
f
312.732 183.52 mo
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 li
312.732 183.52 li
312.732 183.52 li
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 li
level3{
gsave
clp
[214.213 0 0 214.213 302.859 203.207 ]ct
/7 
<<
/ShadingType 2 
/BBox [.0179794 -.0995731 .165463 .0995737 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 203.207 ]ct
clp
/7 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.0179794 -.0995731 .165463 .0995737 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /7 /Gradient get_res exec grestore
}if
np
grestore
gsave
388.65 68.0189 mo
384.331 70.037 380.466 72.925 376.942 76.154 cv
369.879 82.6549 364.18 90.7059 359.491 99.5 cv
354.732 108.283 350.741 117.816 347.674 127.819 cv
344.536 137.814 342.181 148.257 340.553 158.896 cv
339.78 164.216 339.046 169.583 338.648 174.972 cv
338.408 177.656 338.265 180.438 338.091 183.139 cv
337.921 187.085 li
337.837 189.144 li
337.8 191.169 li
337.64 201.968 338.076 212.755 339.373 223.279 cv
339.385 223.383 339.403 223.486 339.415 223.589 cv
339.001 223.525 338.578 223.473 338.161 223.413 cv
338.197 223.683 338.219 223.957 338.256 224.227 cv
338.27 224.332 338.289 224.433 338.303 224.537 cv
337.77 224.462 337.218 224.417 336.693 224.332 cv
329.162 223.067 322.112 221.172 316.645 217.888 cv
311.16 214.609 307.74 209.947 307.157 204.66 cv
306.71 199.387 308.46 194.298 310.285 190.48 cv
311.071 188.985 311.788 187.646 312.512 186.443 cv
312.57 185.407 312.648 184.427 312.732 183.52 cv
311.671 184.576 310.604 185.864 309.432 187.317 cv
306.789 190.91 303.43 195.913 302.864 203.372 cv
302.837 204.289 302.914 205.234 302.95 206.199 cv
303.031 207.664 li
303.305 209.115 li
303.395 209.541 303.432 209.904 303.566 210.391 cv
304.068 211.966 li
304.402 213.088 304.852 213.948 305.289 214.906 cv
307.121 218.649 309.956 221.817 313.117 224.427 cv
319.504 229.678 327.289 233.004 335.559 235.276 cv
337.486 235.812 339.448 236.285 341.432 236.72 cv
342.523 242.557 343.843 248.288 345.455 253.837 cv
348.246 263.604 351.976 272.824 356.649 281.189 cv
361.278 289.549 366.988 297.11 374.546 302.658 cv
378.299 305.401 382.606 307.645 387.322 308.655 cv
388.52 308.879 389.612 309.143 390.972 309.212 cv
392.889 309.346 li
393.476 309.364 393.898 309.31 394.407 309.297 cv
396.127 309.217 li
397.814 308.924 li
398.922 308.713 400.018 308.549 401.055 308.283 cv
403.864 307.424 406.259 306.289 408.358 305.026 cv
411.166 303.279 413.411 301.303 415.259 299.408 cv
413.474 299.346 411.776 299.227 410.327 299.098 cv
409.761 299.056 409.226 299.013 408.745 298.969 cv
408.053 299.338 407.338 299.689 406.607 300.018 cv
404.456 301.027 402.134 301.832 399.672 302.254 cv
393.529 303.16 387.307 300.832 382.079 295.885 cv
376.851 290.959 372.756 283.927 369.241 276.198 cv
365.761 268.408 363.237 259.627 361.095 250.441 cv
360.322 247.009 359.654 243.491 359.036 239.936 cv
359.381 239.954 359.723 239.976 360.066 240.001 cv
360.025 239.754 359.98 239.511 359.941 239.263 cv
360.571 239.305 361.191 239.375 361.823 239.407 cv
370.958 239.914 380.389 239.65 389.88 238.663 cv
392.771 238.383 395.666 238.01 398.563 237.595 cv
404.865 236.575 411.165 235.286 417.413 233.75 cv
419.179 233.31 li
420.963 232.823 li
424.383 231.883 li
426.712 231.192 429.117 230.511 431.416 229.768 cv
436.051 228.348 440.595 226.652 445.089 224.933 cv
454.06 221.427 462.706 217.356 470.794 212.725 cv
478.904 208.149 486.406 202.902 493.09 197.167 cv
499.797 191.488 505.641 185.119 509.839 177.928 cv
511.92 174.343 513.631 170.543 514.485 166.543 cv
515.35 162.565 515.34 158.426 514.396 154.848 cv
514.319 154.512 li
514.281 154.345 li
514.284 154.357 514.257 154.255 514.229 154.152 cv
514.193 154.018 514.156 153.883 514.187 154.006 cv
514.16 153.938 li
513.95 153.4 li
513.535 152.337 li
513.276 151.648 513.016 150.955 512.525 150.138 cv
512.087 149.38 511.658 148.636 511.237 147.906 cv
510.767 147.27 510.268 146.73 509.802 146.166 cv
507.918 143.95 505.869 142.429 504.004 141.23 cv
503.758 141.072 503.521 140.938 503.28 140.792 cv
500.825 139.52 498.718 138.816 497.176 138.291 cv
495.017 137.678 493.866 137.351 493.866 137.351 cv
493.866 137.351 494.901 137.979 496.84 139.156 cv
498.749 140.34 501.503 142.253 504.454 145.123 cv
505.904 146.573 507.398 148.309 508.531 150.416 cv
508.804 150.943 509.127 151.469 509.376 152.005 cv
509.566 152.522 509.76 153.049 509.958 153.586 cv
510.188 154.024 510.345 154.757 510.493 155.526 cv
510.73 156.651 li
510.851 157.22 li
510.865 157.292 li
510.901 157.441 510.875 157.334 510.847 157.226 cv
510.811 157.093 li
510.816 157.215 li
510.826 157.46 li
511.307 162.653 508.87 168.374 504.706 173.653 cv
500.511 178.935 494.71 183.758 488.216 188.257 cv
481.682 192.73 474.28 196.704 466.457 200.406 cv
458.631 204.117 450.277 207.354 441.698 210.329 cv
437.395 211.781 433.022 213.121 428.614 214.405 cv
426.404 215.061 424.249 215.613 422.03 216.219 cv
419.689 216.791 417.493 217.382 415.261 217.873 cv
408.458 219.497 401.605 220.867 394.787 221.959 cv
383.305 224.01 371.902 225.277 360.989 225.591 cv
359.645 225.62 358.322 225.618 356.992 225.625 cv
355.719 214.379 355.125 202.775 355.221 191.125 cv
355.196 188.583 355.291 186.05 355.328 183.368 cv
355.435 180.807 355.499 178.33 355.667 175.765 cv
355.971 170.656 356.349 165.57 356.872 160.527 cv
358.007 150.453 359.496 140.55 361.663 131.084 cv
363.82 121.627 366.396 112.548 369.766 104.268 cv
373.175 96.0231 377.133 88.439 382.032 82.4591 cv
386.936 76.514 392.793 72.3121 398.815 71.402 cv
399.095 71.3449 li
399.236 71.3171 li
399.285 71.3131 399.11 71.314 398.997 71.314 cv
398.905 71.314 398.853 71.315 398.994 71.3131 cv
399.08 71.309 li
399.758 71.282 li
401.098 71.228 li
401.554 71.203 402.001 71.1819 402.404 71.184 cv
402.916 71.17 li
404.256 71.1339 li
405.167 71.0961 406.04 71.074 406.597 71.21 cv
407.256 71.285 407.904 71.358 408.541 71.43 cv
409.211 71.5581 409.891 71.772 410.558 71.931 cv
413.238 72.608 415.583 73.775 417.593 74.967 cv
419.446 76.102 421.043 77.241 422.418 78.3161 cv
421.14 76.535 419.436 74.4399 416.994 72.2601 cv
415.121 70.6021 412.835 68.8409 409.806 67.4569 cv
409.038 67.119 408.289 66.739 407.439 66.4179 cv
406.496 66.176 405.535 65.931 404.556 65.6791 cv
403.497 65.388 402.641 65.3091 401.79 65.23 cv
400.472 65.0919 li
399.805 65.0211 li
399.721 65.013 li
399.845 65.0099 399.745 65.009 399.615 65.008 cv
395.978 65.311 392.177 66.355 388.65 68.0189 cv
clp
394.401 309.297 mo
394.403 309.297 394.405 309.297 394.407 309.297 cv
396.127 309.217 li
397.813 308.924 li
398.921 308.713 400.018 308.549 401.055 308.282 cv
403.864 307.424 406.26 306.289 408.357 305.026 cv
409.021 304.613 409.654 304.187 410.257 303.753 cv
409.654 304.187 409.022 304.613 408.358 305.026 cv
408.358 305.026 li
408.358 305.026 li
408.358 305.026 li
407.386 305.611 406.35 306.168 405.239 306.684 cv
403.952 307.281 402.563 307.822 401.055 308.283 cv
400.018 308.549 398.922 308.713 397.814 308.924 cv
396.127 309.217 li
394.407 309.297 li
394.405 309.297 394.403 309.297 394.401 309.297 cv
387.48 308.685 mo
387.427 308.675 387.375 308.665 387.322 308.655 cv
387.322 308.655 li
382.606 307.645 378.299 305.401 374.546 302.658 cv
371.305 300.279 368.405 297.531 365.783 294.508 cv
368.405 297.531 371.306 300.279 374.547 302.657 cv
378.298 305.401 382.607 307.645 387.322 308.655 cv
387.375 308.665 387.427 308.675 387.48 308.685 cv
397.055 302.447 mo
394.337 302.447 391.633 301.831 389.036 300.652 cv
391.629 301.829 394.329 302.445 397.043 302.446 cv
397.047 302.446 397.05 302.446 397.054 302.446 cv
397.054 302.446 li
397.054 302.446 397.055 302.446 397.056 302.446 cv
397.91 302.446 398.766 302.385 399.62 302.262 cv
399.637 302.259 399.655 302.257 399.672 302.254 cv
401.223 301.988 402.719 301.57 404.151 301.045 cv
402.719 301.57 401.223 301.988 399.671 302.255 cv
398.8 302.383 397.927 302.447 397.055 302.447 cv
413.678 300.949 mo
414.236 300.433 414.762 299.918 415.258 299.408 cv
415.259 299.408 415.259 299.408 415.259 299.408 cv
415.259 299.408 li
414.762 299.918 414.236 300.433 413.678 300.949 cv
408.759 298.97 mo
408.754 298.97 408.749 298.969 408.745 298.969 cv
408.745 298.969 408.745 298.969 408.745 298.969 cv
408.749 298.969 408.754 298.97 408.759 298.97 cv
373.564 284.688 mo
372.017 282.013 370.586 279.157 369.241 276.198 cv
366.475 270.008 364.314 263.193 362.469 256.047 cv
364.314 263.193 366.476 270.008 369.241 276.198 cv
370.587 279.157 372.017 282.013 373.564 284.688 cv
349.934 267.017 mo
349.629 266.251 349.331 265.48 349.039 264.704 cv
347.709 261.172 346.514 257.544 345.455 253.837 cv
345.455 253.837 li
343.843 248.288 342.523 242.557 341.432 236.72 cv
341.432 236.72 li
341.432 236.72 li
341.23 236.676 341.029 236.631 340.828 236.586 cv
341.029 236.631 341.231 236.676 341.432 236.72 cv
342.522 242.557 343.843 248.288 345.455 253.837 cv
346.747 258.358 348.24 262.761 349.934 267.017 cv
360.738 248.816 mo
360.113 245.901 359.556 242.932 359.036 239.936 cv
359.361 239.953 359.684 239.973 360.007 239.997 cv
359.683 239.973 359.361 239.953 359.036 239.936 cv
359.036 239.936 li
359.557 242.932 360.113 245.901 360.738 248.816 cv
360.066 240.001 mo
360.066 240.001 360.066 240.001 360.065 240.001 cv
360.026 239.754 359.979 239.511 359.94 239.264 cv
359.941 239.264 359.941 239.264 359.941 239.264 cv
359.98 239.511 360.025 239.754 360.066 240.001 cv
360.066 240.001 360.066 240.001 360.066 240.001 cv
360.066 240.001 li
379.664 239.446 mo
379.666 239.446 379.668 239.445 379.67 239.445 cv
379.667 239.445 379.667 239.445 379.664 239.446 cv
379.81 239.438 mo
379.826 239.438 379.843 239.437 379.859 239.436 cv
379.843 239.437 379.826 239.438 379.81 239.438 cv
379.957 239.431 mo
379.984 239.43 380.011 239.428 380.038 239.427 cv
380.011 239.428 379.984 239.43 379.957 239.431 cv
380.103 239.424 mo
380.134 239.422 380.163 239.421 380.193 239.419 cv
380.163 239.421 380.133 239.422 380.103 239.424 cv
380.251 239.416 mo
380.278 239.415 380.306 239.413 380.334 239.412 cv
380.306 239.413 380.278 239.415 380.251 239.416 cv
380.399 239.408 mo
380.423 239.407 380.449 239.406 380.474 239.404 cv
380.449 239.406 380.424 239.407 380.399 239.408 cv
380.547 239.4 mo
380.566 239.399 380.585 239.398 380.605 239.397 cv
380.585 239.398 380.566 239.399 380.547 239.4 cv
380.695 239.392 mo
380.706 239.392 380.716 239.391 380.727 239.391 cv
380.716 239.391 380.706 239.392 380.695 239.392 cv
394.524 238.141 mo
395.87 237.972 397.216 237.788 398.562 237.595 cv
404.866 236.575 411.164 235.286 417.413 233.75 cv
419.178 233.31 li
420.964 232.823 li
421.791 232.596 li
420.963 232.823 li
419.179 233.31 li
417.413 233.75 li
411.165 235.286 404.865 236.575 398.563 237.595 cv
398.563 237.595 li
398.555 237.596 398.548 237.597 398.54 237.598 cv
397.201 237.79 395.862 237.973 394.524 238.141 cv
337.962 235.909 mo
337.953 235.907 337.945 235.905 337.936 235.903 cv
337.139 235.703 336.346 235.495 335.559 235.276 cv
330.477 233.88 325.577 232.085 321.073 229.691 cv
320.896 229.596 320.72 229.502 320.544 229.406 cv
317.915 227.97 315.424 226.324 313.117 224.427 cv
311.369 222.984 309.721 221.37 308.287 219.583 cv
307.209 218.239 306.251 216.797 305.464 215.256 cv
305.464 215.256 305.464 215.256 305.464 215.255 cv
305.463 215.255 305.463 215.254 305.463 215.254 cv
305.404 215.138 305.346 215.022 305.289 214.906 cv
305.16 214.624 305.03 214.349 304.902 214.075 cv
305.03 214.35 305.16 214.623 305.289 214.906 cv
307.121 218.649 309.956 221.817 313.117 224.427 cv
319.503 229.678 327.289 233.004 335.558 235.275 cv
336.354 235.497 337.155 235.707 337.962 235.909 cv
435.912 228.303 mo
439.002 227.242 442.057 226.093 445.088 224.933 cv
454.059 221.427 462.705 217.356 470.793 212.725 cv
478.442 208.41 485.55 203.496 491.942 198.141 cv
485.551 203.497 478.443 208.409 470.794 212.725 cv
462.706 217.356 454.06 221.427 445.089 224.933 cv
442.057 226.093 439.003 227.242 435.912 228.303 cv
356.993 225.625 mo
356.993 225.625 li
357 225.625 357.007 225.625 357.014 225.625 cv
357.007 225.625 357 225.625 356.993 225.625 cv
360.51 225.6 mo
360.669 225.597 360.829 225.594 360.989 225.591 cv
361.19 225.585 361.391 225.579 361.592 225.573 cv
361.391 225.579 361.19 225.585 360.989 225.591 cv
360.829 225.594 360.669 225.597 360.51 225.6 cv
376.013 224.6 mo
382.202 223.975 388.482 223.085 394.787 221.959 cv
394.792 221.958 394.798 221.957 394.803 221.956 cv
395.434 221.855 396.064 221.752 396.695 221.646 cv
400.83 220.953 404.976 220.159 409.112 219.269 cv
404.339 220.296 399.554 221.196 394.788 221.96 cv
388.483 223.085 382.202 223.975 376.013 224.6 cv
336.838 224.354 mo
336.789 224.347 336.741 224.34 336.692 224.332 cv
335.764 224.176 334.843 224.01 333.931 223.834 cv
334.843 224.01 335.764 224.176 336.693 224.332 cv
336.741 224.34 336.789 224.347 336.838 224.354 cv
338.265 224.289 mo
338.262 224.268 338.259 224.248 338.256 224.227 cv
338.219 223.957 338.197 223.683 338.161 223.413 cv
338.161 223.413 li
338.161 223.413 338.161 223.413 338.162 223.413 cv
338.197 223.684 338.22 223.957 338.257 224.228 cv
338.259 224.248 338.262 224.269 338.265 224.289 cv
418.831 217.019 mo
419.132 216.944 419.433 216.868 419.736 216.792 cv
419.999 216.725 420.264 216.658 420.531 216.591 cv
419.959 216.735 419.393 216.878 418.831 217.019 cv
422.242 216.161 mo
423.766 215.746 425.262 215.355 426.768 214.935 cv
425.262 215.355 423.767 215.747 422.242 216.161 cv
313.354 215.549 mo
310.521 213.152 308.555 210.281 307.644 207.121 cv
308.555 210.281 310.521 213.152 313.354 215.549 cv
429.808 214.055 mo
433.812 212.878 437.784 211.65 441.698 210.329 cv
443.662 209.648 445.613 208.954 447.549 208.243 cv
454.073 205.847 460.422 203.268 466.457 200.406 cv
472.006 197.78 477.342 195.018 482.308 192.037 cv
477.343 195.018 472.006 197.78 466.458 200.406 cv
458.632 204.118 450.278 207.354 441.699 210.33 cv
437.783 211.651 433.813 212.879 429.808 214.055 cv
304.36 212.821 mo
304.256 212.55 304.158 212.268 304.068 211.966 cv
304.068 211.966 li
303.692 210.787 li
303.566 210.391 li
303.432 209.904 303.395 209.541 303.305 209.115 cv
303.191 208.512 li
303.305 209.115 li
303.396 209.541 303.433 209.904 303.566 210.391 cv
304.069 211.966 li
304.158 212.268 304.256 212.55 304.36 212.821 cv
302.859 203.916 mo
302.858 203.82 302.858 203.726 302.859 203.631 cv
302.859 203.916 li
303.579 198.901 mo
303.621 198.731 303.665 198.564 303.71 198.397 cv
304.664 194.854 306.228 192 307.787 189.652 cv
306.155 192.11 304.518 195.123 303.579 198.901 cv
499.02 191.718 mo
502.78 187.948 506.122 183.899 508.86 179.543 cv
506.122 183.9 502.781 187.947 499.02 191.718 cv
310.759 189.583 mo
311.205 188.742 311.634 187.953 312.059 187.213 cv
311.634 187.953 311.206 188.742 310.759 189.583 cv
355.222 189.21 mo
355.225 188.917 355.229 188.623 355.233 188.329 cv
355.229 188.623 355.225 188.917 355.222 189.21 cv
337.876 188.185 mo
337.921 187.085 li
337.958 186.218 li
338.091 183.139 li
338.193 181.554 338.285 179.941 338.391 178.336 cv
338.466 177.206 338.549 176.081 338.648 174.972 cv
338.919 171.298 339.347 167.633 339.837 163.987 cv
339.347 167.633 338.919 171.298 338.648 174.972 cv
338.408 177.656 338.265 180.437 338.091 183.138 cv
337.921 187.086 li
337.876 188.185 li
310.256 186.304 mo
310.55 185.947 310.839 185.601 311.124 185.27 cv
310.839 185.601 310.55 185.947 310.256 186.304 cv
311.971 184.313 mo
312.226 184.036 312.479 183.772 312.732 183.52 cv
312.732 183.52 li
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.479 183.772 312.226 184.037 311.971 184.313 cv
355.593 177.006 mo
355.615 176.594 355.639 176.181 355.667 175.765 cv
355.97 170.656 356.349 165.57 356.871 160.527 cv
357.402 155.817 358.01 151.145 358.729 146.537 cv
358.01 151.145 357.403 155.817 356.872 160.527 cv
356.349 165.57 355.971 170.656 355.667 175.765 cv
355.64 176.181 355.615 176.595 355.593 177.006 cv
502.198 176.56 mo
503.086 175.607 503.924 174.638 504.706 173.653 cv
508.071 169.387 510.308 164.833 510.789 160.502 cv
510.308 164.834 508.071 169.388 504.706 173.653 cv
503.924 174.637 503.086 175.607 502.198 176.56 cv
514.954 163.674 mo
515.291 160.619 515.114 157.571 514.395 154.848 cv
514.35 154.646 li
514.396 154.848 li
514.879 156.679 515.118 158.657 515.119 160.685 cv
515.12 161.673 515.065 162.673 514.954 163.674 cv
510.883 157.365 mo
510.883 157.365 510.88 157.354 510.876 157.336 cv
510.873 157.325 510.869 157.311 510.865 157.292 cv
510.858 157.259 li
510.858 157.254 li
510.865 157.292 li
510.878 157.344 510.883 157.365 510.883 157.365 cv
510.814 157.168 mo
510.814 157.167 li
510.811 157.093 li
510.812 157.095 li
510.812 157.096 li
510.814 157.168 li
510.793 156.946 mo
510.786 156.916 li
510.73 156.651 li
510.493 155.526 li
510.384 154.959 510.27 154.412 510.125 153.988 cv
510.27 154.412 510.384 154.959 510.494 155.525 cv
510.73 156.651 li
510.793 156.946 li
514.186 154.005 mo
514.181 153.991 li
514.186 154.004 li
514.186 154.004 514.186 154.005 514.186 154.005 cv
514.177 153.965 mo
514.176 153.96 514.175 153.958 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.176 153.959 514.176 153.961 514.177 153.965 cv
509.198 151.645 mo
509.169 151.589 509.14 151.533 509.109 151.477 cv
509.007 151.286 508.901 151.096 508.796 150.906 cv
508.932 151.152 509.07 151.398 509.198 151.645 cv
512.827 150.678 mo
512.737 150.504 512.636 150.325 512.524 150.139 cv
512.344 149.826 512.166 149.516 511.988 149.208 cv
512.166 149.516 512.344 149.826 512.525 150.138 cv
512.637 150.324 512.737 150.504 512.827 150.678 cv
511.468 148.306 mo
511.391 148.172 511.313 148.039 511.236 147.906 cv
511.168 147.813 511.099 147.722 511.029 147.633 cv
511.099 147.722 511.168 147.813 511.237 147.906 cv
511.314 148.039 511.391 148.173 511.468 148.306 cv
500.437 141.645 mo
499.09 140.611 497.878 139.802 496.888 139.186 cv
496.872 139.176 496.856 139.166 496.84 139.156 cv
496.286 138.82 495.805 138.528 495.402 138.283 cv
494.394 137.671 493.866 137.351 493.866 137.351 cv
493.866 137.351 493.866 137.351 493.867 137.351 cv
493.902 137.373 494.934 137.999 496.84 139.156 cv
497.839 139.775 499.069 140.594 500.437 141.645 cv
503.286 140.796 mo
503.284 140.795 503.282 140.793 503.28 140.792 cv
500.979 139.601 498.983 138.907 497.473 138.392 cv
498.983 138.906 500.976 139.599 503.275 140.789 cv
503.276 140.79 503.278 140.791 503.28 140.792 cv
503.282 140.793 503.284 140.795 503.286 140.796 cv
366.944 111.904 mo
367.82 109.294 368.757 106.746 369.765 104.268 cv
370.792 101.785 371.869 99.3627 373.005 97.0258 cv
371.869 99.3627 370.792 101.786 369.766 104.268 cv
368.758 106.745 367.82 109.295 366.944 111.904 cv
422.418 78.3161 mo
421.633 77.7022 420.775 77.0676 419.839 76.4247 cv
420.775 77.0672 421.633 77.7014 422.417 78.3145 cv
422.417 78.315 422.418 78.3155 422.418 78.3161 cv
422.156 77.9556 mo
420.909 76.2565 419.274 74.295 416.994 72.2608 cv
415.121 70.6028 412.834 68.8409 409.805 67.4569 cv
409.643 67.3855 409.482 67.3122 409.32 67.238 cv
409.482 67.3122 409.644 67.3855 409.806 67.4569 cv
412.835 68.8409 415.121 70.6021 416.994 72.2601 cv
419.273 74.2945 420.909 76.2551 422.156 77.9556 cv
386.949 77.3883 mo
390.659 74.1841 394.699 72.0233 398.815 71.402 cv
398.955 71.3735 li
398.815 71.402 li
394.698 72.0241 390.659 74.1843 386.949 77.3883 cv
417.067 74.6605 mo
415.177 73.578 413.008 72.5498 410.558 71.931 cv
409.891 71.772 409.211 71.5581 408.541 71.43 cv
407.912 71.3589 407.272 71.2868 406.621 71.2127 cv
407.273 71.2857 407.912 71.3589 408.54 71.4288 cv
409.212 71.5588 409.89 71.7708 410.558 71.931 cv
413.007 72.5498 415.178 73.5779 417.067 74.6605 cv
381.072 72.681 mo
381.277 72.5244 381.483 72.3697 381.691 72.2164 cv
382.86 71.3517 384.067 70.5394 385.312 69.7953 cv
383.846 70.6716 382.435 71.6415 381.072 72.681 cv
399.123 71.3394 mo
399.235 71.3169 li
399.241 71.3164 399.244 71.316 399.244 71.3157 cv
399.244 71.3158 399.244 71.3158 399.244 71.3159 cv
399.244 71.3162 399.242 71.3166 399.236 71.3171 cv
399.123 71.3394 li
398.912 71.3142 mo
398.898 71.3141 398.916 71.3138 398.994 71.3129 cv
399.079 71.3088 li
399.757 71.282 li
401.098 71.2278 li
401.535 71.2039 401.962 71.1837 402.351 71.1837 cv
402.369 71.1837 402.386 71.1838 402.403 71.1838 cv
402.915 71.1698 li
404.256 71.1339 li
404.633 71.1178 405.003 71.1049 405.347 71.1049 cv
405.462 71.1049 405.574 71.1064 405.682 71.1096 cv
405.576 71.1065 405.467 71.1051 405.355 71.1051 cv
405.009 71.1051 404.636 71.1182 404.256 71.1339 cv
402.916 71.17 li
402.404 71.184 li
402.404 71.184 li
402.404 71.184 li
402.385 71.1839 402.367 71.1839 402.348 71.1839 cv
402.019 71.1839 401.663 71.1984 401.297 71.2174 cv
401.231 71.2208 401.165 71.2243 401.098 71.228 cv
399.758 71.282 li
399.08 71.309 li
398.994 71.3131 li
398.948 71.3137 398.923 71.314 398.912 71.3142 cv
407.965 66.6282 mo
407.793 66.5561 407.618 66.4857 407.438 66.4179 cv
406.496 66.177 405.535 65.9308 404.556 65.6799 cv
404.292 65.607 404.04 65.5473 403.798 65.4976 cv
404.04 65.5471 404.292 65.6065 404.556 65.6791 cv
405.535 65.931 406.496 66.176 407.439 66.4179 cv
407.618 66.4857 407.793 66.5561 407.965 66.6282 cv
394.485 65.8977 mo
395.272 65.6919 396.062 65.5173 396.849 65.3749 cv
396.854 65.374 396.859 65.3731 396.864 65.3722 cv
396.864 65.3722 396.865 65.3721 396.865 65.372 cv
397.787 65.2057 398.706 65.0837 399.615 65.008 cv
399.615 65.008 li
399.678 65.0085 399.734 65.0089 399.761 65.0097 cv
399.734 65.0092 399.679 65.009 399.615 65.009 cv
397.926 65.1492 396.201 65.4496 394.485 65.8977 cv
401.815 65.2323 mo
401.806 65.2315 401.798 65.2307 401.79 65.23 cv
401.263 65.1748 li
401.79 65.23 li
401.798 65.2307 401.806 65.2315 401.815 65.2323 cv
399.73 65.0128 mo
399.721 65.0119 li
399.757 65.0113 399.774 65.0108 399.777 65.0104 cv
399.777 65.0105 399.778 65.0106 399.778 65.0106 cv
399.777 65.0112 399.763 65.0119 399.73 65.0128 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 187.179 ]ct
/8 
<<
/ShadingType 2 
/BBox [-.000100923 -.570324 .99196 .570388 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /8 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 187.179 ]ct
clp
/8 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [-.000100923 -.570324 .99196 .570388 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /8 /Gradient get_res exec grestore
}if
np
grestore
gsave
302.859 309.35 mo
515.119 309.35 li
515.119 65.008 li
302.859 65.008 li
302.859 309.35 li
clp
393.131 309.35 mo
393.053 309.35 392.973 309.349 392.889 309.346 cv
390.971 309.212 li
390.41 309.184 389.895 309.122 389.4 309.044 cv
388.746 308.941 388.127 308.809 387.48 308.685 cv
388.617 308.902 389.672 309.146 390.972 309.212 cv
392.889 309.346 li
392.972 309.348 393.051 309.35 393.128 309.35 cv
393.595 309.35 393.966 309.309 394.401 309.297 cv
394.096 309.306 393.821 309.328 393.522 309.341 cv
393.397 309.346 393.269 309.35 393.131 309.35 cv
404.151 301.045 mo
404.151 301.045 li
404.992 300.737 405.811 300.391 406.607 300.018 cv
406.601 300.021 406.595 300.023 406.589 300.026 cv
406.595 300.023 406.601 300.021 406.607 300.018 cv
406.659 299.994 406.712 299.97 406.765 299.946 cv
406.843 299.911 406.921 299.875 406.999 299.839 cv
406.869 299.899 406.738 299.959 406.607 300.018 cv
405.811 300.391 404.992 300.737 404.151 301.045 cv
389.036 300.652 mo
386.699 299.591 384.449 298.075 382.353 296.141 cv
384.052 297.708 385.852 299.002 387.718 300 cv
388.154 300.234 388.593 300.451 389.036 300.652 cv
407.839 299.435 mo
407.938 299.386 408.036 299.337 408.134 299.287 cv
408.262 299.222 408.388 299.156 408.515 299.09 cv
408.592 299.05 408.668 299.01 408.745 298.969 cv
408.745 298.969 408.745 298.969 408.745 298.969 cv
408.447 299.128 408.145 299.283 407.839 299.435 cv
415.258 299.408 mo
413.473 299.346 411.776 299.227 410.327 299.098 cv
409.766 299.056 409.236 299.014 408.759 298.97 cv
408.759 298.97 li
409.236 299.014 409.766 299.056 410.327 299.098 cv
410.326 299.098 410.325 299.098 410.324 299.098 cv
410.325 299.098 410.326 299.098 410.327 299.098 cv
411.776 299.227 413.475 299.345 415.258 299.408 cv
415.258 299.408 li
382.339 296.128 mo
382.298 296.09 382.256 296.052 382.215 296.013 cv
382.256 296.052 382.298 296.09 382.339 296.128 cv
382.108 295.912 mo
382.098 295.903 382.089 295.894 382.079 295.885 cv
380.262 294.173 378.581 292.206 377.015 290.044 cv
377.015 290.044 li
378.581 292.206 380.262 294.173 382.079 295.885 cv
382.089 295.894 382.098 295.903 382.108 295.912 cv
359.061 285.303 mo
358.224 283.958 357.422 282.585 356.649 281.189 cv
355.665 279.428 354.723 277.629 353.822 275.794 cv
353.823 275.794 li
354.723 277.629 355.665 279.428 356.649 281.189 cv
357.422 282.585 358.224 283.957 359.061 285.303 cv
391.745 238.47 mo
391.745 238.47 li
392.009 238.441 392.274 238.411 392.539 238.381 cv
392.274 238.411 392.009 238.441 391.745 238.47 cv
409.112 219.269 mo
410.229 219.028 411.346 218.781 412.462 218.526 cv
412.586 218.498 412.71 218.47 412.834 218.441 cv
411.594 218.726 410.354 219.001 409.112 219.269 cv
416.051 217.695 mo
416.155 217.671 416.258 217.647 416.361 217.623 cv
417.182 217.431 418.003 217.228 418.831 217.019 cv
417.899 217.254 416.976 217.482 416.051 217.695 cv
304.902 214.075 mo
304.713 213.668 304.529 213.26 304.36 212.821 cv
304.529 213.261 304.713 213.668 304.902 214.075 cv
482.308 192.037 mo
484.343 190.816 486.316 189.557 488.216 188.257 cv
492.11 185.559 495.756 182.744 498.954 179.784 cv
499.137 179.615 499.318 179.446 499.498 179.276 cv
496.171 182.423 492.333 185.405 488.216 188.257 cv
486.316 189.557 484.343 190.816 482.308 192.037 cv
309.654 187.043 mo
309.726 186.954 309.797 186.865 309.869 186.777 cv
309.999 186.617 310.128 186.46 310.256 186.304 cv
310.058 186.545 309.857 186.791 309.654 187.043 cv
311.124 185.27 mo
311.341 185.016 311.557 184.771 311.771 184.534 cv
311.796 184.506 311.821 184.478 311.846 184.451 cv
311.607 184.713 311.367 184.987 311.124 185.27 cv
510.821 160.187 mo
510.865 159.704 510.887 159.223 510.886 158.747 cv
510.885 158.315 510.865 157.885 510.826 157.459 cv
510.816 157.215 li
510.814 157.168 li
510.816 157.215 li
510.826 157.46 li
510.909 158.355 510.905 159.265 510.821 160.187 cv
510.883 157.365 mo
510.882 157.365 510.865 157.296 510.847 157.226 cv
510.812 157.096 li
510.812 157.092 li
510.811 157.088 510.811 157.086 510.811 157.085 cv
510.811 157.085 510.811 157.085 510.811 157.085 cv
510.812 157.085 510.83 157.155 510.848 157.225 cv
510.86 157.273 510.872 157.321 510.878 157.346 cv
510.881 157.36 510.883 157.365 510.883 157.365 cv
510.858 157.254 mo
510.851 157.22 li
510.793 156.946 li
510.851 157.22 li
510.858 157.254 li
514.241 154.195 mo
514.237 154.181 514.233 154.166 514.229 154.152 cv
514.228 154.147 514.226 154.142 514.225 154.137 cv
514.226 154.142 514.228 154.147 514.229 154.152 cv
514.233 154.166 514.237 154.181 514.241 154.195 cv
514.187 154.006 mo
514.185 153.997 514.183 153.99 514.181 153.984 cv
514.183 153.99 514.185 153.997 514.187 154.006 cv
510.089 153.885 mo
510.076 153.852 510.064 153.82 510.051 153.789 cv
510.021 153.716 509.99 153.648 509.957 153.586 cv
509.76 153.049 509.565 152.522 509.375 152.005 cv
509.32 151.885 509.26 151.765 509.198 151.645 cv
509.26 151.765 509.32 151.885 509.376 152.005 cv
509.566 152.522 509.76 153.049 509.958 153.586 cv
510.004 153.674 510.048 153.775 510.089 153.885 cv
508.782 150.881 mo
508.696 150.726 508.611 150.571 508.53 150.416 cv
508.295 149.978 508.044 149.556 507.782 149.15 cv
508.045 149.556 508.296 149.978 508.531 150.416 cv
508.611 150.571 508.696 150.726 508.782 150.881 cv
506.599 147.508 mo
506.4 147.257 506.198 147.014 505.994 146.776 cv
505.487 146.187 504.967 145.637 504.453 145.123 cv
503.987 144.669 503.526 144.24 503.072 143.833 cv
502.709 143.508 502.351 143.198 501.999 142.901 cv
502.791 143.568 503.615 144.307 504.454 145.123 cv
505.175 145.844 505.906 146.635 506.599 147.508 cv
495.869 137.92 mo
494.607 137.561 493.92 137.366 493.869 137.352 cv
493.869 137.352 493.868 137.352 493.868 137.351 cv
493.897 137.359 494.265 137.464 494.95 137.659 cv
495.211 137.733 495.518 137.82 495.869 137.92 cv
355.214 108.043 mo
356.559 105.127 357.987 102.276 359.49 99.4998 cv
361.298 96.1103 363.255 92.831 365.383 89.7085 cv
368.776 84.7298 372.601 80.1494 376.942 76.1529 cv
377.226 75.8922 377.513 75.634 377.802 75.3781 cv
378.86 74.441 379.95 73.5374 381.072 72.681 cv
379.643 73.7715 378.268 74.9386 376.942 76.154 cv
369.879 82.6549 364.18 90.7059 359.491 99.5 cv
357.987 102.276 356.56 105.126 355.214 108.043 cv
355.214 108.043 li
419.839 76.4247 mo
419.136 75.9417 418.388 75.4539 417.592 74.9668 cv
417.42 74.8645 417.245 74.7622 417.067 74.6605 cv
417.245 74.7623 417.42 74.8646 417.593 74.967 cv
418.388 75.4539 419.136 75.9417 419.839 76.4247 cv
399.244 71.3157 mo
399.241 71.3142 399.183 71.3139 399.116 71.3139 cv
399.076 71.3139 399.033 71.314 398.997 71.314 cv
398.951 71.314 398.915 71.3143 398.908 71.3143 cv
398.907 71.3143 398.906 71.3143 398.906 71.3142 cv
398.906 71.3143 398.907 71.3143 398.908 71.3143 cv
398.915 71.3143 398.951 71.314 398.997 71.314 cv
399.014 71.3139 399.032 71.3138 399.05 71.3137 cv
399.069 71.3136 399.088 71.3136 399.106 71.3136 cv
399.159 71.3136 399.208 71.3138 399.231 71.3146 cv
399.238 71.3149 399.243 71.3152 399.244 71.3156 cv
399.244 71.3157 399.244 71.3157 399.244 71.3157 cv
406.621 71.2127 mo
406.613 71.2118 406.605 71.2109 406.597 71.21 cv
406.347 71.1494 406.034 71.12 405.682 71.1096 cv
406.034 71.1198 406.347 71.149 406.597 71.21 cv
406.605 71.2109 406.613 71.2118 406.621 71.2127 cv
385.699 69.5672 mo
386.659 69.008 387.642 68.4894 388.65 68.018 cv
390.05 67.3577 391.494 66.795 392.953 66.3375 cv
393.462 66.1779 393.973 66.0313 394.485 65.8977 cv
392.506 66.4146 390.539 67.1278 388.65 68.0189 cv
387.642 68.4899 386.659 69.0081 385.699 69.5672 cv
f
303.078 207.914 mo
303.031 207.664 li
302.95 206.199 li
303.031 207.664 li
303.078 207.914 li
.00392157 .00392157 .00784314 .796078 cmyk
f
353.823 275.794 mo
353.822 275.794 li
352.51 273.12 351.286 270.37 350.15 267.556 cv
350.078 267.377 350.006 267.197 349.934 267.017 cv
351.13 270.02 352.426 272.949 353.823 275.794 cv
371.005 239.659 mo
370.476 239.659 369.947 239.657 369.419 239.652 cv
366.868 239.628 364.335 239.547 361.824 239.408 cv
361.631 239.398 361.439 239.384 361.248 239.369 cv
361.439 239.384 361.631 239.397 361.823 239.407 cv
364.857 239.575 367.925 239.659 371.016 239.659 cv
373.881 239.659 376.766 239.587 379.664 239.446 cv
376.762 239.587 373.873 239.659 371.005 239.659 cv
379.67 239.445 mo
379.716 239.443 379.764 239.441 379.81 239.438 cv
379.763 239.441 379.717 239.443 379.67 239.445 cv
379.859 239.436 mo
379.892 239.434 379.924 239.433 379.957 239.431 cv
379.924 239.433 379.891 239.434 379.859 239.436 cv
380.038 239.427 mo
380.06 239.426 380.081 239.425 380.103 239.424 cv
380.081 239.425 380.06 239.426 380.038 239.427 cv
380.193 239.419 mo
380.213 239.418 380.231 239.417 380.251 239.416 cv
380.232 239.417 380.212 239.418 380.193 239.419 cv
380.334 239.412 mo
380.355 239.411 380.377 239.409 380.399 239.408 cv
380.377 239.409 380.356 239.41 380.334 239.412 cv
380.474 239.404 mo
380.498 239.403 380.523 239.402 380.547 239.4 cv
380.523 239.402 380.498 239.403 380.474 239.404 cv
380.605 239.397 mo
380.635 239.396 380.665 239.394 380.695 239.392 cv
380.665 239.394 380.635 239.396 380.605 239.397 cv
380.727 239.391 mo
383.767 239.224 386.82 238.981 389.88 238.663 cv
390.501 238.603 391.123 238.538 391.745 238.47 cv
391.745 238.47 li
391.123 238.539 390.501 238.603 389.88 238.664 cv
389.023 238.753 388.167 238.836 387.312 238.913 cv
385.112 239.111 382.916 239.271 380.727 239.391 cv
360.661 239.32 mo
360.422 239.299 360.182 239.279 359.941 239.264 cv
359.941 239.263 359.941 239.263 359.941 239.263 cv
360.182 239.279 360.422 239.299 360.661 239.32 cv
340.828 236.586 mo
340.76 236.571 340.693 236.556 340.626 236.541 cv
339.743 236.342 338.865 236.135 337.992 235.917 cv
337.982 235.914 337.972 235.912 337.962 235.909 cv
338.911 236.146 339.866 236.371 340.828 236.586 cv
339.415 223.589 mo
339.001 223.525 338.578 223.473 338.162 223.413 cv
338.162 223.413 338.162 223.412 338.161 223.412 cv
338.195 223.417 338.229 223.422 338.263 223.426 cv
338.48 223.458 338.698 223.487 338.916 223.517 cv
339.083 223.54 339.249 223.563 339.415 223.589 cv
339.415 223.589 339.415 223.589 339.415 223.589 cv
339.415 223.589 339.415 223.589 339.415 223.589 cv
339.403 223.485 339.385 223.383 339.373 223.279 cv
338.97 220.011 338.65 216.717 338.406 213.406 cv
337.924 206.891 337.734 200.307 337.773 193.711 cv
337.778 192.864 337.787 192.016 337.8 191.169 cv
337.837 189.145 li
337.853 188.733 li
337.876 188.185 li
337.837 189.144 li
337.8 191.169 li
337.64 201.968 338.076 212.755 339.373 223.279 cv
339.385 223.383 339.403 223.486 339.415 223.589 cv
339.837 163.987 mo
340.009 162.704 340.189 161.422 340.372 160.144 cv
340.432 159.727 340.492 159.312 340.553 158.896 cv
341.06 155.58 341.638 152.283 342.289 149.012 cv
343.56 142.618 345.109 136.326 346.945 130.193 cv
347.183 129.399 347.426 128.608 347.674 127.819 cv
349.243 122.7 351.055 117.704 353.087 112.869 cv
353.771 111.242 354.48 109.633 355.214 108.043 cv
355.214 108.043 li
352.302 114.356 349.772 120.977 347.674 127.819 cv
344.536 137.814 342.181 148.257 340.553 158.896 cv
340.307 160.589 340.065 162.286 339.837 163.987 cv
f
422.417 78.3149 mo
422.417 78.3148 422.417 78.3146 422.417 78.3145 cv
422.332 78.1962 422.245 78.0766 422.156 77.9556 cv
422.245 78.0767 422.332 78.1966 422.417 78.3149 cv
409.32 67.238 mo
408.878 67.0352 408.434 66.8254 407.965 66.6282 cv
408.435 66.8254 408.879 67.0352 409.32 67.238 cv
403.798 65.4976 mo
403.08 65.3505 402.445 65.2909 401.815 65.2323 cv
402.446 65.2901 403.08 65.35 403.798 65.4976 cv
401.263 65.1748 mo
400.472 65.0919 li
399.805 65.0211 li
399.721 65.013 li
399.724 65.0129 399.727 65.0129 399.73 65.0128 cv
399.805 65.0209 li
400.473 65.0919 li
401.263 65.1748 li
399.777 65.0104 mo
399.775 65.0101 399.77 65.0099 399.761 65.0097 cv
399.773 65.0099 399.779 65.0101 399.777 65.0104 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 74.6487 ]ct
/9 
<<
/ShadingType 2 
/BBox [.451682 -.0455466 .589134 .0455495 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /9 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 74.6487 ]ct
clp
/9 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.451682 -.0455466 .589134 .0455495 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /9 /Gradient get_res exec grestore
}if
np
338.303 224.537 mo
337.819 224.469 337.319 224.425 336.838 224.354 cv
337.32 224.425 337.819 224.469 338.302 224.537 cv
338.291 224.453 338.277 224.371 338.265 224.289 cv
338.277 224.372 338.292 224.454 338.303 224.537 cv
333.931 223.834 mo
327.447 222.578 321.438 220.767 316.645 217.888 cv
315.447 217.172 314.347 216.39 313.354 215.549 cv
314.347 216.39 315.447 217.172 316.645 217.888 cv
321.438 220.766 327.448 222.578 333.931 223.834 cv
307.644 207.121 mo
307.413 206.319 307.249 205.497 307.157 204.66 cv
307.109 204.093 307.086 203.529 307.086 202.968 cv
307.087 198.308 308.656 193.888 310.285 190.48 cv
310.446 190.175 310.603 189.876 310.759 189.583 cv
310.603 189.876 310.446 190.175 310.285 190.48 cv
308.461 194.298 306.709 199.388 307.157 204.66 cv
307.25 205.497 307.413 206.319 307.644 207.121 cv
312.059 187.213 mo
312.21 186.95 312.361 186.694 312.512 186.443 cv
312.57 185.407 312.648 184.427 312.732 183.52 cv
312.732 183.52 312.732 183.52 312.732 183.52 cv
312.648 184.427 312.569 185.407 312.513 186.443 cv
312.361 186.694 312.211 186.95 312.059 187.213 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 203.207 ]ct
/7 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 203.207 ]ct
clp
/7 /Gradient get_res exec grestore
}if
np
410.257 303.753 mo
411.519 302.844 412.653 301.896 413.678 300.949 cv
412.653 301.897 411.519 302.844 410.257 303.753 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 302.217 ]ct
/10 
<<
/ShadingType 2 
/BBox [.492497 -.0131124 .525519 .013114 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /10 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 302.217 ]ct
clp
/10 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.492497 -.0131124 .525519 .013114 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /10 /Gradient get_res exec grestore
}if
np
356.992 225.625 mo
355.808 215.17 355.212 204.405 355.211 193.582 cv
355.211 192.763 355.214 191.944 355.221 191.125 cv
355.221 191.125 li
355.221 191.125 li
355.218 190.827 355.217 190.529 355.217 190.232 cv
355.217 189.891 355.219 189.551 355.222 189.21 cv
355.216 189.849 355.215 190.487 355.221 191.125 cv
355.124 202.775 355.72 214.379 356.993 225.625 cv
356.992 225.625 356.992 225.625 356.992 225.625 cv
357.014 225.625 mo
358.177 225.619 359.337 225.619 360.51 225.6 cv
359.337 225.619 358.178 225.619 357.014 225.625 cv
361.592 225.573 mo
366.32 225.422 371.137 225.093 376.013 224.6 cv
371.138 225.093 366.32 225.422 361.592 225.573 cv
355.233 188.329 mo
355.258 186.708 355.305 185.068 355.328 183.368 cv
355.418 181.222 355.477 179.136 355.593 177.006 cv
355.478 179.135 355.418 181.222 355.328 183.368 cv
355.305 185.068 355.258 186.708 355.233 188.329 cv
358.729 146.537 mo
359.547 141.289 360.509 136.124 361.663 131.084 cv
363.175 124.457 364.892 118.015 366.944 111.904 cv
364.892 118.015 363.175 124.457 361.663 131.085 cv
360.51 136.125 359.548 141.29 358.729 146.537 cv
373.005 97.0258 mo
375.644 91.6012 378.608 86.6386 382.032 82.4591 cv
383.584 80.578 385.231 78.8712 386.949 77.3883 cv
385.231 78.8713 383.584 80.5778 382.032 82.4589 cv
378.608 86.6384 375.644 91.6012 373.005 97.0258 cv
398.955 71.3735 mo
399.095 71.3449 li
399.123 71.3394 li
399.095 71.3449 li
398.955 71.3735 li
399.244 71.3156 mo
399.243 71.3152 399.238 71.3149 399.231 71.3146 cv
399.239 71.3149 399.244 71.3152 399.244 71.3156 cv
398.908 71.3143 mo
398.907 71.3143 398.906 71.3143 398.906 71.3142 cv
398.906 71.3142 398.909 71.3142 398.912 71.3142 cv
398.913 71.3142 398.912 71.3142 398.913 71.3142 cv
398.925 71.3142 398.955 71.314 398.994 71.3138 cv
399.011 71.3138 399.031 71.3137 399.05 71.3137 cv
399.032 71.3138 399.014 71.3139 398.997 71.314 cv
398.951 71.314 398.915 71.3143 398.908 71.3143 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 148.404 ]ct
/11 
<<
/ShadingType 2 
/BBox [.243992 -.360481 .465076 .360486 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /11 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 148.404 ]ct
clp
/11 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.243992 -.360481 .465076 .360486 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /11 /Gradient get_res exec grestore
}if
np
404.151 301.045 mo
404.986 300.739 405.799 300.396 406.589 300.026 cv
406.595 300.023 406.601 300.021 406.607 300.018 cv
405.811 300.391 404.992 300.737 404.151 301.045 cv
387.718 300 mo
385.852 299.002 384.052 297.708 382.353 296.141 cv
382.348 296.137 382.344 296.133 382.339 296.128 cv
382.298 296.09 382.256 296.052 382.215 296.013 cv
382.18 295.98 382.144 295.946 382.108 295.912 cv
382.098 295.903 382.089 295.894 382.079 295.885 cv
380.262 294.173 378.581 292.206 377.015 290.044 cv
375.799 288.367 374.653 286.573 373.564 284.688 cv
376.057 289.002 378.853 292.844 382.079 295.885 cv
383.858 297.568 385.751 298.948 387.718 300 cv
362.469 256.047 mo
361.991 254.199 361.535 252.328 361.095 250.441 cv
360.973 249.901 360.854 249.359 360.738 248.816 cv
360.855 249.359 360.974 249.901 361.095 250.441 cv
361.535 252.328 361.991 254.199 362.469 256.047 cv
360.065 240.001 mo
360.046 240 360.026 239.998 360.007 239.997 cv
360.026 239.998 360.046 239.999 360.065 240.001 cv
360.065 240.001 360.065 240.001 360.065 240.001 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 271.191 ]ct
/12 
<<
/ShadingType 2 
/BBox [.262249 -.145906 .484322 .149238 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /12 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 271.191 ]ct
clp
/12 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.262249 -.145906 .484322 .149238 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /12 /Gradient get_res exec grestore
}if
np
421.791 232.596 mo
424.383 231.883 li
426.712 231.192 429.117 230.511 431.416 229.768 cv
432.924 229.306 434.422 228.815 435.912 228.303 cv
434.422 228.815 432.924 229.307 431.415 229.769 cv
429.117 230.511 426.712 231.193 424.383 231.883 cv
421.791 232.596 li
491.942 198.141 mo
492.327 197.818 492.71 197.493 493.09 197.167 cv
495.156 195.417 497.141 193.602 499.02 191.718 cv
497.141 193.602 495.157 195.417 493.091 197.167 cv
492.71 197.493 492.327 197.818 491.942 198.141 cv
508.86 179.543 mo
509.195 179.01 509.522 178.471 509.839 177.928 cv
511.92 174.343 513.631 170.543 514.485 166.543 cv
514.692 165.592 514.848 164.633 514.954 163.674 cv
514.848 164.633 514.692 165.592 514.485 166.543 cv
513.63 170.543 511.92 174.343 509.839 177.928 cv
509.522 178.471 509.196 179.009 508.86 179.543 cv
514.35 154.646 mo
514.319 154.512 li
514.281 154.346 li
514.281 154.346 514.281 154.346 514.281 154.346 cv
514.281 154.346 514.281 154.346 514.281 154.345 cv
514.281 154.346 li
514.281 154.345 514.281 154.344 514.28 154.343 cv
514.276 154.328 514.26 154.266 514.241 154.195 cv
514.237 154.181 514.233 154.166 514.229 154.152 cv
514.228 154.147 514.226 154.142 514.225 154.137 cv
514.201 154.047 514.177 153.961 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.175 153.957 514.175 153.957 514.176 153.957 cv
514.177 153.957 514.204 154.054 514.23 154.152 cv
514.256 154.249 514.282 154.346 514.282 154.346 cv
514.282 154.346 514.282 154.346 514.282 154.345 cv
514.319 154.512 li
514.35 154.646 li
514.281 154.346 mo
514.281 154.346 li
514.281 154.346 li
514.187 154.006 mo
514.186 154.004 li
514.182 153.985 514.178 153.972 514.177 153.965 cv
514.178 153.969 514.179 153.975 514.181 153.984 cv
514.183 153.99 514.185 153.997 514.187 154.006 cv
514.187 154.006 li
514.181 153.991 mo
514.16 153.938 li
513.95 153.4 li
513.535 152.337 li
513.335 151.805 513.134 151.27 512.827 150.678 cv
513.135 151.269 513.336 151.804 513.535 152.337 cv
513.951 153.4 li
514.16 153.938 li
514.181 153.991 li
511.988 149.208 mo
511.813 148.905 511.64 148.605 511.468 148.306 cv
511.64 148.605 511.814 148.905 511.988 149.208 cv
511.029 147.633 mo
510.622 147.112 510.2 146.648 509.802 146.166 cv
507.918 143.95 505.869 142.429 504.004 141.23 cv
503.76 141.073 503.525 140.94 503.286 140.796 cv
503.526 140.939 503.761 141.074 504.004 141.23 cv
505.869 142.429 507.918 143.95 509.803 146.166 cv
510.201 146.648 510.623 147.112 511.029 147.633 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 189.193 ]ct
/13 
<<
/ShadingType 2 
/BBox [.446771 -.225948 1.00116 .225951 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /13 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 189.193 ]ct
clp
/13 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.446771 -.225948 1.00116 .225951 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /13 /Gradient get_res exec grestore
}if
np
410.327 299.098 mo
409.766 299.056 409.236 299.014 408.759 298.97 cv
409.236 299.013 409.765 299.056 410.324 299.098 cv
410.325 299.098 410.326 299.098 410.327 299.098 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 299.024 ]ct
/14 
<<
/ShadingType 2 
/BBox [.494303 -.000343635 .501688 .0003466 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /14 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 299.024 ]ct
clp
/14 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [.494303 -.000343635 .501688 .0003466 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /14 /Gradient get_res exec grestore
}if
np
412.462 218.526 mo
413.396 218.313 414.329 218.096 415.261 217.873 cv
415.629 217.792 415.995 217.709 416.361 217.623 cv
416.258 217.647 416.155 217.671 416.051 217.695 cv
415.788 217.756 415.525 217.815 415.261 217.873 cv
414.453 218.066 413.644 218.255 412.834 218.441 cv
412.71 218.47 412.586 218.498 412.462 218.526 cv
420.531 216.591 mo
421.025 216.467 421.524 216.343 422.03 216.219 cv
422.101 216.2 422.171 216.18 422.242 216.161 cv
422.171 216.18 422.101 216.2 422.03 216.219 cv
421.524 216.343 421.025 216.467 420.531 216.591 cv
426.768 214.935 mo
427.381 214.764 427.995 214.588 428.613 214.405 cv
429.012 214.289 429.41 214.172 429.808 214.055 cv
429.411 214.172 429.012 214.289 428.614 214.405 cv
427.995 214.589 427.381 214.764 426.768 214.935 cv
498.954 179.784 mo
500.096 178.728 501.18 177.654 502.198 176.56 cv
501.343 177.479 500.441 178.384 499.498 179.276 cv
499.318 179.446 499.137 179.615 498.954 179.784 cv
510.789 160.502 mo
510.854 159.913 510.887 159.327 510.886 158.747 cv
510.887 159.223 510.865 159.704 510.821 160.187 cv
510.811 160.292 510.8 160.397 510.789 160.502 cv
510.878 157.346 mo
510.872 157.321 510.86 157.273 510.848 157.225 cv
510.83 157.155 510.812 157.085 510.811 157.085 cv
510.811 157.085 510.811 157.085 510.811 157.085 cv
510.811 157.085 510.811 157.084 510.811 157.084 cv
510.812 157.084 510.83 157.154 510.848 157.224 cv
510.858 157.267 510.869 157.309 510.876 157.336 cv
510.876 157.34 510.877 157.343 510.878 157.346 cv
510.125 153.988 mo
510.101 153.918 510.077 153.851 510.051 153.789 cv
510.064 153.82 510.076 153.852 510.089 153.885 cv
510.101 153.918 510.113 153.952 510.125 153.988 cv
508.796 150.906 mo
508.705 150.743 508.615 150.58 508.53 150.417 cv
507.8 149.056 506.918 147.85 505.994 146.776 cv
506.198 147.014 506.4 147.257 506.599 147.508 cv
507.01 148.026 507.408 148.572 507.782 149.15 cv
508.044 149.556 508.295 149.978 508.53 150.416 cv
508.611 150.571 508.696 150.726 508.782 150.881 cv
508.786 150.89 508.791 150.898 508.796 150.906 cv
503.072 143.833 mo
502.156 143.013 501.271 142.286 500.437 141.645 cv
500.941 142.032 501.463 142.45 501.999 142.901 cv
502.351 143.198 502.709 143.508 503.072 143.833 cv
497.473 138.392 mo
497.372 138.358 497.273 138.324 497.176 138.291 cv
496.688 138.152 496.252 138.029 495.869 137.92 cv
495.518 137.82 495.211 137.733 494.95 137.659 cv
495.496 137.814 496.242 138.025 497.176 138.291 cv
497.273 138.324 497.372 138.358 497.473 138.392 cv
493.869 137.352 mo
493.868 137.352 493.868 137.352 493.867 137.351 cv
493.867 137.351 493.866 137.351 493.866 137.351 cv
493.866 137.351 493.867 137.351 493.868 137.351 cv
493.868 137.352 493.869 137.352 493.869 137.352 cv
1 /0 /CSD get_res sepcs
0 sep
f
406.765 299.946 mo
407.229 299.735 407.686 299.515 408.134 299.287 cv
408.036 299.337 407.938 299.386 407.839 299.435 cv
407.562 299.573 407.282 299.707 406.999 299.839 cv
406.921 299.875 406.843 299.911 406.765 299.946 cv
408.515 299.09 mo
408.591 299.05 408.668 299.01 408.745 298.969 cv
408.745 298.969 408.745 298.969 408.745 298.969 cv
408.668 299.01 408.592 299.05 408.515 299.09 cv
f
365.383 89.7085 mo
368.776 84.7299 372.601 80.1494 376.941 76.1529 cv
377.226 75.8922 377.513 75.634 377.802 75.3781 cv
377.513 75.634 377.226 75.8922 376.942 76.1529 cv
372.601 80.1494 368.776 84.7298 365.383 89.7085 cv
385.312 69.7953 mo
386.394 69.1486 387.506 68.5528 388.65 68.018 cv
390.05 67.3577 391.494 66.7949 392.953 66.3375 cv
391.494 66.795 390.05 67.3577 388.65 68.018 cv
387.642 68.4894 386.659 69.008 385.699 69.5672 cv
385.57 69.6425 385.441 69.7185 385.312 69.7953 cv
f
339.415 223.589 mo
339.415 223.589 339.415 223.589 339.415 223.589 cv
339.402 223.485 339.384 223.383 339.372 223.279 cv
338.97 220.011 338.65 216.717 338.406 213.406 cv
338.65 216.717 338.97 220.011 339.373 223.279 cv
339.385 223.383 339.403 223.485 339.415 223.589 cv
338.916 223.517 mo
338.698 223.487 338.48 223.458 338.263 223.426 cv
338.48 223.458 338.699 223.487 338.916 223.517 cv
337.773 193.711 mo
337.778 192.864 337.787 192.016 337.8 191.169 cv
337.836 189.145 li
337.853 188.733 li
337.837 189.145 li
337.8 191.169 li
337.787 192.016 337.778 192.864 337.773 193.711 cv
340.372 160.144 mo
340.432 159.727 340.492 159.312 340.552 158.896 cv
341.06 155.58 341.638 152.283 342.289 149.012 cv
341.638 152.283 341.06 155.58 340.553 158.896 cv
340.492 159.312 340.432 159.727 340.372 160.144 cv
346.945 130.193 mo
347.183 129.399 347.426 128.608 347.673 127.819 cv
349.243 122.7 351.055 117.704 353.087 112.869 cv
351.055 117.704 349.243 122.7 347.674 127.819 cv
347.426 128.608 347.183 129.399 346.945 130.193 cv
.00392157 .00392157 .00784314 .635294 cmyk
f
391.745 238.47 mo
391.745 238.47 li
392.009 238.441 392.274 238.411 392.539 238.381 cv
393.2 238.305 393.862 238.225 394.524 238.141 cv
393.597 238.258 392.671 238.369 391.745 238.47 cv
1 /0 /CSD get_res sepcs
0 sep
f
369.419 239.652 mo
366.868 239.628 364.335 239.547 361.824 239.408 cv
361.191 239.375 360.571 239.305 359.941 239.264 cv
359.941 239.264 359.941 239.264 359.941 239.264 cv
360.182 239.279 360.422 239.299 360.661 239.32 cv
360.857 239.337 361.052 239.354 361.248 239.369 cv
361.439 239.384 361.631 239.398 361.824 239.408 cv
364.335 239.547 366.868 239.628 369.419 239.652 cv
387.312 238.913 mo
388.167 238.836 389.023 238.753 389.88 238.664 cv
390.501 238.603 391.123 238.539 391.745 238.47 cv
391.745 238.47 li
391.123 238.539 390.502 238.604 389.88 238.664 cv
389.024 238.753 388.167 238.836 387.312 238.913 cv
.00392157 .00392157 .00784314 .635294 cmyk
f
393.188 309.35 mo
393.053 309.35 li
393 309.349 392.945 309.349 392.889 309.347 cv
390.971 309.213 li
390.411 309.184 389.895 309.122 389.4 309.044 cv
389.895 309.122 390.41 309.184 390.971 309.212 cv
392.889 309.346 li
392.973 309.349 393.053 309.35 393.131 309.35 cv
393.269 309.35 393.397 309.346 393.522 309.341 cv
393.415 309.346 393.304 309.349 393.188 309.35 cv
365.783 294.508 mo
362.29 290.48 359.293 285.964 356.648 281.189 cv
355.664 279.428 354.722 277.628 353.822 275.794 cv
353.822 275.794 li
354.723 277.629 355.665 279.428 356.649 281.189 cv
357.422 282.585 358.224 283.958 359.061 285.303 cv
361.087 288.561 363.311 291.657 365.783 294.508 cv
307.787 189.652 mo
308.345 188.812 308.903 188.036 309.432 187.317 cv
309.579 187.134 309.725 186.954 309.869 186.777 cv
309.797 186.865 309.726 186.954 309.654 187.043 cv
309.58 187.133 309.506 187.225 309.432 187.317 cv
308.903 188.036 308.345 188.812 307.787 189.652 cv
311.771 184.534 mo
311.838 184.459 311.904 184.386 311.971 184.313 cv
311.929 184.359 311.888 184.405 311.846 184.451 cv
311.821 184.478 311.796 184.506 311.771 184.534 cv
1 /0 /CSD get_res sepcs
0 sep
f
303.191 208.512 mo
303.03 207.664 li
302.949 206.2 li
302.921 205.429 302.867 204.67 302.859 203.929 cv
302.859 203.916 li
302.866 204.661 302.921 205.424 302.95 206.199 cv
302.95 206.199 li
303.031 207.664 li
303.078 207.914 li
303.191 208.512 li
302.859 203.631 mo
302.859 203.602 li
302.86 203.525 302.861 203.449 302.863 203.373 cv
302.985 201.773 303.235 200.286 303.579 198.901 cv
303.495 199.239 303.417 199.583 303.345 199.934 cv
303.121 201.018 302.956 202.163 302.864 203.372 cv
302.864 203.372 li
302.861 203.458 302.86 203.544 302.859 203.631 cv
.00392157 .00392157 .00784314 .635294 cmyk
f
353.822 275.794 mo
353.822 275.794 li
352.509 273.119 351.285 270.37 350.15 267.556 cv
351.286 270.37 352.51 273.12 353.822 275.794 cv
340.626 236.541 mo
339.743 236.342 338.865 236.135 337.992 235.917 cv
338.865 236.135 339.743 236.342 340.626 236.541 cv
f
393.128 309.35 mo
393.051 309.35 392.972 309.348 392.889 309.346 cv
390.972 309.212 li
389.672 309.146 388.617 308.902 387.48 308.685 cv
387.427 308.675 387.375 308.665 387.322 308.655 cv
382.607 307.645 378.298 305.401 374.547 302.657 cv
371.306 300.279 368.405 297.531 365.783 294.508 cv
363.311 291.657 361.087 288.561 359.061 285.303 cv
358.224 283.957 357.422 282.585 356.649 281.189 cv
355.665 279.428 354.723 277.629 353.823 275.794 cv
352.426 272.949 351.13 270.02 349.934 267.017 cv
348.24 262.761 346.747 258.358 345.455 253.837 cv
343.843 248.288 342.522 242.557 341.432 236.72 cv
341.231 236.676 341.029 236.631 340.828 236.586 cv
339.866 236.371 338.911 236.146 337.962 235.909 cv
337.155 235.707 336.354 235.497 335.558 235.275 cv
327.289 233.004 319.503 229.678 313.117 224.427 cv
309.956 221.817 307.121 218.649 305.289 214.906 cv
305.16 214.623 305.03 214.35 304.902 214.075 cv
304.713 213.668 304.529 213.261 304.36 212.821 cv
304.256 212.55 304.158 212.268 304.069 211.966 cv
303.566 210.391 li
303.433 209.904 303.396 209.541 303.305 209.115 cv
303.191 208.512 li
303.078 207.914 li
303.031 207.664 li
302.95 206.199 li
302.921 205.424 302.866 204.661 302.859 203.916 cv
302.859 203.631 li
302.86 203.544 302.861 203.458 302.864 203.372 cv
302.864 203.372 li
302.956 202.163 303.121 201.018 303.345 199.934 cv
303.417 199.583 303.495 199.239 303.579 198.901 cv
304.518 195.123 306.155 192.11 307.787 189.652 cv
308.345 188.812 308.903 188.036 309.432 187.317 cv
309.506 187.225 309.58 187.133 309.654 187.043 cv
309.857 186.791 310.058 186.545 310.256 186.304 cv
310.55 185.947 310.839 185.601 311.124 185.27 cv
311.367 184.987 311.607 184.713 311.846 184.451 cv
311.888 184.405 311.929 184.359 311.971 184.313 cv
312.226 184.037 312.479 183.772 312.732 183.52 cv
312.648 184.427 312.57 185.407 312.512 186.443 cv
312.361 186.694 312.21 186.95 312.059 187.213 cv
311.634 187.953 311.205 188.742 310.759 189.583 cv
310.603 189.876 310.446 190.175 310.285 190.48 cv
308.656 193.888 307.087 198.308 307.086 202.968 cv
307.086 203.529 307.109 204.093 307.157 204.66 cv
307.249 205.497 307.413 206.319 307.644 207.121 cv
308.555 210.281 310.521 213.152 313.354 215.549 cv
314.347 216.39 315.447 217.172 316.645 217.888 cv
321.438 220.767 327.447 222.578 333.931 223.834 cv
334.843 224.01 335.764 224.176 336.692 224.332 cv
336.741 224.34 336.789 224.347 336.838 224.354 cv
337.319 224.425 337.819 224.469 338.303 224.537 cv
338.303 224.537 li
338.292 224.454 338.277 224.372 338.265 224.289 cv
338.262 224.269 338.259 224.248 338.257 224.228 cv
338.22 223.957 338.197 223.684 338.162 223.413 cv
338.578 223.473 339.001 223.525 339.415 223.589 cv
339.403 223.486 339.385 223.383 339.373 223.279 cv
338.076 212.755 337.64 201.968 337.8 191.169 cv
337.837 189.144 li
337.876 188.185 li
337.921 187.086 li
338.091 183.138 li
338.265 180.437 338.408 177.656 338.648 174.972 cv
338.919 171.298 339.347 167.633 339.837 163.987 cv
340.065 162.286 340.307 160.589 340.553 158.896 cv
342.181 148.257 344.536 137.814 347.674 127.819 cv
349.772 120.977 352.302 114.356 355.214 108.043 cv
356.56 105.126 357.987 102.276 359.491 99.5 cv
364.18 90.7059 369.879 82.6549 376.942 76.154 cv
378.268 74.9386 379.643 73.7715 381.072 72.681 cv
382.435 71.6415 383.846 70.6716 385.312 69.7953 cv
385.441 69.7185 385.57 69.6425 385.699 69.5672 cv
386.659 69.0081 387.642 68.4899 388.65 68.0189 cv
390.539 67.1278 392.506 66.4146 394.485 65.8977 cv
396.201 65.4496 397.926 65.1492 399.615 65.009 cv
399.679 65.009 399.734 65.0092 399.761 65.0097 cv
399.77 65.0099 399.775 65.0101 399.777 65.0104 cv
399.774 65.0108 399.757 65.0113 399.721 65.0119 cv
399.73 65.0128 li
399.727 65.0129 399.724 65.0129 399.721 65.013 cv
399.721 65.013 li
399.805 65.0211 li
400.472 65.0919 li
401.263 65.1748 li
401.79 65.23 li
401.798 65.2307 401.806 65.2315 401.815 65.2323 cv
402.445 65.2909 403.08 65.3505 403.798 65.4976 cv
404.04 65.5473 404.292 65.607 404.556 65.6799 cv
405.535 65.9308 406.496 66.177 407.438 66.4179 cv
407.618 66.4857 407.793 66.5561 407.965 66.6282 cv
408.434 66.8254 408.878 67.0352 409.32 67.238 cv
409.482 67.3122 409.643 67.3855 409.805 67.4569 cv
412.834 68.8409 415.121 70.6028 416.994 72.2608 cv
419.274 74.295 420.909 76.2565 422.156 77.9556 cv
422.245 78.0766 422.332 78.1962 422.417 78.3145 cv
421.633 77.7014 420.775 77.0672 419.839 76.4247 cv
419.136 75.9417 418.388 75.4539 417.593 74.967 cv
417.42 74.8646 417.245 74.7623 417.067 74.6605 cv
415.178 73.5779 413.007 72.5498 410.558 71.931 cv
409.89 71.7708 409.212 71.5588 408.54 71.4288 cv
407.912 71.3589 407.273 71.2857 406.621 71.2127 cv
406.613 71.2118 406.605 71.2109 406.597 71.21 cv
406.347 71.149 406.034 71.1198 405.682 71.1096 cv
405.574 71.1064 405.462 71.1049 405.347 71.1049 cv
405.003 71.1049 404.633 71.1178 404.256 71.1339 cv
402.915 71.1698 li
402.403 71.1838 li
402.386 71.1838 402.369 71.1837 402.351 71.1837 cv
401.962 71.1837 401.535 71.2039 401.098 71.2278 cv
399.757 71.282 li
399.079 71.3088 li
398.994 71.3129 li
398.916 71.3138 398.898 71.3141 398.912 71.3142 cv
398.909 71.3142 398.906 71.3142 398.906 71.3142 cv
398.906 71.3143 398.907 71.3143 398.908 71.3143 cv
398.915 71.3143 398.951 71.314 398.997 71.314 cv
399.033 71.314 399.076 71.3139 399.116 71.3139 cv
399.183 71.3139 399.241 71.3142 399.244 71.3157 cv
399.244 71.316 399.241 71.3164 399.235 71.3169 cv
399.123 71.3394 li
399.095 71.3449 li
398.955 71.3735 li
398.815 71.402 li
394.699 72.0233 390.659 74.1841 386.949 77.3883 cv
385.231 78.8712 383.584 80.578 382.032 82.4591 cv
378.608 86.6386 375.644 91.6012 373.005 97.0258 cv
371.869 99.3627 370.792 101.785 369.765 104.268 cv
368.757 106.746 367.82 109.294 366.944 111.904 cv
364.892 118.015 363.175 124.457 361.663 131.084 cv
360.509 136.124 359.547 141.289 358.729 146.537 cv
358.01 151.145 357.402 155.817 356.871 160.527 cv
356.349 165.57 355.97 170.656 355.667 175.765 cv
355.639 176.181 355.615 176.594 355.593 177.006 cv
355.477 179.136 355.418 181.222 355.328 183.368 cv
355.305 185.068 355.258 186.708 355.233 188.329 cv
355.229 188.623 355.225 188.917 355.222 189.21 cv
355.219 189.551 355.217 189.891 355.217 190.232 cv
355.217 190.529 355.218 190.827 355.221 191.125 cv
355.221 191.125 li
355.214 191.944 355.211 192.763 355.211 193.582 cv
355.212 204.405 355.808 215.17 356.992 225.625 cv
356.992 225.625 356.992 225.625 356.993 225.625 cv
356.993 225.625 356.993 225.625 356.993 225.625 cv
357 225.625 357.007 225.625 357.014 225.625 cv
358.178 225.619 359.337 225.619 360.51 225.6 cv
360.669 225.597 360.829 225.594 360.989 225.591 cv
361.19 225.585 361.391 225.579 361.592 225.573 cv
366.32 225.422 371.138 225.093 376.013 224.6 cv
382.202 223.975 388.483 223.085 394.788 221.96 cv
399.554 221.196 404.339 220.296 409.112 219.269 cv
410.354 219.001 411.594 218.726 412.834 218.441 cv
413.644 218.255 414.453 218.066 415.261 217.873 cv
415.525 217.815 415.788 217.756 416.051 217.695 cv
416.976 217.482 417.899 217.254 418.831 217.019 cv
419.393 216.878 419.959 216.735 420.531 216.591 cv
421.025 216.467 421.524 216.343 422.03 216.219 cv
422.101 216.2 422.171 216.18 422.242 216.161 cv
423.767 215.747 425.262 215.355 426.768 214.935 cv
427.381 214.764 427.995 214.589 428.614 214.405 cv
429.012 214.289 429.411 214.172 429.808 214.055 cv
433.813 212.879 437.783 211.651 441.699 210.33 cv
450.278 207.354 458.632 204.118 466.458 200.406 cv
472.006 197.78 477.343 195.018 482.308 192.037 cv
484.343 190.816 486.316 189.557 488.216 188.257 cv
492.333 185.405 496.171 182.423 499.498 179.276 cv
500.441 178.384 501.343 177.479 502.198 176.56 cv
503.086 175.607 503.924 174.637 504.706 173.653 cv
508.071 169.388 510.308 164.834 510.789 160.502 cv
510.8 160.397 510.811 160.292 510.821 160.187 cv
510.905 159.265 510.909 158.355 510.826 157.46 cv
510.816 157.215 li
510.814 157.168 li
510.812 157.096 li
510.847 157.226 li
510.865 157.296 510.882 157.365 510.883 157.365 cv
510.883 157.365 510.881 157.36 510.878 157.346 cv
510.877 157.343 510.876 157.34 510.876 157.336 cv
510.88 157.354 510.883 157.365 510.883 157.365 cv
510.883 157.365 510.878 157.344 510.865 157.292 cv
510.858 157.254 li
510.851 157.22 li
510.793 156.946 li
510.73 156.651 li
510.494 155.525 li
510.384 154.959 510.27 154.412 510.125 153.988 cv
510.113 153.952 510.101 153.918 510.089 153.885 cv
510.048 153.775 510.004 153.674 509.958 153.586 cv
509.76 153.049 509.566 152.522 509.376 152.005 cv
509.32 151.885 509.26 151.765 509.198 151.645 cv
509.07 151.398 508.932 151.152 508.796 150.906 cv
508.791 150.898 508.786 150.89 508.782 150.881 cv
508.696 150.726 508.611 150.571 508.531 150.416 cv
508.296 149.978 508.045 149.556 507.782 149.15 cv
507.408 148.572 507.01 148.026 506.599 147.508 cv
505.906 146.635 505.175 145.844 504.454 145.123 cv
503.615 144.307 502.791 143.568 501.999 142.901 cv
501.463 142.45 500.941 142.032 500.437 141.645 cv
499.069 140.594 497.839 139.775 496.84 139.156 cv
494.934 137.999 493.902 137.373 493.867 137.351 cv
493.868 137.352 493.868 137.352 493.869 137.352 cv
493.92 137.366 494.607 137.561 495.869 137.92 cv
496.252 138.029 496.688 138.152 497.176 138.291 cv
497.273 138.324 497.372 138.358 497.473 138.392 cv
498.983 138.907 500.979 139.601 503.28 140.792 cv
503.282 140.793 503.284 140.795 503.286 140.796 cv
503.525 140.94 503.76 141.073 504.004 141.23 cv
505.869 142.429 507.918 143.95 509.802 146.166 cv
510.2 146.648 510.622 147.112 511.029 147.633 cv
511.099 147.722 511.168 147.813 511.236 147.906 cv
511.313 148.039 511.391 148.172 511.468 148.306 cv
511.64 148.605 511.813 148.905 511.988 149.208 cv
512.166 149.516 512.344 149.826 512.524 150.139 cv
512.636 150.325 512.737 150.504 512.827 150.678 cv
513.134 151.27 513.335 151.805 513.535 152.337 cv
513.95 153.4 li
514.16 153.938 li
514.181 153.991 li
514.186 154.005 li
514.186 154.005 514.186 154.004 514.186 154.004 cv
514.187 154.006 li
514.187 154.006 li
514.187 154.006 li
514.185 153.997 514.183 153.99 514.181 153.984 cv
514.179 153.975 514.178 153.969 514.177 153.965 cv
514.176 153.961 514.176 153.959 514.175 153.958 cv
514.175 153.958 514.175 153.958 514.175 153.958 cv
514.177 153.961 514.201 154.047 514.225 154.137 cv
514.226 154.142 514.228 154.147 514.229 154.152 cv
514.233 154.166 514.237 154.181 514.241 154.195 cv
514.26 154.266 514.276 154.328 514.28 154.343 cv
514.281 154.344 514.281 154.345 514.281 154.346 cv
514.319 154.512 li
514.35 154.646 li
514.395 154.848 li
515.114 157.571 515.291 160.619 514.954 163.674 cv
514.848 164.633 514.692 165.592 514.485 166.543 cv
513.631 170.543 511.92 174.343 509.839 177.928 cv
509.522 178.471 509.195 179.01 508.86 179.543 cv
506.122 183.899 502.78 187.948 499.02 191.718 cv
497.141 193.602 495.156 195.417 493.09 197.167 cv
492.71 197.493 492.327 197.818 491.942 198.141 cv
485.55 203.496 478.442 208.41 470.793 212.725 cv
462.705 217.356 454.059 221.427 445.088 224.933 cv
442.057 226.093 439.002 227.242 435.912 228.303 cv
434.422 228.815 432.924 229.306 431.416 229.768 cv
429.117 230.511 426.712 231.192 424.383 231.883 cv
421.791 232.596 li
420.964 232.823 li
419.178 233.31 li
417.413 233.75 li
411.164 235.286 404.866 236.575 398.562 237.595 cv
397.216 237.788 395.87 237.972 394.524 238.141 cv
393.862 238.225 393.2 238.305 392.539 238.381 cv
392.274 238.411 392.009 238.441 391.745 238.47 cv
391.123 238.538 390.501 238.603 389.88 238.663 cv
386.82 238.981 383.767 239.224 380.727 239.391 cv
380.716 239.391 380.706 239.392 380.695 239.392 cv
380.665 239.394 380.635 239.396 380.605 239.397 cv
380.585 239.398 380.566 239.399 380.547 239.4 cv
380.523 239.402 380.498 239.403 380.474 239.404 cv
380.449 239.406 380.423 239.407 380.399 239.408 cv
380.377 239.409 380.355 239.411 380.334 239.412 cv
380.306 239.413 380.278 239.415 380.251 239.416 cv
380.231 239.417 380.213 239.418 380.193 239.419 cv
380.163 239.421 380.134 239.422 380.103 239.424 cv
380.081 239.425 380.06 239.426 380.038 239.427 cv
380.011 239.428 379.984 239.43 379.957 239.431 cv
379.924 239.433 379.892 239.434 379.859 239.436 cv
379.843 239.437 379.826 239.438 379.81 239.438 cv
379.764 239.441 379.716 239.443 379.67 239.445 cv
379.668 239.445 379.666 239.446 379.664 239.446 cv
376.766 239.587 373.881 239.659 371.016 239.659 cv
367.925 239.659 364.857 239.575 361.823 239.407 cv
361.631 239.397 361.439 239.384 361.248 239.369 cv
361.052 239.354 360.857 239.337 360.661 239.32 cv
360.422 239.299 360.182 239.279 359.941 239.263 cv
359.941 239.263 359.941 239.263 359.941 239.264 cv
359.941 239.264 359.941 239.264 359.941 239.264 cv
359.941 239.264 359.941 239.264 359.94 239.264 cv
359.979 239.511 360.026 239.754 360.065 240.001 cv
360.046 239.999 360.026 239.998 360.007 239.997 cv
359.684 239.973 359.361 239.953 359.036 239.936 cv
359.556 242.932 360.113 245.901 360.738 248.816 cv
360.854 249.359 360.973 249.901 361.095 250.441 cv
361.535 252.328 361.991 254.199 362.469 256.047 cv
364.314 263.193 366.475 270.008 369.241 276.198 cv
370.586 279.157 372.017 282.013 373.564 284.688 cv
374.653 286.573 375.799 288.367 377.015 290.044 cv
378.581 292.206 380.262 294.173 382.079 295.885 cv
382.089 295.894 382.098 295.903 382.108 295.912 cv
382.144 295.946 382.18 295.98 382.215 296.013 cv
382.256 296.052 382.298 296.09 382.339 296.128 cv
382.344 296.133 382.348 296.137 382.353 296.141 cv
384.449 298.075 386.699 299.591 389.036 300.652 cv
391.633 301.831 394.337 302.447 397.055 302.447 cv
397.927 302.447 398.8 302.383 399.671 302.255 cv
401.223 301.988 402.719 301.57 404.151 301.045 cv
404.992 300.737 405.811 300.391 406.607 300.018 cv
406.738 299.959 406.869 299.899 406.999 299.839 cv
407.282 299.707 407.562 299.573 407.839 299.435 cv
408.145 299.283 408.447 299.128 408.745 298.969 cv
408.749 298.969 408.754 298.97 408.759 298.97 cv
409.236 299.014 409.766 299.056 410.327 299.098 cv
411.776 299.227 413.473 299.346 415.258 299.408 cv
414.762 299.918 414.236 300.433 413.678 300.949 cv
412.653 301.896 411.519 302.844 410.257 303.753 cv
409.654 304.187 409.021 304.613 408.357 305.026 cv
406.26 306.289 403.864 307.424 401.055 308.282 cv
400.018 308.549 398.921 308.713 397.813 308.924 cv
396.127 309.217 li
394.407 309.297 li
394.405 309.297 394.403 309.297 394.401 309.297 cv
393.966 309.309 393.595 309.35 393.128 309.35 cv
514.281 154.346 mo
514.281 154.346 514.281 154.346 514.281 154.346 cv
514.281 154.346 li
514.281 154.345 li
514.281 154.346 514.281 154.346 514.281 154.346 cv
level3{
gsave
clp
[214.213 0 0 214.213 302.859 187.179 ]ct
/15 
<<
/ShadingType 2 
/BBox [-.000100923 -.570324 .99196 .570388 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~Jd;AWJdDGXJdDGXJdMMYJdMMYJdMMYJdVSZK+%b\K+%b\K+.h]KFS"_KFS"_KFS"_Kb"1aKb+7bL(F@c
L(OFdL(XLeL(XIdL(XIdLD'XfLD0^gLD9dhL_TmiL_]sjM&$'kM&--lM&63mMAQ<nMAZBoMAcHpMAcHp
MAcHpMAlNqM];]sM]DctM]DctN#hs!N#hs!N#hs!N?8-#N?A3$N?J9%N?J9%NZnH'NZnH'N["N(N[+T)
N[+T)N[4Z*N[=`+O!Xi,O!Xi,O!ao-O=1)/O=:/0O=:/0OX^>2OX^>2OXgD3Ot-M4Ot6S5Ot?Y6OtH_7
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /15 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[214.213 0 0 214.213 302.859 187.179 ]ct
clp
/15 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~JUrB'JUrB'JUrB'JUrB'JUrB'JUrB'JV&K*JqAT+JqAT+JqJ].K7ef/K7ef/K7no2KS5#3KS>,6KnY57
KnY57KnY57KnY57KnY89L5(G;L5(G;L5(J=LPLY?LPL\ALkpkCLkpkCLkpnEM2@(GM2@(GM2@(GM2@(G
M2@(GM2@(HMMd:KMMd:KMMd:LMi3LOMi3LOMi3LPN/W^SN/W^SN/W^SN/W^TNK&pWNK&pWNK&pWNK&pW
NK&pWNK&pWNK&pWNfK-[NfK-[NfK-[O,o?_O,o?_O,o?_OH>QcOH>QcOH>QcOcbcgOcbcgOcbcgOcbcg
~>
<~#7(S@#RC\A#RLeD#mgnE#mgnE#mq"H$4@4L$O[=M$OdFP$k3XT%1NaU%1NaU%1WjX%M''\%hB0]%hK9`
&.fEc&J5Te&J5Te&J5Wg&eYik',)&o'GM5q'GM8s'bqGu'bqK"()@]&(Ddl((Ddo*(`4,.)&X;0)&X;0
)&X;1)B'M5)]K_9*#oq<*#oq=*??.@*??.@*??.A*Zc@E+!2RI+<VdL+<VdM+X&!P+X&!Q+sJ3U,9nEX
,9nEX,U=W\,pai`,pai`,pai`-71&d-RU8h-n$Jl-n$Jl.4H\p.4H\p.Olnt.Olnt.k<,#/1`>'/M/P+
~>
0 0 ]
>>
0 0 1 0 [-.000100923 -.570324 .99196 .570388 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /15 /Gradient get_res exec grestore
}if
np
grestore
627.666 212.838 mo
581.914 212.838 li
604.583 149.644 li
cp
694.596 256.382 mo
643.464 130.089 li
641.07 123.792 639.054 118.653 637.474 114.813 cv
635.799 110.749 633.715 106.894 631.276 103.354 cv
628.628 99.5142 625.119 96.3402 620.843 93.9162 cv
616.479 91.4482 611.085 90.1962 604.811 90.1962 cv
598.622 90.1962 593.272 91.4482 588.908 93.9172 cv
584.621 96.3472 581.101 99.5832 578.447 103.536 cv
576.009 107.17 573.7 111.753 571.584 117.156 cv
566.444 130.307 li
516.359 257.455 li
514.275 262.613 512.752 266.727 511.827 269.69 cv
510.806 272.962 510.288 276.196 510.288 279.305 cv
510.288 285.188 512.688 290.459 517.422 294.969 cv
522.094 299.425 527.583 301.686 533.738 301.686 cv
541.066 301.686 546.54 299.355 550.006 294.757 cv
552.872 290.953 556.132 284.093 559.975 273.789 cv
568.243 251.585 li
641.669 251.585 li
649.968 273.393 li
651.225 276.452 652.729 279.978 654.483 283.975 cv
656.393 288.336 658.182 291.543 659.944 293.769 cv
661.855 296.189 664.253 298.133 667.069 299.543 cv
669.913 300.964 673.285 301.686 677.086 301.686 cv
683.634 301.686 689.305 299.335 693.947 294.696 cv
698.584 290.059 700.936 284.79 700.936 279.038 cv
700.936 274.034 698.857 266.609 694.596 256.382 cv
.743679 .675013 .671199 .885771 cmyk
f
gsave
458.81 320.392 mo
454.133 320.392 450.306 324.218 450.306 328.895 cv
450.306 376.084 li
450.306 380.761 454.133 384.588 458.81 384.588 cv
692.097 384.588 li
696.775 384.588 700.601 380.761 700.601 376.084 cv
700.601 328.895 li
700.601 324.218 696.775 320.392 692.097 320.392 cv
458.81 320.392 li
clp
450.306 320.392 mo
700.601 320.392 li
700.601 384.588 li
450.306 384.588 li
cp
level3{
gsave
clp
[250.295 0 0 250.295 450.306 352.49 ]ct
/16 
<<
/ShadingType 2 
/BBox [-1.58505e-6 -.128241 1 .128241 ] 
/ColorSpace /0 /CSA get_res
/Coords [0 0 1 0 ]
/Domain [0 1 ]
/Extend[ true true]
/Function
<<
/Domain[0 1 ] 
/FunctionType 3
/Functions [
<<
/Domain[0 1 ] 
/Range[0 1 0 1 0 1 0 1 ] 
/FunctionType 0
/Order 1 
/DataSource <~V?m5&V[<D(V[<D(V[EJ)W!iY+W!r_,W"&e-W=An.W=Jt/W=T%0W=]+1WY,:3WY,:3WtPI5WtYO6X;(^8
X;1d9XVUs;XV_$<Xr.3>Xr.3>Xr79?Y8[HAY8[HAYT*WCYT3]DYT<cEYoWlFYo`rGYoj#HZ60,IZ692J
Z6B8KZQ]ALZQfGMZQoMNZm>\PZmGbQZmGbQZmPhR[3u"T[4)(U[42.V[42.V[OV=X[O_CY[OhIZ[k7X\
[k7X\\1[g^\1dm_\1dm_\M4'a\M=-b\ha<d\ha<d\hjBe]/9Qg]/BWh]/BWh]Jffj]Jolk]K#rl]fH,n
~>
/BitsPerSample 8
/Encode [0 63 ]
/Decode [0 1 0 1 0 1 0 1 ]
/Size [64 ]
>>
]
/Bounds []
/Encode [0 1 ]
>>
>>/Gradient add_res /16 /Gradient get_res clonedict shfill grestore
}if
level3 not{
gsave
[250.295 0 0 250.295 450.306 352.49 ]ct
clp
/16 {
/0 /CSA get_res setcolorspace
<<
/NumSamples 256 
/NumComp 4 
/Scaling[[.00392157 0 ][.00392157 0 ][.00392157 0 ][.00392157 0 ]]
/Samples[
<~V5C,eVP^5fVP^5fVPg>iVl-GjVl-GjVl6PmW2QYnW2QYnW2QYnW2ZbqWMukrWN)tuWiE)!WiN2$X/i;%
X/i>'XK8M)XK8P+Xf\_-Xf\_-Xf\b/Y-+q1Y-+t3YHP.5YHP.5YHP17Yct@9Yct@9YctC;Z*CR=Z*CR=
Z*CR>ZEgdAZEgdAZEgdBZa7!EZa7!EZa7!EZa7!F['[3I['[3I['[3I['[3J[C*EM[C*EM[C*EN[^NWQ
[^NWQ\$riU\$riU\$riU\@B&Y\@B&Y\[f8]\[f8]\[f8]]"5Ja]"5Ja]"5Ja]=Y\e]=Y\e]=Y\e]Y(ni
~>
<~#RLeD#mgnE#mq"H$4@4L$OdFP$k3XT%1NaU%1WjX%M''\%hK9`&.oKd&J5Te&J>]h&ebol',2,p'GV>t
'bqK"()@]&(Ddo*(`4),(`4,.)&X>2)B'M4)B'P6)]Kb:*#ot>*??.@*??1B*ZcCF+!2RH+!2UJ+<VgN
+X&!P+X&!Q+sJ3U,9nEY,U=W],pai`,paia-71&e-RU8i-n$Jm.4H\p.4H\q.Olnu.k<,$/1`>(/M/P+
/M/P+/hSb/0/"t30/"t30JG170ekC;1,:U?1,:U?1G^gC1c.$G2)R6K2)R6K2E!HO2`EZS3&ilW3B9)[
~>
0 0 ]
>>
0 0 1 0 [-1.58505e-6 -.128241 1 .128241 ]true true []
/DeviceCMYK
GenStrips
} /Gradient add_res /16 /Gradient get_res exec grestore
}if
np
grestore
476.752 373.435 mo
470.594 373.435 466.165 371.996 462.247 368.022 cv
466.395 363.936 li
469.385 366.93 472.665 367.849 476.869 367.849 cv
482.221 367.849 485.328 365.548 485.328 361.578 cv
485.328 359.793 484.813 358.298 483.716 357.318 cv
482.68 356.339 481.645 355.936 479.226 355.589 cv
474.395 354.9 li
471.053 354.441 468.41 353.288 466.625 351.619 cv
464.609 349.721 463.63 347.13 463.63 343.793 cv
463.63 336.656 468.808 331.763 477.328 331.763 cv
482.741 331.763 486.537 333.145 490.048 336.426 cv
486.078 340.339 li
483.543 337.921 480.609 337.171 477.155 337.171 cv
472.323 337.171 469.675 339.936 469.675 343.563 cv
469.675 345.057 470.135 346.385 471.227 347.359 cv
472.262 348.283 473.935 348.971 475.833 349.262 cv
480.496 349.951 li
484.293 350.528 486.425 351.445 488.149 353.002 cv
490.394 354.956 491.486 357.895 491.486 361.405 cv
491.486 368.945 485.328 373.435 476.752 373.435 cv
0 0 0 0 cmyk
f
533.294 373.088 mo
527.881 373.088 li
519.534 344.369 li
511.249 373.088 li
505.836 373.088 li
495.132 332.109 li
501.693 332.109 li
508.831 361.405 li
517.06 332.109 li
522.07 332.109 li
530.299 361.405 li
537.437 332.109 li
543.998 332.109 li
cp
f
550.011 373.088 mo
550.011 332.109 li
576.199 332.109 li
576.199 337.691 li
556.23 337.691 li
556.23 349.665 li
573.265 349.665 li
573.265 355.19 li
556.23 355.19 li
556.23 367.506 li
576.199 367.506 li
576.199 373.088 li
cp
f
605.452 340.456 mo
603.727 338.553 601.426 337.691 598.488 337.691 cv
590.952 337.691 li
590.952 367.506 li
598.488 367.506 li
601.426 367.506 603.727 366.639 605.452 364.741 cv
607.584 362.384 607.641 357.951 607.641 352.308 cv
607.641 346.67 607.584 342.813 605.452 340.456 cv
609.712 369.231 mo
607.125 371.823 603.381 373.088 599.121 373.088 cv
584.733 373.088 li
584.733 332.109 li
599.121 332.109 li
603.381 332.109 607.125 333.375 609.712 335.966 cv
614.145 340.395 613.855 346.384 613.855 352.308 cv
613.855 358.236 614.145 364.802 609.712 369.231 cv
f
623.087 373.088 mo
623.087 332.109 li
649.275 332.109 li
649.275 337.691 li
629.306 337.691 li
629.306 349.665 li
646.341 349.665 li
646.341 355.19 li
629.306 355.19 li
629.306 367.506 li
649.275 367.506 li
649.275 373.088 li
cp
f
682.961 373.088 mo
664.028 344.252 li
664.028 373.088 li
657.809 373.088 li
657.809 332.109 li
663.507 332.109 li
682.445 360.884 li
682.445 332.109 li
688.66 332.109 li
688.66 373.088 li
cp
f
grestore
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 ]]
[/CSD [/0 ]]
[/Gradient [/0 /1 /2 /3 /4 /5 /6 /7 /8 /9 
/10 /11 /12 /13 /14 /15 /16 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
